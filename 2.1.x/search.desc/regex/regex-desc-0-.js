searchState.loadedDescShard("regex", 0, "This crate provides routines for searching strings for …\nA low level representation of the byte offsets of each …\nAn iterator over all non-overlapping capture matches in a …\nAn iterator over the names of all capture groups in a …\nRepresents the capture groups for a single match.\nThe compiled program exceeded the set size limit. The …\nAn error that occurred during parsing or compiling a …\nRepresents a single match of a regex in a haystack.\nAn iterator over all non-overlapping matches in a haystack.\nA helper type for forcing literal string replacement.\nA compiled regular expression for searching Unicode …\nA configurable builder for a <code>Regex</code>.\nMatch multiple, possibly overlapping, regexes in a single …\nA configurable builder for a <code>RegexSet</code>.\nA trait for types that can be used to replace matches in a …\nA by-reference adaptor for a <code>Replacer</code>.\nA set of matches returned by a regex set.\nAn owned iterator over the set of matches from a regex set.\nA borrowed iterator over the set of matches from a regex …\nAn iterator over all substrings delimited by a regex match.\nAn iterator over at most <code>N</code> substrings delimited by a regex …\nAn iterator over all group matches in a <code>Captures</code> value.\nA syntax error.\nReturns the original string of this regex.\nReturns the substring of the haystack that matched.\nCompiles the pattern given to <code>RegexBuilder::new</code> with the …\nCompiles the patterns given to <code>RegexSetBuilder::new</code> with …\nReturns a type that implements <code>Replacer</code>, but that borrows …\nReturns a type that implements <code>Replacer</code>, but that borrows …\nSearch for regex matches in <code>&amp;[u8]</code> haystacks.\nReturns a fresh allocated set of capture locations that can\nReturns an iterator over the capture names in this regex.\nThis routine searches for the first match of this regex in …\nReturns the same as <code>Regex::captures</code>, but starts the search …\nReturns an iterator that yields successive non-overlapping …\nReturns the number of captures groups in this regex.\nThis is like <code>Regex::captures</code>, but writes the byte offsets …\nReturns the same as <code>Regex::captures_read</code>, but starts the …\nThis configures whether to enable case insensitive …\nThis configures whether to enable case insensitive …\nThis configures CRLF mode for the entire pattern.\nThis configures CRLF mode for all of the patterns.\nSet the approximate capacity, in bytes, of the cache of …\nSet the approximate capacity, in bytes, of the cache of …\nThis configures dot-matches-new-line mode for the entire …\nThis configures dot-matches-new-line mode for the entire …\nCreate a new empty regex set.\nReturns the byte offset of the end of the match in the …\nEscapes all regular expression meta characters in <code>pattern</code>.\nExpands all instances of <code>$ref</code> in <code>replacement</code> to the …\nThis is a convenience routine for extracting the substrings\nThis routine searches for the first match of this regex in …\nReturns the same as <code>Regex::find</code>, but starts the search at …\nReturns an iterator that yields successive non-overlapping …\nShows the original regular expression.\nShows the original regular expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse a string into a regular expression\nReturns the <code>Match</code> associated with the capture group at …\nReturns the start and end byte offsets of the capture …\nThis configures verbose mode for the entire pattern.\nThis configures verbose mode for all of the patterns.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this match has a length of …\nReturns <code>true</code> if this set contains no regexes.\nReturns true if and only if there is a match for the regex …\nReturns true if and only if one of the regexes in this set …\nReturns the same as <code>Regex::is_match</code>, but starts the search …\nReturns true if and only if one of the regexes in this set …\nReturns an iterator over all capture groups. This includes …\nReturns an iterator over the indices of the regexes that …\nReturns the total number of capture groups. This includes …\nReturns the length, in bytes, of this match.\nReturns the total number of capture groups (even if they …\nReturns the total number of regexes in this set.\nThe total number of regexes in the set that created these …\nConfigures the line terminator to be used by the regex.\nConfigures the line terminator to be used by the regex.\nWhether the regex at the given index matched.\nWhether this set contains any matches.\nReturns the set of regexes that match in the given …\nReturns the set of regexes that match in the given …\nThis configures multi-line mode for the entire pattern.\nThis configures multi-line mode for all of the patterns.\nReturns the <code>Match</code> associated with the capture group named …\nSet the nesting limit for this parser.\nSet the nesting limit for this parser.\nCreate a new builder with a default configuration for the …\nCreate a new builder with a default configuration for the …\nCompiles a regular expression. Once compiled, it can be …\nCreate a new regex set with the given regular expressions.\nReturn a fixed unchanging replacement string.\nReturn a fixed unchanging replacement string.\nThis configures octal mode for the entire pattern.\nThis configures octal mode for all of the patterns.\nReturns the regex patterns that this regex set was …\nReturns the range over the starting and ending byte …\nReplaces the leftmost-first match in the given haystack …\nReplaces all non-overlapping matches in the haystack with …\nAppends possibly empty data to <code>dst</code> to replace the current …\nReplaces at most <code>limit</code> non-overlapping matches in the …\nReturns the end byte offset of the first match in the …\nReturns the same as <code>Regex::shortest_match</code>, but starts the …\nSets the approximate size limit, in bytes, of the compiled …\nSets the approximate size limit, in bytes, of the compiled …\nReturns an iterator of substrings of the haystack given, …\nReturns an iterator of at most <code>limit</code> substrings of the …\nReturns the byte offset of the start of the match in the …\nReturns the total number of capturing groups that appear …\nThis configures swap-greed mode for the entire pattern.\nThis configures swap-greed mode for all of the patterns.\nAttempts to parse a string into a regular expression\nAttempts to parse a string into a regular expression\nThis configures Unicode mode for the entire pattern.\nThis configures Unicode mode for the all of the patterns.\nA low level representation of the byte offsets of each …\nAn iterator over all non-overlapping capture matches in a …\nAn iterator over the names of all capture groups in a …\nRepresents the capture groups for a single match.\nRepresents a single match of a regex in a haystack.\nAn iterator over all non-overlapping matches in a haystack.\nA helper type for forcing literal string replacement.\nA compiled regular expression for searching Unicode …\nA configurable builder for a <code>Regex</code>.\nMatch multiple, possibly overlapping, regexes in a single …\nA configurable builder for a <code>RegexSet</code>.\nA trait for types that can be used to replace matches in a …\nA by-reference adaptor for a <code>Replacer</code>.\nA set of matches returned by a regex set.\nAn owned iterator over the set of matches from a regex set.\nA borrowed iterator over the set of matches from a regex …\nAn iterator over all substrings delimited by a regex match.\nAn iterator over at most <code>N</code> substrings delimited by a regex …\nAn iterator over all group matches in a <code>Captures</code> value.\nReturns the substring of the haystack that matched.\nReturns the original string of this regex.\nCompiles the pattern given to <code>RegexBuilder::new</code> with the …\nCompiles the patterns given to <code>RegexSetBuilder::new</code> with …\nReturns a type that implements <code>Replacer</code>, but that borrows …\nReturns a type that implements <code>Replacer</code>, but that borrows …\nReturns a fresh allocated set of capture locations that can\nReturns an iterator over the capture names in this regex.\nThis routine searches for the first match of this regex in …\nReturns the same as <code>Regex::captures</code>, but starts the search …\nReturns an iterator that yields successive non-overlapping …\nReturns the number of captures groups in this regex.\nThis is like <code>Regex::captures</code>, but writes the byte offsets …\nReturns the same as <code>Regex::captures_read</code>, but starts the …\nThis configures whether to enable case insensitive …\nThis configures whether to enable case insensitive …\nThis configures CRLF mode for the entire pattern.\nThis configures CRLF mode for all of the patterns.\nSet the approximate capacity, in bytes, of the cache of …\nSet the approximate capacity, in bytes, of the cache of …\nThis configures dot-matches-new-line mode for the entire …\nThis configures dot-matches-new-line mode for the entire …\nCreate a new empty regex set.\nReturns the byte offset of the end of the match in the …\nExpands all instances of <code>$ref</code> in <code>replacement</code> to the …\nThis is a convenience routine for extracting the substrings\nThis routine searches for the first match of this regex in …\nReturns the same as <code>Regex::find</code>, but starts the search at …\nReturns an iterator that yields successive non-overlapping …\nShows the original regular expression.\nShows the original regular expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse a string into a regular expression\nReturns the <code>Match</code> associated with the capture group at …\nReturns the start and end byte offsets of the capture …\nThis configures verbose mode for the entire pattern.\nThis configures verbose mode for all of the patterns.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this match has a length of …\nReturns <code>true</code> if this set contains no regexes.\nReturns true if and only if there is a match for the regex …\nReturns true if and only if one of the regexes in this set …\nReturns the same as <code>Regex::is_match</code>, but starts the search …\nReturns true if and only if one of the regexes in this set …\nReturns an iterator over all capture groups. This includes …\nReturns an iterator over the indices of the regexes that …\nReturns the total number of capture groups. This includes …\nReturns the length, in bytes, of this match.\nReturns the total number of capture groups (even if they …\nReturns the total number of regexes in this set.\nThe total number of regexes in the set that created these …\nConfigures the line terminator to be used by the regex.\nConfigures the line terminator to be used by the regex.\nWhether the regex at the given index matched.\nWhether this set contains any matches.\nReturns the set of regexes that match in the given …\nReturns the set of regexes that match in the given …\nThis configures multi-line mode for the entire pattern.\nThis configures multi-line mode for all of the patterns.\nReturns the <code>Match</code> associated with the capture group named …\nSet the nesting limit for this parser.\nSet the nesting limit for this parser.\nCreate a new builder with a default configuration for the …\nCreate a new builder with a default configuration for the …\nCompiles a regular expression. Once compiled, it can be …\nCreate a new regex set with the given regular expressions.\nReturn a fixed unchanging replacement byte string.\nReturn a fixed unchanging replacement byte string.\nThis configures octal mode for the entire pattern.\nThis configures octal mode for all of the patterns.\nReturns the regex patterns that this regex set was …\nReturns the range over the starting and ending byte …\nReplaces the leftmost-first match in the given haystack …\nReplaces all non-overlapping matches in the haystack with …\nAppends possibly empty data to <code>dst</code> to replace the current …\nReplaces at most <code>limit</code> non-overlapping matches in the …\nReturns the end byte offset of the first match in the …\nReturns the same as <code>shortest_match</code>, but starts the search …\nSets the approximate size limit, in bytes, of the compiled …\nSets the approximate size limit, in bytes, of the compiled …\nReturns an iterator of substrings of the haystack given, …\nReturns an iterator of at most <code>limit</code> substrings of the …\nReturns the byte offset of the start of the match in the …\nReturns the total number of capturing groups that appear …\nThis configures swap-greed mode for the entire pattern.\nThis configures swap-greed mode for all of the patterns.\nAttempts to parse a string into a regular expression\nAttempts to parse a string into a regular expression\nThis configures Unicode mode for the entire pattern.\nThis configures Unicode mode for the all of the patterns.")