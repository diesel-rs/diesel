searchState.loadedDescShard("deranged", 0, "The largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe largest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nThe smallest value that can be represented by this type.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nAn optional ranged value that is not present.\nA <code>RangedI128</code> that is optional. Equivalent to …\nA <code>RangedI16</code> that is optional. Equivalent to …\nA <code>RangedI32</code> that is optional. Equivalent to …\nA <code>RangedI64</code> that is optional. Equivalent to …\nA <code>RangedI8</code> that is optional. Equivalent to <code>Option&lt;RangedI8&gt;</code>…\nA <code>RangedIsize</code> that is optional. Equivalent to …\nA <code>RangedU128</code> that is optional. Equivalent to …\nA <code>RangedU16</code> that is optional. Equivalent to …\nA <code>RangedU32</code> that is optional. Equivalent to …\nA <code>RangedU64</code> that is optional. Equivalent to …\nA <code>RangedU8</code> that is optional. Equivalent to <code>Option&lt;RangedU8&gt;</code>…\nA <code>RangedUsize</code> that is optional. Equivalent to …\nAn <code>i128</code> that is known to be in the range <code>MIN..=MAX</code>.\nAn <code>i16</code> that is known to be in the range <code>MIN..=MAX</code>.\nAn <code>i32</code> that is known to be in the range <code>MIN..=MAX</code>.\nAn <code>i64</code> that is known to be in the range <code>MIN..=MAX</code>.\nAn <code>i8</code> that is known to be in the range <code>MIN..=MAX</code>.\nAn <code>isize</code> that is known to be in the range <code>MIN..=MAX</code>.\nA <code>u128</code> that is known to be in the range <code>MIN..=MAX</code>.\nA <code>u16</code> that is known to be in the range <code>MIN..=MAX</code>.\nA <code>u32</code> that is known to be in the range <code>MIN..=MAX</code>.\nA <code>u64</code> that is known to be in the range <code>MIN..=MAX</code>.\nA <code>u8</code> that is known to be in the range <code>MIN..=MAX</code>.\nA <code>usize</code> that is known to be in the range <code>MIN..=MAX</code>.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nCreates an optional ranged value that is present.\nAbsolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …\nAbsolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …\nAbsolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …\nAbsolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …\nAbsolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …\nAbsolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked integer addition. Computes <code>self / rhs</code>, returning …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked integer addition. Computes <code>self * rhs</code>, returning …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if the …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nChecked integer addition. Computes <code>self - rhs</code>, returning …\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nExpand the range that the value may be in. <strong>Fails to compile</strong>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nReturns the value as a primitive type.\nReturns the value as the standard library’s <code>Option</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nReturns <code>true</code> if the value is not the niche value.\nOutputs the detailed cause of parsing an integer failing.\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nAttempt to narrow the range that the value may be in. …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nNegation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer if the given value is in the …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with the given value, saturating …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer with a statically known value. …\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nCreates a ranged integer without checking the value.\nRemainder. Computes <code>self % rhs</code>, statically guaranteeing …\nRemainder. Computes <code>self % rhs</code>, statically guaranteeing …\nRemainder. Computes <code>self % rhs</code>, statically guaranteeing …\nRemainder. Computes <code>self % rhs</code>, statically guaranteeing …\nRemainder. Computes <code>self % rhs</code>, statically guaranteeing …\nRemainder. Computes <code>self % rhs</code>, statically guaranteeing …\nSaturating absolute value. Computes <code>self.abs()</code>, saturating …\nSaturating absolute value. Computes <code>self.abs()</code>, saturating …\nSaturating absolute value. Computes <code>self.abs()</code>, saturating …\nSaturating absolute value. Computes <code>self.abs()</code>, saturating …\nSaturating absolute value. Computes <code>self.abs()</code>, saturating …\nSaturating absolute value. Computes <code>self.abs()</code>, saturating …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer negation. Computes <code>self - rhs</code>, …\nSaturating integer negation. Computes <code>self - rhs</code>, …\nSaturating integer negation. Computes <code>self - rhs</code>, …\nSaturating integer negation. Computes <code>self - rhs</code>, …\nSaturating integer negation. Computes <code>self - rhs</code>, …\nSaturating integer negation. Computes <code>self - rhs</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nCreates an optional ranged integer without checking the …\nUnchecked absolute value. Computes <code>self.abs()</code>, assuming …\nUnchecked absolute value. Computes <code>self.abs()</code>, assuming …\nUnchecked absolute value. Computes <code>self.abs()</code>, assuming …\nUnchecked absolute value. Computes <code>self.abs()</code>, assuming …\nUnchecked absolute value. Computes <code>self.abs()</code>, assuming …\nUnchecked absolute value. Computes <code>self.abs()</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer addition. Computes <code>self + rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked integer division. Computes <code>self / rhs</code>, assuming …\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked integer multiplication. Computes <code>self * rhs</code>, …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked remainder. Computes <code>self % rhs</code>, assuming that …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked Euclidean remainder. Computes …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nUnchecked integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer addition. Computes <code>self + rhs</code>, wrapping …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …\nWrapping integer subtraction. Computes <code>self - rhs</code>, …")