searchState.loadedDescShard("unicode_normalization", 0, "Unicode character composition and decomposition utilities …\nExternal iterator for a string decomposition’s …\nThe QuickCheck algorithm can quickly determine if a text …\nThe text may be normalized.\nThe text is definitely not normalized.\nExternal iterator for a string recomposition’s …\nExternal iterator for replacements for a string’s …\nUAX15-D4: This iterator keeps track of how many …\nMethods for iterating over strings while applying Unicode …\nThe text is definitely normalized.\nMethods for composing and decomposing characters.\nA transformation which replaces CJK Compatibility …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuthoritatively check if a string is in NFC.\nQuickly check if a string is in NFC, potentially returning …\nAuthoritatively check if a string is Stream-Safe NFC.\nQuickly check if a string is Stream-Safe NFC.\nAuthoritatively check if a string is in NFD.\nQuickly check if a string is in NFD.\nAuthoritatively check if a string is Stream-Safe NFD.\nQuickly check if a string is Stream-Safe NFD.\nAuthoritatively check if a string is in NFKC.\nQuickly check if a string is in NFKC.\nAuthoritatively check if a string is in NFKD.\nQuickly check if a string is in NFKD.\nAn Iterator over the string in Unicode Normalization Form C\nReturns an iterator over the string in Unicode …\nAn Iterator over the string in Unicode Normalization Form …\nReturns an iterator over the string in Unicode …\nAn Iterator over the string with Conjoining Grapheme …\nLook up the canonical combining class for a codepoint.\nCompose two characters into a single character, if …\nCompute canonical Unicode decomposition for character. See …\nCompute standard-variation decomposition for character.\nCompute canonical or compatible Unicode decomposition for …\nReturn whether the given character is a combining mark (…\nReturn whether the given character is assigned (…")