searchState.loadedDescShard("ipnetwork", 0, "The <code>ipnetwork</code> crate provides a set of APIs to work with IP …\nRepresents a generic network range. This type can have two …\nRepresents a bunch of errors that can occur while working …\nRepresents a network range where the IP addresses are of v4\nRepresents a network range where the IP addresses are of v6\nRepresents a generic network size. For IPv4, the max size …\nReturns the broadcasting address of this <code>Ipv4Network</code>. This …\nReturns the broadcast address of this <code>Ipv6Network</code>. This …\nReturns the broadcasting address of this <code>IpNetwork</code>. This …\nChecks if a given <code>Ipv4Addr</code> is in this <code>Ipv4Network</code>\nChecks if a given <code>Ipv6Addr</code> is in this <code>Ipv6Network</code>\nChecks if a given <code>IpAddr</code> is in this <code>IpNetwork</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP part of a given <code>IpNetwork</code>\nConverts a <code>IpAddr</code> network mask into a prefix. If the mask …\nConverts a <code>Ipv4Addr</code> network mask into a prefix.\nConverts a <code>Ipv6Addr</code> network mask into a prefix. If the …\nReturns true if the IP in this <code>IpNetwork</code> is a valid IPv4 …\nReturns true if the IP in this <code>IpNetwork</code> is a valid IPv6 …\nChecks if the given <code>Ipv4Network</code> is a subnet of the other.\nChecks if the given <code>Ipv6Network</code> is a subnet of the other.\nChecks if the given <code>Ipv4Network</code> is a supernet of the other.\nChecks if the given <code>Ipv6Network</code> is a supernet of the other.\nReturns an iterator over <code>Ipv4Network</code>. Each call to <code>next</code> …\nReturns an iterator over <code>Ipv6Network</code>. Each call to <code>next</code> …\nReturns an iterator over the addresses contained in the …\nReturns the mask for this <code>Ipv4Network</code>. That means the …\nReturns the mask for this <code>Ipv6Network</code>. That means the …\nReturns the mask for this <code>IpNetwork</code>. That means the <code>prefix</code> …\nReturns the address of the network denoted by this …\nReturns the address of the network denoted by this …\nReturns the address of the network denoted by this …\nConstructs a new <code>Ipv4Network</code> from any <code>Ipv4Addr</code> and a …\nConstructs a new <code>Ipv6Network</code> from any <code>Ipv6Addr</code> and a …\nConstructs a new <code>IpNetwork</code> from a given <code>IpAddr</code> and a …\nReturns the <code>n</code>:th address within this network. The adresses …\nChecks if the given <code>Ipv4Network</code> is partly contained in …\nChecks if the given <code>Ipv6Network</code> is partly contained in …\nReturns the prefix of the given <code>IpNetwork</code>\nReturns number of possible host addresses in this …\nReturns number of possible host addresses in this …\nReturns the number of possible host addresses in this …\nConstructs a new <code>Ipv4Network</code> from a network address and a …\nConstructs a new <code>Ipv6Network</code> from a network address and a …\nConstructs a new <code>IpNetwork</code> from a network address and a …")