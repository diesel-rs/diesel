searchState.loadedDescShard("toml", 0, "A serde-compatible TOML-parsing library\nRepresents a TOML array\nRepresents a TOML boolean\nRepresents a TOML datetime\nDeserialization TOML document\nRepresents a TOML float\nRepresents a TOML integer\nSerialization for TOML documents.\nA spanned value, indicating the range at which it is …\nRepresents a TOML string\nType representing a TOML table, payload of the <code>Value::Table</code>…\nRepresents a TOML table\nRepresentation of a TOML value.\nDeserializing TOML into Rust structures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a string into a type.\nReturns a mutable reference to the contained value.\nReturns a reference to the contained value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the spanned value and returns the contained value.\nA map of <code>String</code> to Value.\nCreate a spanned value encompassing the given byte range.\nSerializing Rust structures into TOML.\nByte range\nSerialize the given data structure as a String of TOML.\nSerialize the given data structure as a “pretty” …\nConstruct a <code>Table</code> from TOML syntax.\nConvert a <code>T</code> into <code>toml::Table</code>.\nInterpret a <code>toml::Table</code> as an instance of type <code>T</code>.\nDefinition of a TOML value\nDeserialization TOML document\nErrors that can occur when deserializing a type.\nDeserialization TOML value\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a string into a type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat went wrong\nDeserialization implementation for TOML.\nDeserialization implementation for TOML.\nThe start/end index into the original document where the …\nA view into a single entry in a map, which may either be …\nAn owning iterator over a toml::Map’s entries.\nAn iterator over a toml::Map’s entries.\nA mutable iterator over a toml::Map’s entries.\nAn iterator over a toml::Map’s keys.\nRepresents a TOML key/value type.\nAn occupied Entry.\nAn occupied Entry. It is part of the <code>Entry</code> enum.\nA vacant Entry.\nA vacant Entry. It is part of the <code>Entry</code> enum.\nAn iterator over a toml::Map’s values.\nClears the map, removing all values.\nReturns true if the map contains a value for the specified …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nGets a reference to the value in the entry.\nReturns a mutable reference to the value corresponding to …\nGets a mutable reference to the value in the entry.\nInserts a key-value pair into the map.\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to its value.\nReturns true if the map contains no elements.\nGets an iterator over the entries of the map.\nGets a mutable iterator over the entries of the map.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nGets an iterator over the keys of the map.\nReturns the number of elements in the map.\nMakes a new empty Map.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemoves a key from the map, returning the value at the key …\nTakes the value of the entry out of the map, and returns …\nRetains only the elements specified by the <code>keep</code> predicate.\nConvert a <code>T</code> into <code>toml::Table</code>.\nInterpret a <code>toml::Table</code> as an instance of type <code>T</code>.\nGets an iterator over the values of the map.\nMakes a new empty Map with the given initial capacity.\nErrors that can occur when serializing a type.\nSerialization for TOML documents.\nSerialization for TOML values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new serializer which will emit TOML into the …\nCreates a new serializer which will emit TOML into the …\nApply a default “pretty” policy to the document\nSerialize the given data structure as a String of TOML.\nSerialize the given data structure as a “pretty” …\nType representing a TOML array, payload of the <code>Value::Array</code>…\nRepresents a TOML array\nRepresents a TOML boolean\nOffset between local time and UTC\nA parsed TOML date value\nA parsed TOML datetime value\nRepresents a TOML datetime\nError returned from parsing a <code>Datetime</code> in the <code>FromStr</code> …\nRepresents a TOML float\nTypes that can be used to index a <code>toml::Value</code>\nRepresents a TOML integer\nA parsed TOML time offset\nRepresents a TOML string\nRepresents a TOML table\nA parsed TOML time value\nRepresentation of a TOML value.\nA suffix which, when applied to a time, denotes a UTC …\nExtracts the array value if it is an array.\nExtracts the array value if it is an array.\nExtracts the boolean value if it is a boolean.\nExtracts the datetime value if it is a datetime.\nExtracts the float value if it is a float.\nExtracts the integer value if it is an integer.\nExtracts the string of this value if it is a string.\nExtracts the table value if it is a table.\nExtracts the table value if it is a table.\nOptional date. Required for: <em>Offset Date-Time</em>, <em>Local </em>…\nDay: 1 to {28, 29, 30, 31} (based on month/year)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex into a TOML array or map. A string index can be used …\nMutably index into a TOML array or map. A string index can …\nHour: 0 to 23\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests whether this value is an array.\nTests whether this value is a boolean.\nTests whether this value is a datetime.\nTests whether this value is a float.\nTests whether this value is an integer.\nTests if this value is a string.\nTests whether this value is a table.\nMinute: 0 to 59\nMonth: 1 to 12\nNanosecond: 0 to 999_999_999\nOptional offset. Required for: <em>Offset Date-Time</em>.\nTests whether this and another value have the same type.\nSecond: 0 to {58, 59, 60} (based on leap second rules)\nOptional time. Required for: <em>Offset Date-Time</em>, <em>Local </em>…\nConvert a <code>T</code> into <code>toml::Value</code> which is an enum that can …\nInterpret a <code>toml::Value</code> as an instance of type <code>T</code>.\nReturns a human-readable representation of the type of …\nYear: four digits\nMinutes: -1_440..1_440")