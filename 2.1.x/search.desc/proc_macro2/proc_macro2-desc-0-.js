searchState.loadedDescShard("proc_macro2", 0, "github crates-io docs-rs\nE.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.\n<code>{ ... }</code>\n<code>[ ... ]</code>\nDescribes how a sequence of token trees is delimited.\nA delimited token stream.\nA token stream surrounded by bracket delimiters.\nA word of Rust code, which may be a keyword or legal …\nAn identifier.\nE.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.\nError returned from <code>TokenStream::from_str</code>.\nA literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …\nA literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …\n<code>∅ ... ∅</code>\n<code>( ... )</code>\nA <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.\nA single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).\nWhether a <code>Punct</code> is followed immediately by another <code>Punct</code> …\nA region of source code, along with macro expansion …\nAn abstract stream of tokens, or more concretely a …\nA single token or a delimited sequence of token trees …\nReturns the value of this punctuation character as <code>char</code>.\nByte character literal.\nByte string literal.\nC string literal.\nThe span of the invocation of the current procedural macro.\nCharacter literal.\nReturns an object that holds this group’s <code>span_open()</code> and\nReturns the punctuation used as the delimiter for this …\nItems which do not have a correspondence to any API in the …\nCreates a new suffixed floating-point literal.\nCreates a new unsuffixed floating-point literal.\nCreates a new suffixed floating-point literal.\nCreates a new unsuffixed floating-point literal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this <code>TokenStream</code> is empty.\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreate a new span encompassing <code>self</code> and <code>other</code>.\nCreates a new span with the same name resolution behavior …\nThe span located at the invocation of the procedural …\nReturns an empty <code>TokenStream</code> containing no token trees.\nCreates a new <code>Group</code> with the given delimiter and token …\nCreates a new <code>Punct</code> from the given character and spacing.\nCreates a new <code>Ident</code> with the given <code>string</code> as well as the …\nSame as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…\nCreates a new span with the same line/column information …\nConfigures the span for <em>only this token</em>.\nConfigures the span for this <code>Group</code>’s delimiters, but not …\nConfigure the span for this punctuation character.\nConfigures the span of this <code>Ident</code>, possibly changing its …\nConfigures the span associated for this literal.\nReturns the source text behind a span. This preserves the …\nReturns the spacing of this punctuation character, …\nReturns the span of this tree, delegating to the <code>span</code> …\nReturns the span for the delimiters of this token stream, …\nReturns the span for this punctuation character.\nReturns the span of this <code>Ident</code>.\nReturns the span encompassing this literal.\nReturns the span pointing to the closing delimiter of this …\nReturns the span pointing to the opening delimiter of this …\nReturns the <code>TokenStream</code> of tokens that are delimited in …\nString literal.\nReturns a <code>Span</code> that is a subset of <code>self.span()</code> containing …\nPublic implementation details for the <code>TokenStream</code> type, …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nConvert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nAn object that holds a <code>Group</code>’s <code>span_open()</code> and …\nReturns a span for the closing punctuation of the group …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a span covering the entire delimited group.\nReturns a span for the opening punctuation of the group …\nAn iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")