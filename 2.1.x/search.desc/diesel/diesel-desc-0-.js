searchState.loadedDescShard("diesel", 0, "Diesel\nThis derives implements [<code>diesel::Connection</code>] and related …\nDeclare a new alias for a table\nAllow two or more columns which are otherwise unrelated to …\nAllow two or more tables which are otherwise unrelated to …\nTraits related to relationships between multiple tables.\nTypes which represent various database backends\nTypes related to database connections\nStructs to represent the primitive equivalent of SQL types …\nTakes a query <code>QueryFragment</code> expression as an argument and …\nCreates a <code>DELETE</code> statement.\nTypes and traits related to deserializing values from the …\nIncludes various helper types and bare functions which are …\nAST types representing various typed SQL expressions.\nAdds various methods to construct new expressions. These …\nProvide helper types for concisely writing the return type …\nUseful for libraries adding support for new SQL types. …\nCreates an <code>INSERT</code> statement for the target table.\nCreates an <code>INSERT [OR] IGNORE</code> statement.\nAllow two tables to be referenced in a join query without …\nRepresentation of migrations\nProvides types and functions related to working with MySQL\nDeclare a 0 argument SQL function for use in your code. …\nIndicates that an expression allows all numeric operators. …\nImplements the Rust operator for a given type. If you …\nProvides types and functions related to working with …\nUseful for libraries adding support for new SQL types. …\nUseful for libraries adding support for new SQL types. …\nRe-exports important traits and types. Meant to be glob …\nContains traits responsible for the actual construction of …\nTraits that construct SELECT statements\nTypes related to describing schema, and interactions …\nConnection pooling via r2d2.\nCreates a <code>REPLACE</code> statement.\nErrors, type aliases, and functions related to working …\nContains the <code>Row</code> trait\nCreates a bare select statement, with no from clause. …\nTypes and traits related to serializing values for the …\nConstruct a full SQL query using raw SQL.\nTypes which represent a SQL data type.\nProvides types and functions related to working with SQLite\nSpecifies that a table exists, and what columns it has. …\nCreates an <code>UPDATE</code> statement.\nTypes and functions related to PG’s and Sqlite’s …\nImplement required traits for the associations API\nIndicates that a type belongs to <code>Parent</code>\nThe foreign key of this struct\nThe database column representing the foreign key of the …\nThe <code>grouped_by</code> function groups records by their parent.\nThis trait indicates that a struct is associated with a …\nThe type of this struct’s identifier.\nThis trait indicates that a struct represents a single row …\nImplements <code>Identifiable</code> for references of the current type\nThe table this type is associated with.\nReturns the foreign key for <code>self</code>\nReturns the foreign key column of this struct’s table\nSee the trait documentation.\nReturns the identifier for this record.\nReturns the table this type is associated with.\nConfigures how this backend handles <code>IN()</code> and <code>NOT IN()</code> …\nA database backend\nConfigures how this backend handles Batch insert statements\nThe concrete <code>BindCollector</code> implementation for this backend.\nConfigures how this backend handles the Concat clauses in …\nConfigures how this backend handles the <code>DEFAULT VALUES</code> …\nThis is a marker trait which indicates that diesel may …\nConfigures how this backend handles empty <code>FROM</code> clauses for …\nConfigures how this backend handles <code>EXISTS()</code> expressions.\nConfigures how this backend handles the bare <code>DEFAULT</code> …\nConfigures how this backend supports <code>ON CONFLICT</code> clauses\nThe concrete <code>QueryBuilder</code> implementation for this backend.\nThe actual type given to <code>FromSql</code>, with lifetimes applied. …\nConfigures how this backend supports <code>RETURNING</code> clauses\nConfigures how this backend structures <code>SELECT</code> queries\nThis trait provides various options to configure the …\nThis trait just indicates that none implements <code>SqlDialect</code> …\nThis module contains all options provided by diesel to …\nThis module contains all reusable options to configure …\nThis module contains all reusable options to configure …\nThis module contains all reusable options to configure …\nThis module contains all reusable options to configure …\nThis module contains all reusable options to configure …\nThis module contains all reusable options to configure …\nThis module contains all reusable options to configure …\nThis module contains all diesel provided reusable options …\nThis module contains all reusable options to configure …\nThis module contains all reusable options to configure …\nIndicates that this backend requires a single bind per …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates that this backend does not support batch insert …\nIndicates that this backend supports postgres style batch …\nA marker trait indicating if batch insert statements are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates that this backend uses the <code>||</code> operator to select …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates that a backend does not support <code>DEFAULT</code> value …\nIndicates that a backend support <code>DEFAULT</code> value expressions …\nA marker trait indicating if a <code>DEFAULT</code> like expression is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates that this backend uses the <code>DEFAULT VALUES</code> syntax …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates that this backend treats <code>EXIST()</code> as function …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates that this backend skips the <code>FROM</code> clause in <code>SELECT</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis marker type indicates that <code>ON CONFLICT</code> clauses are …\nA marker trait indicating whether the on conflict clause …\nA marker trait indicating if a <code>ON CONFLICT</code> clause is …\nA marker trait indicating if a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates that a backend does not support <code>RETURNING</code> clauses\nIndicates that a backend provides support for <code>RETURNING</code> …\nA marker trait indicating if a <code>RETURNING</code> clause is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates that this backend uses the default ANSI select …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn implementation of <code>TransactionManager</code> which can be used …\nThe backend this type connects to\nA variant of the <code>Connection</code> trait that is usable with …\nA connection to a database\nThis trait restricts who can implement <code>Connection</code>\nThe cursor type returned by <code>LoadConnection::load</code>\nDecreases the depth of the transaction (corresponds to …\nThe default loading mode provided by a <code>Connection</code>.\nError status, probably following a broken connection. The …\nVarious status fields to track the status of a transaction …\nIncrease the depth of the transaction (corresponds to <code>BEGIN</code>…\nThe specific part of a <code>Connection</code> which actually loads …\nThis trait provides helper methods to convert a database …\nThe row type used as <code>Iterator::Item</code> for the iterator …\nPerform simple operations on a backend.\nRepresents a change to apply to the depth of a transaction\nManages the internal transaction state for a connection.\nThe transaction manager implementation used by this …\nStatus of the transaction manager\nData stored as part of the connection implementation to …\nValid status, the manager can run operations\nValid transaction status for the manager. Can return the …\nMaps the current connection to <code>std::any::Any</code>\nExecute multiple SQL statements within the same string.\nCreates a transaction that will never be committed. This …\nBegin a new transaction or savepoint\nBegin a transaction with custom SQL\nUpdate the transaction depth by adding the value of the …\nCommit the inner-most transaction or savepoint\nIf the transaction fails to commit due to a …\nDowncast the current connection to a specific mutable …\nDowncast the current connection to a specific connection …\nEstablishes a new connection to the database\nExecute a single SQL statements given by a query and return\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the lookup type from any\nInner status, or <code>None</code> if no transaction is runnin\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the current connection is a specific connection …\nThis methods checks if the connection manager is …\nThis methods checks if the connection manager is …\nExecutes a given query and returns any requested values\nIf that is registered, savepoints rollbacks will still be …\nRollback the inner-most transaction or savepoint\nSets the transaction manager status to InError\nIf in transaction and transaction manager is not broken, …\nThis function allows to flag a transaction manager in such …\nHelper types for prepared statement caching\nExecutes the given function inside a transaction, but does …\nIs this transaction manager status marked as …\nConvert the lookup type to any\nExecutes the given function inside of a database …\nExecutes the given function inside of a database …\nExecutes the given function inside of a database …\nReturns the transaction depth if the transaction manager’…\nReturn the current transaction depth\nThe current depth of nested transactions\nFetch the current transaction status as mutable\nGet access to the current transaction state of this …\nExpose access to the inner transaction state\nContains a reference cached prepared statement\nContains a not cached prepared statement\nWraps a possibly cached prepared statement\nThe statement won’t be cached\nA helper type that indicates if a certain query is cached …\nRepresents a dynamically constructed query\nA prepared statement cache\nThe lookup key used by <code>StatementCache</code> internally\nRepresents a at compile time known query\nThe statement will be cached\nPrepare a query as prepared statement\nCreate a new statement cache key for the given query source\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the current length of the statement cache\nCreate a new prepared statement cache\nGet the sql for a given query source based\ncontains the types of any bind parameter passed to the …\ncontains the sql query string\nContains the error value\nThe number of fields that this type will consume.\nDeserialize a single field of a given SQL type.\nDeserialize a database row into a rust data structure\nImplements <code>Queryable</code> for primitive types\nA helper trait to deserialize a statically sized row into …\nContains the success value\nTrait indicating that a record can be queried from the …\nImplements <code>Queryable</code> to load the result of statically …\nDeserializes the result of a query constructed with …\nImplements <code>QueryableByName</code> for untyped sql queries, such …\nA specialized result type representing the result of …\nThe Rust type you’d like to map from.\nA marker trait indicating that the corresponding type …\nConstruct an instance of this type\nConstruct an instance of <code>Self</code> from the database row\nSee the trait documentation.\nSee the trait documentation\nA specialized variant of <code>from_sql</code> for handling null values.\nSee the trait documentation.\nMaps <code>F</code> to <code>Alias&lt;S&gt;</code>\nThe return type of <code>lhs.and(rhs)</code>\nThe return type of <code>lsh.and(rhs)</code> for network types\nThe return type of <code>lhs.contains(rhs)</code> for array expressions\nThe return type of <code>lhs.index(rhs)</code>\nThe type of <code>Item</code> when converted to an expression with the …\nThe type of <code>Item</code> when converted to an expression of <code>Type</code>\nRepresents the return type of <code>.as_select()</code>\nThe return type of <code>expr.asc()</code>\nThe return type of <code>expr.assume_not_null()</code>\nThe return type of <code>expr.at_time_zone(tz)</code>\nRepresents the return type of <code>diesel::select(selection)</code>\nThe return type of <code>lhs.between(lower, upper)</code>\nThe return type of <code>lhs.concat(rhs)</code>\nThe return type of <code>lhs.remove_by_path(rhs)</code>\nThe return type of <code>lsh.concat(rhs)</code>\nThe return type of <code>lsh.contains(rhs)</code> for jsonb types\nThe return type of <code>lhs.contains(rhs)</code> for network types\nThe return type of <code>lhs.contains_or_eq(rhs)</code>\nThe return type of <code>expr.desc()</code>\nThe return type of <code>lsh.diff(rhs)</code>\nRepresents the return type of <code>.distinct()</code>\nRepresents the return type of <code>.distinct_on(expr)</code>\nA marker type signaling that the given <code>ON CONFLICT</code> clause …\nThe return type of <code>lhs.eq(rhs)</code>\nThe return type of <code>lhs.eq_any(rhs)</code>\nThe return type of <code>lhs.escape(&#39;x&#39;)</code>\nRepresents the return type of <code>.except(rhs)</code>\nRepresents the return type of <code>.except_all(rhs)</code>\nRepresents the return type of <code>.filter(predicate)</code>\nRepresents the return type of <code>.find(pk)</code>\nRepresents the return type of <code>.filter(lhs.eq(rhs))</code>\nRepresents the return type of <code>.for_key_share()</code>\nRepresents the return type of <code>.for_no_key_update()</code>\nRepresents the return type of <code>.for_share()</code>\nRepresents the return type of <code>.for_update()</code>\nRepresents the return type of <code>.group_by(expr)</code>\nThe return type of <code>lhs.gt(rhs)</code>\nThe return type of <code>lhs.ge(rhs)</code>\nThe return type of <code>lsh.has_all_keys(rhs)</code>\nThe return type of <code>lsh.has_any_key(rhs)</code>\nThe return type of <code>lsh.has_key(rhs)</code>\nRepresents the return type of <code>.having(predicate)</code>\nThe return type of <code>lhs.ilike(rhs)</code>\nRepresents the return type of <code>.inner_join(rhs)</code>\nRepresents the return type of <code>.inner_join(rhs.on(on))</code>\nA query source representing the inner join between two …\nRepresents the return type of <code>.intersect(rhs)</code>\nRepresents the return type of <code>.intersect_all(rhs)</code>\nRepresents the return type of <code>.into_boxed::&lt;&#39;a, DB&gt;()</code>\nThe return type of <code>lhs.is(rhs)</code>.\nThe return type of <code>lhs.is_contained_by(rhs)</code>\nThe return type of <code>lsh.is_contained_by(rhs)</code> for jsonb types\nThe return type of [<code>lhs.is_contained_by(rhs)</code>]…\nThe return type of <code>lhs.is_contained_by_or_eq(rhs)</code>\nThe return type of <code>lhs.is_distinct_from(rhs)</code>\nThe return type of <code>lhs.is_not(rhs)</code>.\nThe return type of <code>lhs.is_not_distinct_from(rhs)</code>\nThe return type of <code>expr.is_not_null()</code>\nThe return type of <code>expr.is_null()</code>\nRepresents the return type of <code>.left_join(rhs)</code>\nRepresents the return type of <code>.left_join(rhs.on(on))</code>\nA query source representing the left outer join between …\nThe return type of <code>lhs.like(rhs)</code>\nThe return type of <code>lhs.remove_by_path(rhs)</code>\nRepresents the return type of <code>.limit()</code>\nThe return type of <code>lhs.lt(rhs)</code>\nThe return type of <code>lhs.le(rhs)</code>\nThe return type of <code>lhs.ne_all(rhs)</code>\nRepresents the return type of <code>.no_wait()</code>\nThe return type of <code>lhs.not_between(lower, upper)</code>\nThe return type of <code>lhs.ne(rhs)</code>\nThe return type of <code>lhs.not_ilike(rhs)</code>\nThe return type of <code>lhs.not_like(rhs)</code>\nThe return type of <code>lhs.remove_by_path(rhs)</code>\nThe return type of <code>lhs.not_similar_to(rhs)</code>\nThe return type of <code>expr.nullable()</code>\nRepresents the return type of <code>.nullable()</code>\nThe return type of <code>expr.nulls_first()</code>\nThe return type of <code>expr.nulls_last()</code>\nRepresents the return type of <code>.offset()</code>\nRepresents the return type of <code>rhs.on(on)</code>\nThe return type of <code>lhs.or(rhs)</code>\nRepresents the return type of <code>.or_filter(predicate)</code>\nThe return type of <code>lsh.or(rhs)</code> for network types\nRepresents the return type of <code>.order(ordering)</code>\nThe return type of <code>lhs.overlaps_with(rhs)</code>\nThe return type of <code>lhs.overlaps_with(rhs)</code> for network types\nThe return type of <code>lhs.contains(rhs)</code> for range expressions\nThe return type of <code>lhs.remove_by_path(rhs)</code>\nThe return type of <code>lhs.remove(rhs)</code>\nThe return type of <code>lhs.retrieve_as_object(rhs)</code>\nThe return type of <code>lhs.retrieve_as_text(rhs)</code>\nThe return type of <code>lhs.retrieve_by_path_as_object(rhs)</code>\nThe return type of <code>lhs.retrieve_by_path_as_text(rhs)</code>\nRepresents the return type of <code>.select(selection)</code>\nThe return type of <code>lhs.similar_to(rhs)</code>\nRepresents the return type of <code>.single_value()</code>\nRepresents the return type of <code>.skip_locked()</code>\nThe SQL type of an expression\nRepresents the return type of <code>.then_order_by(ordering)</code>\nRepresents the return type of <code>.union(rhs)</code>\nRepresents the return type of <code>.union_all(rhs)</code>\nRepresents the return type of <code>update(lhs).set(rhs)</code>\nRepresents a SQL <code>AVG</code> function. This function can only take …\nThe return type of <code>avg(expr)</code>\nCreates a SQL <code>COUNT</code> expression\nThe return type of <code>count(expr)</code>\nCreates a SQL <code>COUNT(DISTINCT ...)</code> expression\nThe return type of <code>count_distinct()</code>\nCreates a SQL <code>COUNT(*)</code> expression\nThe return type of <code>count_star()</code>\nRepresents the SQL <code>DATE</code> function. The argument should be a …\nThe return type of <code>date(expr)</code>\nCreates a <code>DELETE</code> statement.\nThe distinct clause of the query\nCreates a SQL <code>EXISTS</code> expression.\nThe return type of <code>exists(expr)</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCreates an <code>INSERT</code> statement for the target table.\nCreates an <code>INSERT [OR] IGNORE</code> statement.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe locking clause of the query\nRepresents a SQL <code>MAX</code> function. This function can only take …\nThe return type of <code>max(expr)</code>\nRepresents a SQL <code>MIN</code> function. This function can only take …\nThe return type of <code>min(expr)</code>\nCreates a SQL <code>NOT</code> expression\nThe return type of <code>not(expr)</code>\nRepresents the SQL <code>CURRENT_TIMESTAMP</code> constant. This is …\nThe order clause of the query\nCreates a <code>REPLACE</code> statement.\nCreates a bare select statement, with no from clause. …\nThe select clause of the query\nUse literal SQL in the query builder.\nConstruct a full SQL query using raw SQL.\nThe inner subselect\nRepresents a SQL <code>SUM</code> function. This function can only take …\nThe return type of <code>sum(expr)</code>\nRepresents the SQL <code>CURRENT_DATE</code> constant.\nCreates an <code>UPDATE</code> statement.\nThe where clause of the query\nIndicates that all elements of an expression are valid …\nConverts a type to its representation for use in Diesel’…\nImplements all required variants of <code>AsExpression</code>\nConverts a tuple of values into a tuple of Diesel …\nHelper trait used when boxing expressions.\nThis type represents a string concat operator\nRepresents a typed fragment of SQL.\nThe expression being returned\nThe final output expression\nConverts a type to its representation for use in Diesel’…\nIs this expression aggregate?\nCan two <code>IsAggregate</code> types appear in the same expression?\nTrait alias to represent an expression that isn’t …\nWhat is the resulting <code>IsAggregate</code> type?\nA helper to translate type level sql type information into …\nThe expression you’d like to select.\nTrait indicating that a record can be selected and queried …\nImplements <code>Selectable</code>\nIndicates that an expression can be selected from a source.\nThis helper trait provides several methods for …\nReturned by the <code>sql()</code> function.\nThe type that this expression represents in SQL\nMarker trait for possible types of <code>Expression::SqlType</code>\nReturned by the <code>SqlLiteral::bind()</code> method when binding a …\nIs this expression valid for a given group by clause?\nImplements <code>ValidGrouping</code>\nThis module contains the query dsl node definitions for …\nPerform the conversion\nPerform the conversion\nAn alias for <code>as_select</code> that can be used with returning …\nConstruct a select clause based on a <code>Selectable</code> …\nConvert <code>&amp;self</code> to an expression for Diesel’s query …\nBind a value for use with this SQL query.\nConstruct an instance of the expression\nThis module contains the query dsl node definition for …\nPossible types for []<code>Expression::SqlType</code>]\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper macros to define custom sql functions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>self</code> to an expression for Diesel’s query builder.\nPossible values for <code>ValidGrouping::IsAggregate</code>\nThe left side expression of the operator\nThe right side expression of the operator\nThe exact return value of this function is considered to …\nUse literal SQL in the query builder\nUse literal SQL in the query builder.\nThis trait describes how a type is transformed to the …\nQuery dsl node that represents a <code>left IN (values)</code> …\nType of the expression returned by …\nQuery dsl node for an <code>IN (values)</code> clause containing a …\nA helper trait to check if the values clause of an <code>In</code> or …\nQuery dsl node that represents a <code>left NOT IN (values)</code> …\nConstruct the diesel query dsl representation of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if self represents an empty collection …\nThe expression on the left side of the <code>IN</code> keyword\nThe expression on the left side of the <code>NOT IN</code> keyword\nThe values clause of the <code>IN</code> expression\nThe values clause of the <code>NOT IN</code> expression\nThe values contained in the <code>IN (values)</code> clause\nThe query dsl node that represents a SQL <code>EXISTS (subselect)</code>…\nCreates a SQL <code>EXISTS</code> expression.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe inner subselect\nQuery nodes witch cannot be part of a select clause.\nQuery nodes with this expression type do not have a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeclare a sql function for use in your code.\nThis expression is never aggregate, and can appear with …\nNo, this expression is not aggregate with the given group …\nYes, this expression is aggregate for the given group by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethods present on boolean expressions\nAdds the <code>escape</code> method to <code>LIKE</code> and <code>NOT LIKE</code>. This is used …\nMethods present on all expressions, except tuples\nMethods present on all expressions\nPostgreSQL specific methods present on JSON and JSONB …\nPostgreSQL specific methods present on array expressions.\nPostgreSQL specific methods present on Binary expressions.\nPostgreSQL specific methods which are present on all …\nPostgreSQL specific methods present on JSONB expressions.\nPostgreSQL specific methods present between CIDR/INET …\nPostgreSQL specific methods present on range expressions.\nPostgreSQL expression methods related to sorting.\nPostgreSQL specific methods present on text expressions.\nPostgreSQL specific methods present on timestamp …\nSqlite specific methods which are present on all …\nMethods present on text expressions\nCreates a SQL <code>AND</code> expression\nCreates a SQL <code>AND</code> expression\nCreates a SQL <code>AND</code> expression\nCreates a PostgreSQL <code>&amp;</code> expression.\nCreates a PostgreSQL <code>&amp;</code> expression.\nCreates a PostgreSQL <code>&amp;</code> expression.\nCreates a SQL <code>ASC</code> expression, representing this expression …\nCreates a SQL <code>ASC</code> expression, representing this expression …\nCreates a SQL <code>ASC</code> expression, representing this expression …\nConverts this potentially nullable expression into one …\nConverts this potentially nullable expression into one …\nConverts this potentially nullable expression into one …\nCreates a PostgreSQL “AT TIME ZONE” expression.\nCreates a PostgreSQL “AT TIME ZONE” expression.\nCreates a PostgreSQL “AT TIME ZONE” expression.\nCreates a SQL <code>BETWEEN</code> expression using the given lower and …\nCreates a SQL <code>BETWEEN</code> expression using the given lower and …\nCreates a SQL <code>BETWEEN</code> expression using the given lower and …\nConcatenates two strings using the <code>||</code> operator.\nConcatenates two strings using the <code>||</code> operator.\nConcatenates two strings using the <code>||</code> operator.\nCreates a PostgreSQL <code>||</code> expression.\nCreates a PostgreSQL <code>||</code> expression.\nCreates a PostgreSQL <code>||</code> expression.\nConcatenates two PostgreSQL byte arrays using the <code>||</code> …\nConcatenates two PostgreSQL byte arrays using the <code>||</code> …\nConcatenates two PostgreSQL byte arrays using the <code>||</code> …\nCreates a PostgreSQL <code>@&gt;</code> expression.\nCreates a PostgreSQL <code>@&gt;</code> expression.\nCreates a PostgreSQL <code>@&gt;</code> expression.\nCreates a PostgreSQL <code>@&gt;</code> expression.\nCreates a PostgreSQL <code>@&gt;</code> expression.\nCreates a PostgreSQL <code>@&gt;</code> expression.\nCreates a PostgreSQL <code>&gt;&gt;</code> expression.\nCreates a PostgreSQL <code>&gt;&gt;</code> expression.\nCreates a PostgreSQL <code>&gt;&gt;</code> expression.\nCreates a PostgreSQL <code>@&gt;</code> expression.\nCreates a PostgreSQL <code>@&gt;</code> expression.\nCreates a PostgreSQL <code>@&gt;</code> expression.\nCreates a PostgreSQL <code>&gt;&gt;=</code> expression.\nCreates a PostgreSQL <code>&gt;&gt;=</code> expression.\nCreates a PostgreSQL <code>&gt;&gt;=</code> expression.\nCreates a SQL <code>DESC</code> expression, representing this …\nCreates a SQL <code>DESC</code> expression, representing this …\nCreates a SQL <code>DESC</code> expression, representing this …\nCreates a PostgreSQL <code>-</code> expression.\nCreates a PostgreSQL <code>-</code> expression.\nCreates a PostgreSQL <code>-</code> expression.\nCreates a SQL <code>=</code> expression.\nCreates a SQL <code>=</code> expression.\nCreates a SQL <code>=</code> expression.\nCreates a SQL <code>IN</code> statement.\nCreates a SQL <code>IN</code> statement.\nCreates a SQL <code>IN</code> statement.\nSee the trait documentation.\nCreates a SQL <code>&gt;=</code> expression.\nCreates a SQL <code>&gt;=</code> expression.\nCreates a SQL <code>&gt;=</code> expression.\nCreates a SQL <code>&gt;</code> expression.\nCreates a SQL <code>&gt;</code> expression.\nCreates a SQL <code>&gt;</code> expression.\nCreates a PostgreSQL <code>?&amp;</code> expression.\nCreates a PostgreSQL <code>?&amp;</code> expression.\nCreates a PostgreSQL <code>?&amp;</code> expression.\nCreates a PostgreSQL <code>?|</code> expression.\nCreates a PostgreSQL <code>?|</code> expression.\nCreates a PostgreSQL <code>?|</code> expression.\nCreates a PostgreSQL <code>?</code> expression.\nCreates a PostgreSQL <code>?</code> expression.\nCreates a PostgreSQL <code>?</code> expression.\nCreates a  PostgreSQL <code>ILIKE</code> expression\nCreates a  PostgreSQL <code>ILIKE</code> expression\nCreates a  PostgreSQL <code>ILIKE</code> expression\nIndexes a PostgreSQL array.\nIndexes a PostgreSQL array.\nIndexes a PostgreSQL array.\nCreates a Sqlite <code>IS</code> expression.\nCreates a Sqlite <code>IS</code> expression.\nCreates a Sqlite <code>IS</code> expression.\nCreates a PostgreSQL <code>&lt;@</code> expression.\nCreates a PostgreSQL <code>&lt;@</code> expression.\nCreates a PostgreSQL <code>&lt;@</code> expression.\nCreates a PostgreSQL <code>&lt;&lt;</code> expression.\nCreates a PostgreSQL <code>&lt;&lt;</code> expression.\nCreates a PostgreSQL <code>&lt;&lt;</code> expression.\nCreates a PostgreSQL <code>&lt;@</code> expression.\nCreates a PostgreSQL <code>&lt;@</code> expression.\nCreates a PostgreSQL <code>&lt;@</code> expression.\nCreates a PostgreSQL <code>&gt;&gt;=</code> expression.\nCreates a PostgreSQL <code>&gt;&gt;=</code> expression.\nCreates a PostgreSQL <code>&gt;&gt;=</code> expression.\nCreates a PostgreSQL <code>IS DISTINCT FROM</code> expression.\nCreates a PostgreSQL <code>IS DISTINCT FROM</code> expression.\nCreates a PostgreSQL <code>IS DISTINCT FROM</code> expression.\nCreates a Sqlite <code>IS NOT</code> expression.\nCreates a Sqlite <code>IS NOT</code> expression.\nCreates a Sqlite <code>IS NOT</code> expression.\nCreates a PostgreSQL <code>IS NOT DISTINCT FROM</code> expression.\nCreates a PostgreSQL <code>IS NOT DISTINCT FROM</code> expression.\nCreates a PostgreSQL <code>IS NOT DISTINCT FROM</code> expression.\nCreates a SQL <code>IS NOT NULL</code> expression.\nCreates a SQL <code>IS NOT NULL</code> expression.\nCreates a SQL <code>IS NOT NULL</code> expression.\nCreates a SQL <code>IS NULL</code> expression.\nCreates a SQL <code>IS NULL</code> expression.\nCreates a SQL <code>IS NULL</code> expression.\nCreates a SQL <code>&lt;=</code> expression.\nCreates a SQL <code>&lt;=</code> expression.\nCreates a SQL <code>&lt;=</code> expression.\nReturns a SQL <code>LIKE</code> expression\nReturns a SQL <code>LIKE</code> expression\nReturns a SQL <code>LIKE</code> expression\nCreates a PostgreSQL binary <code>LIKE</code> expression.\nCreates a PostgreSQL binary <code>LIKE</code> expression.\nCreates a PostgreSQL binary <code>LIKE</code> expression.\nCreates a SQL <code>&lt;</code> expression.\nCreates a SQL <code>&lt;</code> expression.\nCreates a SQL <code>&lt;</code> expression.\nCreates a SQL <code>!=</code> expression.\nCreates a SQL <code>!=</code> expression.\nCreates a SQL <code>!=</code> expression.\nCreates a SQL <code>NOT IN</code> statement.\nCreates a SQL <code>NOT IN</code> statement.\nCreates a SQL <code>NOT IN</code> statement.\nCreates a SQL <code>NOT BETWEEN</code> expression using the given lower …\nCreates a SQL <code>NOT BETWEEN</code> expression using the given lower …\nCreates a SQL <code>NOT BETWEEN</code> expression using the given lower …\nCreates a PostgreSQL <code>NOT ILIKE</code> expression\nCreates a PostgreSQL <code>NOT ILIKE</code> expression\nCreates a PostgreSQL <code>NOT ILIKE</code> expression\nReturns a SQL <code>NOT LIKE</code> expression\nReturns a SQL <code>NOT LIKE</code> expression\nReturns a SQL <code>NOT LIKE</code> expression\nCreates a PostgreSQL binary <code>LIKE</code> expression.\nCreates a PostgreSQL binary <code>LIKE</code> expression.\nCreates a PostgreSQL binary <code>LIKE</code> expression.\nCreates a PostgreSQL <code>NOT SIMILAR TO</code> expression\nCreates a PostgreSQL <code>NOT SIMILAR TO</code> expression\nCreates a PostgreSQL <code>NOT SIMILAR TO</code> expression\nConverts this potentially non-null expression into one …\nConverts this potentially non-null expression into one …\nConverts this potentially non-null expression into one …\nSpecify that nulls should come before other values in this …\nSpecify that nulls should come before other values in this …\nSpecify that nulls should come before other values in this …\nSpecify that nulls should come after other values in this …\nSpecify that nulls should come after other values in this …\nSpecify that nulls should come after other values in this …\nCreates a SQL <code>OR</code> expression\nCreates a SQL <code>OR</code> expression\nCreates a SQL <code>OR</code> expression\nCreates a PostgreSQL <code>|</code> expression.\nCreates a PostgreSQL <code>|</code> expression.\nCreates a PostgreSQL <code>|</code> expression.\nCreates a PostgreSQL <code>&amp;&amp;</code> expression.\nCreates a PostgreSQL <code>&amp;&amp;</code> expression.\nCreates a PostgreSQL <code>&amp;&amp;</code> expression.\nCreates a PostgreSQL <code>&amp;&amp;</code> expression.\nCreates a PostgreSQL <code>&amp;&amp;</code> expression.\nCreates a PostgreSQL <code>&amp;&amp;</code> expression.\nCreates a PostgreSQL <code>-</code> expression.\nCreates a PostgreSQL <code>-</code> expression.\nCreates a PostgreSQL <code>-</code> expression.\nCreates a PostgreSQL <code>#-</code> expression.\nCreates a PostgreSQL <code>#-</code> expression.\nCreates a PostgreSQL <code>#-</code> expression.\nCreates a PostgreSQL <code>-&gt;</code> expression.\nCreates a PostgreSQL <code>-&gt;</code> expression.\nCreates a PostgreSQL <code>-&gt;</code> expression.\nCreates a PostgreSQL <code>-&gt;&gt;</code> expression.\nCreates a PostgreSQL <code>-&gt;&gt;</code> expression.\nCreates a PostgreSQL <code>-&gt;&gt;</code> expression.\nCreates a PostgreSQL <code>#&gt;</code> expression.\nCreates a PostgreSQL <code>#&gt;</code> expression.\nCreates a PostgreSQL <code>#&gt;</code> expression.\nCreates a PostgreSQL <code>#&gt;&gt;</code> expression.\nCreates a PostgreSQL <code>#&gt;&gt;</code> expression.\nCreates a PostgreSQL <code>#&gt;&gt;</code> expression.\nCreates a PostgreSQL <code>SIMILAR TO</code> expression\nCreates a PostgreSQL <code>SIMILAR TO</code> expression\nCreates a PostgreSQL <code>SIMILAR TO</code> expression\nMaps <code>F</code> to <code>Alias&lt;S&gt;</code>\nThe return type of <code>lhs.and(rhs)</code>\nThe return type of <code>lsh.and(rhs)</code> for network types\nThe return type of <code>lhs.contains(rhs)</code> for array expressions\nThe return type of <code>lhs.index(rhs)</code>\nThe type of <code>Item</code> when converted to an expression with the …\nThe type of <code>Item</code> when converted to an expression of <code>Type</code>\nRepresents the return type of <code>.as_select()</code>\nThe return type of <code>expr.asc()</code>\nThe return type of <code>expr.assume_not_null()</code>\nThe return type of <code>expr.at_time_zone(tz)</code>\nRepresents the return type of <code>diesel::select(selection)</code>\nThe return type of <code>lhs.between(lower, upper)</code>\nThe return type of <code>lhs.concat(rhs)</code>\nThe return type of <code>lhs.remove_by_path(rhs)</code>\nThe return type of <code>lsh.concat(rhs)</code>\nThe return type of <code>lsh.contains(rhs)</code> for jsonb types\nThe return type of <code>lhs.contains(rhs)</code> for network types\nThe return type of <code>lhs.contains_or_eq(rhs)</code>\nThe return type of <code>expr.desc()</code>\nThe return type of <code>lsh.diff(rhs)</code>\nRepresents the return type of <code>.distinct()</code>\nRepresents the return type of <code>.distinct_on(expr)</code>\nThe return type of <code>lhs.eq(rhs)</code>\nThe return type of <code>lhs.eq_any(rhs)</code>\nThe return type of <code>lhs.escape(&#39;x&#39;)</code>\nRepresents the return type of <code>.except(rhs)</code>\nRepresents the return type of <code>.except_all(rhs)</code>\nRepresents the return type of <code>.filter(predicate)</code>\nRepresents the return type of <code>.find(pk)</code>\nRepresents the return type of <code>.filter(lhs.eq(rhs))</code>\nRepresents the return type of <code>.for_key_share()</code>\nRepresents the return type of <code>.for_no_key_update()</code>\nRepresents the return type of <code>.for_share()</code>\nRepresents the return type of <code>.for_update()</code>\nRepresents the return type of <code>.group_by(expr)</code>\nThe return type of <code>lhs.gt(rhs)</code>\nThe return type of <code>lhs.ge(rhs)</code>\nThe return type of <code>lsh.has_all_keys(rhs)</code>\nThe return type of <code>lsh.has_any_key(rhs)</code>\nThe return type of <code>lsh.has_key(rhs)</code>\nRepresents the return type of <code>.having(predicate)</code>\nThe return type of <code>lhs.ilike(rhs)</code>\nRepresents the return type of <code>.inner_join(rhs)</code>\nRepresents the return type of <code>.inner_join(rhs.on(on))</code>\nA query source representing the inner join between two …\nRepresents the return type of <code>.intersect(rhs)</code>\nRepresents the return type of <code>.intersect_all(rhs)</code>\nRepresents the return type of <code>.into_boxed::&lt;&#39;a, DB&gt;()</code>\nThe return type of <code>lhs.is(rhs)</code>.\nThe return type of <code>lhs.is_contained_by(rhs)</code>\nThe return type of <code>lsh.is_contained_by(rhs)</code> for jsonb types\nThe return type of [<code>lhs.is_contained_by(rhs)</code>]…\nThe return type of <code>lhs.is_contained_by_or_eq(rhs)</code>\nThe return type of <code>lhs.is_distinct_from(rhs)</code>\nThe return type of <code>lhs.is_not(rhs)</code>.\nThe return type of <code>lhs.is_not_distinct_from(rhs)</code>\nThe return type of <code>expr.is_not_null()</code>\nThe return type of <code>expr.is_null()</code>\nRepresents the return type of <code>.left_join(rhs)</code>\nRepresents the return type of <code>.left_join(rhs.on(on))</code>\nA query source representing the left outer join between …\nThe return type of <code>lhs.like(rhs)</code>\nThe return type of <code>lhs.remove_by_path(rhs)</code>\nRepresents the return type of <code>.limit()</code>\nThe return type of <code>lhs.lt(rhs)</code>\nThe return type of <code>lhs.le(rhs)</code>\nThe return type of <code>lhs.ne_all(rhs)</code>\nRepresents the return type of <code>.no_wait()</code>\nThe return type of <code>lhs.not_between(lower, upper)</code>\nThe return type of <code>lhs.ne(rhs)</code>\nThe return type of <code>lhs.not_ilike(rhs)</code>\nThe return type of <code>lhs.not_like(rhs)</code>\nThe return type of <code>lhs.remove_by_path(rhs)</code>\nThe return type of <code>lhs.not_similar_to(rhs)</code>\nThe return type of <code>expr.nullable()</code>\nRepresents the return type of <code>.nullable()</code>\nThe return type of <code>expr.nulls_first()</code>\nThe return type of <code>expr.nulls_last()</code>\nRepresents the return type of <code>.offset()</code>\nRepresents the return type of <code>rhs.on(on)</code>\nThe return type of <code>lhs.or(rhs)</code>\nRepresents the return type of <code>.or_filter(predicate)</code>\nThe return type of <code>lsh.or(rhs)</code> for network types\nRepresents the return type of <code>.order(ordering)</code>\nThe return type of <code>lhs.overlaps_with(rhs)</code>\nThe return type of <code>lhs.overlaps_with(rhs)</code> for network types\nThe return type of <code>lhs.contains(rhs)</code> for range expressions\nThe return type of <code>lhs.remove_by_path(rhs)</code>\nThe return type of <code>lhs.remove(rhs)</code>\nThe return type of <code>lhs.retrieve_as_object(rhs)</code>\nThe return type of <code>lhs.retrieve_as_text(rhs)</code>\nThe return type of <code>lhs.retrieve_by_path_as_object(rhs)</code>\nThe return type of <code>lhs.retrieve_by_path_as_text(rhs)</code>\nRepresents the return type of <code>.select(selection)</code>\nThe return type of <code>lhs.similar_to(rhs)</code>\nRepresents the return type of <code>.single_value()</code>\nRepresents the return type of <code>.skip_locked()</code>\nThe SQL type of an expression\nRepresents the return type of <code>.then_order_by(ordering)</code>\nRepresents the return type of <code>.union(rhs)</code>\nRepresents the return type of <code>.union_all(rhs)</code>\nRepresents the return type of <code>update(lhs).set(rhs)</code>\nThe return type of <code>avg(expr)</code>\nThe distinct clause of the query\nThe return type of <code>exists(expr)</code>\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nThe combined limit/offset clause of the query\nThe locking clause of the query\nThe return type of <code>max(expr)</code>\nThe return type of <code>min(expr)</code>\nThe return type of <code>not(expr)</code>\nThe order clause of the query\nThe select clause of the query\nThe inner subselect\nThe return type of <code>sum(expr)</code>\nThe where clause of the query\nCreate table statement for the <code>__diesel_schema_migrations</code> …\nContains the error value\nRepresents a migration that interacts with diesel\nA trait indicating that a connection could be used to …\nThis trait is designed to customize the behaviour of the …\nRepresents the name of a migration\nA migration source is an entity that can be used to …\nA migration version identifier\nContains the success value\nA specialized result type representing the result of a …\nConvert the current migration version into an owned …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a the attached metadata for this migration\nGet a list of migrations associated with this migration …\nGet the name of the current migration\nRevert this migration\nApply this migration\nWhether the current migration is executed in a transaction …\nSetup the following table:\nThe version corresponding to the current migration name\nCorresponds to <code>MYSQL_TYPE_LONGLONG</code>\nA value containing a set of bit’s\nA datatype containing binary large objects\nA datatype to store a date value\nA datatype containing timestamp values ranging from ‘…\nCorresponds to <code>MYSQL_TYPE_DECIMAL</code> and <code>MYSQL_TYPE_NEWDECIMAL</code>\nA 64 bit floating point number\nCorresponds to <code>MYSQL_TYPE_DOUBLE</code>\nA user defined enum type\nA 32 bit floating point number\nCorresponds to <code>MYSQL_TYPE_FLOAT</code>\nA 32 bit signed integer\nA 64 bit signed integer\nCorresponds to <code>MYSQL_TYPE_INT24</code> and <code>MYSQL_TYPE_LONG</code>\nThe MySQL backend\nA connection to a MySQL database. Connection URLs should …\nThe MySQL query builder\nRepresents possible types, that can be transmitted as via …\nRaw mysql value as received from the database\nA fixed point decimal value\nRepresents all possible forms MySQL transmits integers\nA user defined set type\nA 16 bit signed integer\nCorresponds to <code>MYSQL_TYPE_SHORT</code>\nA datatype for string values\nA datatype to store a time value\nA datatype containing timestamp values ranging from …\nA 8 bit signed integer\nCorresponds to <code>MYSQL_TYPE_TINY</code>\nA 32 bit unsigned integer\nA 64 bit unsigned integer\nA 16 bit unsigned integer\nA 8 bit unsigned integer\nGet the underlying raw byte representation\nData structures for MySQL types which have no …\nEstablishes a new connection to the MySQL database …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of MysqlValue based on a byte buffer …\nConstructs a new query builder with an empty query\nMySQL specific sql types\nGet the mysql type of the current value\nRust representation of MYSQL_TIMESTAMP_DATE\nRust representation of MYSQL_TIMESTAMP_DATETIME\nRust representation of MYSQL_TIMESTAMP_DATETIME_TZ\nRust representation of MYSQL_TIMESTAMP_ERROR\nRust representation of MYSQL_TIMESTAMP_NONE\nRust representation of MYSQL_TIMESTAMP_TIME\nCorresponding rust representation of the MYSQL_TIME struct …\nRust representation of enum_mysql_timestamp_type\nDay field\nReturns the argument unchanged.\nReturns the argument unchanged.\nHour field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinute field\nMonth field\nIs this a negative timestamp\nConstruct a new instance of MysqlTime\nSecond field\nMicroseconds\nTimestamp type\nTime zone displacement specified is seconds\nYear field\nRepresents the MySQL datetime type.\nRepresents the MySQL unsigned type.\nA column on a database table.\nRepresents <code>DISTINCT ON (...)</code>\nThis error indicates that a type lookup for a custom …\nGets the <code>PgMetadataCache</code> for a <code>Connection&lt;Backend=Pg&gt;</code> so …\nA decorator trait for <code>OrderClause</code> It helps to have bounds …\nThe PostgreSQL backend\nThe connection string expected by <code>PgConnection::establish</code> …\nCache for the OIDs of custom Postgres types\nThe key used to lookup cached type oid’s inside of a …\nDetermines the OID of types at runtime\nThe PostgreSQL query builder\nA <code>PgConnection</code> specific loading mode to load rows one by …\nThe OIDs for a SQL type\nRaw postgres value as received from the database\nUsed to build a transaction, specifying additional details.\nThis is a helper trait to defer a type oid lookup to a …\nThe OID of <code>T[]</code>\nConvert this lookup instance to a <code>std::any::Any</code> pointer\nConvert this lookup instance to a <code>std::any::Any</code> pointer\nGet the underlying raw byte representation\nBuild a transaction, specifying additional details such as …\nData structures for PG types which have no corresponding …\nMakes the transaction <code>DEFERRABLE</code>\nPostgreSQL related query builder extensions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance of this type based on dynamically …\nGet the <code>PgMetadataCache</code>\nGet the type oid of this value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the possibly borrowed version of this metadata …\nLookup the type oid for the current value\nDetermine the type metadata for the given <code>type_name</code>\nLookup the OID of a custom type\nCreates a new TransactionBuilder.\nConstruct a new instance of this error type containing …\nCreate a new instance of this type based on known constant …\nConstruct a new cache key from an optional schema name and …\nConstruct a new <code>PgMetadataCache</code>\nConstructs a new query builder with an empty query\nCreate a new instance of <code>PgValue</code> based on a byte buffer …\nMakes the transaction <code>NOT DEFERRABLE</code>\nThe OID of <code>T</code>\nMakes the transaction <code>ISOLATION LEVEL READ COMMITTED</code>\nMakes the transaction <code>READ ONLY</code>\nMakes the transaction <code>READ WRITE</code>\nMakes the transaction <code>ISOLATION LEVEL REPEATABLE READ</code>\nRuns the given function inside of the transaction with the …\nMakes the transaction <code>ISOLATION LEVEL SERIALIZABLE</code>\nPostgreSQL specific SQL types\nStore the OID of a custom type\nMoney is represented in Postgres as a 64 bit signed …\nNot a number\nA negative number\nDates are represented in Postgres as a 32 bit signed …\nIntervals in Postgres are separated into 3 parts. A 64 bit …\nMoney is represented in Postgres as a 64 bit signed …\nRepresents a NUMERIC value, closely mirroring the PG wire …\nTime is represented in Postgres as a 64 bit signed integer …\nTimestamps are represented in Postgres as a 64 bit signed …\nA positive number\nPanics\nPanics\nThe number of whole days\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEquivalent to <code>new(0, days, 0)</code>\nEquivalent to <code>new(microseconds, 0, 0)</code>\nEquivalent to <code>new(0, 0, months)</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of whole microseconds\nThe number of whole months\nConstructs a new <code>PgInterval</code>\nPanics\nPanics\nThe digits in this number, stored in base 10000\nThe digits in this number, stored in base 10000\nHow many significant digits are there?\nHow many significant digits are there?\nHow many digits come before the decimal point?\nHow many digits come before the decimal point?\nPostgreSQL specific expression DSL methods.\nThis module contains extensions that are added to core …\nPostgreSQL specific functions\nA DSL added to integers and <code>f64</code> to construct PostgreSQL …\nThe <code>only</code> method\nCreates an abbreviated display format as text.\nCreates a PostgreSQL <code>ALL</code> expression.\nCreates a PostgreSQL <code>ANY</code> expression.\nCreates an <code>ARRAY[...]</code> expression.\nComputes the broadcast address for the address’s network.\nReturns a PgInterval representing <code>self</code> in days\nReturns the address’s family: 4 for IPv4, 6 for IPv6.\nReturns the IP address as text, ignoring the netmask.\nComputes the host mask for the address’s network.\nComputes the smallest network that includes both of the …\nTests whether the addresses belong to the same IP family.\nReturns the netmask length in bits.\nReturns a PgInterval representing <code>self</code> as microseconds\nReturns a PgInterval representing <code>self</code> in months\nComputes the network mask for the address’s network.\nReturns the network part of the address, zeroing out …\nSets the netmask length for an inet or cidr value. For …\nA DSL added to integers and <code>f64</code> to construct PostgreSQL …\nThe <code>only</code> method\nIdentical to <code>days</code>\nIdentical to <code>days</code>\nIdentical to <code>days</code>\nReturns a PgInterval representing <code>self</code> in days\nIdentical to <code>hours</code>\nIdentical to <code>hours</code>\nIdentical to <code>hours</code>\nReturns a PgInterval representing <code>self</code> as hours\nReturns a PgInterval representing <code>self</code> as hours\nReturns a PgInterval representing <code>self</code> as hours\nIdentical to <code>microseconds</code>\nIdentical to <code>microseconds</code>\nIdentical to <code>microseconds</code>\nReturns a PgInterval representing <code>self</code> as microseconds\nIdentical to <code>milliseconds</code>\nIdentical to <code>milliseconds</code>\nIdentical to <code>milliseconds</code>\nReturns a PgInterval representing <code>self</code> as milliseconds\nReturns a PgInterval representing <code>self</code> as milliseconds\nReturns a PgInterval representing <code>self</code> as milliseconds\nIdentical to <code>minutes</code>\nIdentical to <code>minutes</code>\nIdentical to <code>minutes</code>\nReturns a PgInterval representing <code>self</code> as minutes\nReturns a PgInterval representing <code>self</code> as minutes\nReturns a PgInterval representing <code>self</code> as minutes\nIdentical to <code>months</code>\nIdentical to <code>months</code>\nIdentical to <code>months</code>\nReturns a PgInterval representing <code>self</code> in months\nSee the trait-level docs.\nSee the trait-level docs.\nSee the trait-level docs.\nIdentical to <code>seconds</code>\nIdentical to <code>seconds</code>\nIdentical to <code>seconds</code>\nReturns a PgInterval representing <code>self</code> as seconds\nReturns a PgInterval representing <code>self</code> as seconds\nReturns a PgInterval representing <code>self</code> as seconds\nIdentical to <code>weeks</code>\nIdentical to <code>weeks</code>\nIdentical to <code>weeks</code>\nReturns a PgInterval representing <code>self</code> in weeks\nReturns a PgInterval representing <code>self</code> in weeks\nReturns a PgInterval representing <code>self</code> in weeks\nIdentical to <code>years</code>\nIdentical to <code>years</code>\nIdentical to <code>years</code>\nReturns a PgInterval representing <code>self</code> in weeks\nReturns a PgInterval representing <code>self</code> in weeks\nReturns a PgInterval representing <code>self</code> in weeks\nCreates an abbreviated display format as text.\nComputes the broadcast address for the address’s network.\nReturns the address’s family: 4 for IPv4, 6 for IPv6.\nReturns the IP address as text, ignoring the netmask.\nComputes the host mask for the address’s network.\nComputes the smallest network that includes both of the …\nTests whether the addresses belong to the same IP family.\nReturns the netmask length in bits.\nComputes the network mask for the address’s network.\nReturns the network part of the address, zeroing out …\nSets the netmask length for an inet or cidr value. For …\nThe <code>Array</code> SQL type.\nAlias for <code>BigInt</code>\nAlias for <code>Binary</code>, to ensure <code>diesel print-schema</code> works\nThe <code>&quot;char&quot;</code> SQL type. This is a PostgreSQL specific type. …\nThe <code>CIDR</code> SQL type. This type can only be used with …\nThe <code>INET</code> SQL type. This type can only be used with …\nThe <code>jsonb</code> SQL type.  This type can only be used with …\nThe <code>MACADDR</code> SQL type.\nAlias for <code>MacAddr</code> to be able to use it with …\nThe PostgreSQL Money type.\nThe <code>OID</code> SQL type. This is a PostgreSQL specific type.\nThe <code>Range</code> SQL type.\nThe <code>Record</code> (a.k.a. tuple) SQL type.\nAlias for <code>Integer</code>\nAlias for <code>SmallInt</code>\nThe “timestamp with time zone” SQL type, which …\nThe <code>UUID</code> SQL type. This type can only be used with …\nThe type returned by <code>all_columns</code>\nIndicates that all elements of an expression are valid …\nTypes which can be passed to <code>update.set</code>.\nImplements <code>AsChangeset</code>\nImplement required traits for the associations API\nThe backend this type connects to\nThe database returned an error.\nConstructs a query that finds record(s) based on …\nMethods present on boolean expressions\nHelper trait used when boxing expressions.\nThe update statement this type represents\nA column on a database table. Types which implement this …\nExtension trait to combine queries using a combinator like …\nA connection to a database\nErrors which can occur during <code>Connection::establish</code>\nA specialized result type for establishing connections.\nDiesel could not configure the database connection.\nInterface to add information to conflict targets. Designed …\nThe type returned by <code>default_selection</code>\nContains the error value\nContains the error value\nAdds the <code>escape</code> method to <code>LIKE</code> and <code>NOT LIKE</code>. This is used …\nRepresents a typed fragment of SQL.\nMethods present on all expressions, except tuples\nOutput type of filter_target operation\nThe type returned by <code>from_clause</code>\nThe <code>grouped_by</code> function groups records by their parent.\nThe type of this struct’s identifier.\nThis trait indicates that a struct represents a single row …\nImplements <code>Identifiable</code> for references of the current type\nRepresents that a structure can be used to insert a new …\nImplements <code>Insertable</code>\nConverts a type to its representation for use in Diesel’…\nThe connection URL contained a <code>NUL</code> byte.\nThe connection URL could not be parsed.\nSpecify the <code>ON</code> clause for a join statement. This will …\nIndicates that two tables can be joined without an …\nA connection to a MySQL database. Connection URLs should …\nThe name of this column\nMethods present on all expressions\nContains the success value\nContains the success value\nSee the method documentation.\nThe query returned by <code>belonging_to</code>\nPostgreSQL specific methods present on JSON and JSONB …\nPostgreSQL specific methods present on array expressions.\nPostgreSQL specific methods present on Binary expressions.\nThe connection string expected by <code>PgConnection::establish</code> …\nPostgreSQL specific methods which are present on all …\nPostgreSQL specific methods present on JSONB expressions.\nPostgreSQL specific methods present between CIDR/INET …\nPostgreSQL specific methods present on range expressions.\nPostgreSQL expression methods related to sorting.\nPostgreSQL specific methods present on text expressions.\nPostgreSQL specific methods present on timestamp …\nThe type returned by <code>primary_key</code>\nWhat kind of query does this type represent?\nMethods used to construct select statements.\nA specialized result type for queries.\nRepresents a type which can appear in the <code>FROM</code> clause. …\nTrait indicating that a record can be queried from the …\nImplements <code>Queryable</code> to load the result of statically …\nDeserializes the result of a query constructed with …\nImplements <code>QueryableByName</code> for untyped sql queries, such …\nThe Rust type you’d like to map from.\nMethods used to execute queries.\nSugar for types which implement both <code>AsChangeset</code> and …\nThe expression you’d like to select.\nTrait indicating that a record can be selected and queried …\nImplements <code>Selectable</code>\nIndicates that an expression can be selected from a source.\nThis helper trait provides several methods for …\nThe type that this expression represents in SQL\nConnections for the SQLite backend. Unlike other backends, …\nSqlite specific methods which are present on all …\nA SQL database table. Types which implement this trait …\nThe table which this column belongs to\nThe table which <code>Self::Changeset</code> will be updating\nMethods present on text expressions\nThe transaction manager implementation used by this …\nThe <code>VALUES</code> clause to insert these records\nReturns a tuple of all columns belonging to this table.\nAllow two or more columns which are otherwise unrelated to …\nAllow two or more tables which are otherwise unrelated to …\nConvert <code>self</code> into the actual update statement being …\nAn alias for <code>as_select</code> that can be used with returning …\nConstruct a select clause based on a <code>Selectable</code> …\nConvert <code>&amp;self</code> to an expression for Diesel’s query …\nCreates a transaction that will never be committed. This …\nGet the record(s) belonging to record(s) <code>other</code>\nConstruct an instance of this type\nConstruct an instance of <code>Self</code> from the database row\nConstruct an instance of the expression\nGet the count of a query. This is equivalent to …\nThe default select clause of this type, which should be …\nAdds the <code>DISTINCT</code> keyword to a query.\nAdds the <code>DISTINCT ON</code> clause to a query.\nSee the trait documentation.\nEstablishes a new connection to the database\nCombine two queries using a SQL <code>EXCEPT</code>\nCombine two queries using a SQL <code>EXCEPT ALL</code>\nExecutes the given command, returning the number of rows …\nExecute a single SQL statements given by a query and return\nAdds to the <code>WHERE</code> clause of a query.\nequivalent to filter of FilterDsl but aimed at conflict …\nAttempts to find a single record from the given table by …\nAttempts to load a single record.\nAdds <code>FOR KEY SHARE</code> to the end of the select statement.\nAdds <code>FOR NO KEY UPDATE</code> to the end of the select statement.\nAdds <code>FOR SHARE</code> to the end of the select statement.\nAdds <code>FOR UPDATE</code> to the end of the select statement.\nReturns the argument unchanged.\nThe actual <code>FROM</code> clause of this type. This is typically …\nRuns the command, and returns the affected row.\nRuns the command, returning an <code>Vec</code> with the affected rows.\nSets the <code>group by</code> clause of a query.\nSee the trait documentation.\nAdds to the <code>HAVING</code> clause of a query.\nReturns the identifier for this record.\nJoin two tables using a SQL <code>INNER JOIN</code>.\nInsert <code>self</code> into a given table.\nCombine two queries using a SQL <code>INTERSECT</code>\nCombine two queries using a SQL <code>INTERSECT ALL</code>\nCalls <code>U::from(self)</code>.\nBoxes the pieces of a query into a single type.\nConvert <code>self</code> to an expression for Diesel’s query builder.\nAllow two tables to be referenced in a join query without …\nAlias for <code>left_outer_join</code>.\nJoin two tables using a SQL <code>LEFT OUTER JOIN</code>.\nSets the limit clause of the query.\nExecutes the given query, returning a <code>Vec</code> with the …\nExecutes the given query, returning an <code>Iterator</code> with the …\nAdds <code>NOWAIT</code> to the end of a <code>FOR UPDATE</code> clause.\nCoerce the SQL type of the select clause to it’s …\nSets the offset clause of the query.\nConverts a <code>QueryResult&lt;T&gt;</code> into a <code>QueryResult&lt;Option&lt;T&gt;&gt;</code>.\nAdds to the <code>WHERE</code> clause of a query using <code>OR</code>\nSets the order clause of a query.\nAlias for <code>order</code>\nReturns the primary key of this table.\nAdds a <code>SELECT</code> clause to the query.\nWraps this select statement in parenthesis, allowing it to …\nAdds <code>SKIP LOCKED</code> to the end of a <code>FOR UPDATE</code> clause.\nDeclare a sql function for use in your code.\nSpecifies that a table exists, and what columns it has. …\nExecutes the given function inside a transaction, but does …\nAppends to the <code>ORDER BY</code> clause of this SQL query.\nExecutes the given function inside of a database …\nGet access to the current transaction state of this …\nCombine two queries using a SQL <code>UNION</code>\nCombine two queries using a SQL <code>UNION ALL</code>\nConstruct <code>Self::Values</code>\nTypes which can be passed to <code>update.set</code>.\nImplements <code>AsChangeset</code>\nTypes that can be converted into a complete, typed SQL …\nThe primary type used when walking a Diesel AST during …\nThis is used to pass down additional settings to the …\nThis type represents a batch insert clause, which allows …\nA type which manages serializing bind parameters during …\nResulting type\nA <code>DELETE</code> statement with a boxed <code>WHERE</code> clause\nA boxed variant of <code>LimitOffsetClause</code>\nThis type represents a boxed select query\nSee <code>SqlQuery::into_boxed</code>.\nAn <code>UPDATE</code> statement with a boxed <code>WHERE</code> clause.\nThe internal buffer type used by this bind collector\nA specialized Result type used with the query builder.\nThe update statement this type represents\nA struct that implements <code>fmt::Display</code> and <code>fmt::Debug</code> to …\nInterface to add information to conflict targets. Designed …\nRepresents a SQL <code>DELETE</code> statement.\nContains the error value\nOutput type of filter_target operation\nCan the SQL generated by <code>Self</code> be uniquely identified by …\nCan the SQL generated by <code>Self</code> be uniquely identified by …\nRepresents the return type of <code>diesel::insert_or_ignore_into</code>\nThe structure returned by <code>insert_into</code>.\nRepresents the return type of <code>diesel::replace_into</code>\nRepresents a complete <code>INSERT OR IGNORE</code> statement.\nA fully constructed insert statement.\nA trait used to construct type erased boxed variant of the …\nA type which can be passed to <code>update</code> or <code>delete</code>.\nA query node representing a limit clause\nA helper query node that contains both limit and offset …\nThis type represents a not existing from clause\nA query node indicating the absence of a limit clause\nA query node indicating the absence of an offset clause\nA query node representing an offset clause\nContains the success value\nRepresents a query with an <code>ONLY</code> clause.\nA complete SQL query with a return type.\nWhat kind of query does this type represent?\nConstructs a SQL query from a Diesel AST.\nAn untyped fragment of SQL.\nUniquely identifies queries by their type for the purpose …\nA type which uniquely represents <code>Self</code> in a SQL query.\nImplements <code>QueryId</code>\nRepresents a complete <code>INSERT OR REPLACE</code> statement.\nThis type represents a SQL <code>Returning</code> clause\nSpecialised variant of <code>Expression</code> for select clause types\nSQL type of the select clause\nIndicates that a type is a <code>SELECT</code> statement.\nThis type represents a select query\nThe expression represented by the given select clause\nThe return value of <code>sql_query</code>.\nThe SQL type that this query represents.\nThe SQL type of the <code>SELECT</code> clause\nThe SQL type of <code>Self::Query</code>\nThe table which <code>Self::Changeset</code> will be updating\nMarker trait to indicate that no additional operations …\nRepresents a complete <code>UPDATE</code> statement.\nThis type represents a values clause used as part of …\nWhat is the <code>WHERE</code> clause of this target?\nConvert <code>self</code> into the actual update statement being …\nConverts a type which semantically represents a SQL query …\nGet information about the backend that will consume this …\nSee <code>SqlQuery::bind</code>.\nBind a value for use with this SQL query. The given query …\nTypes related to managing bind parameters during query …\nSerializes all bind parameters in this query.\nTakes a query <code>QueryFragment</code> expression as an argument and …\nInserts <code>DEFAULT VALUES</code> into the targeted table.\nThe distinct clause of the query\nThe distinct clause of the query\nAdds the given predicate to the <code>WHERE</code> clause of the …\nAdds the given predicate to the <code>WHERE</code> clause of the …\nequivalent to filter of FilterDsl but aimed at conflict …\nReturns the constructed SQL query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe from clause of the query\nThe from clause of the query\nThe group by clause of the query\nThe group by clause of the query\nThe having clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the given query node in it’s boxed representation\nBoxes the <code>WHERE</code> clause of this delete statement.\nInternally boxes future calls on <code>bind</code> and <code>sql</code> so that they …\nBoxes the <code>WHERE</code> clause of this update statement.\nSet the column list when inserting from a select statement\nDecomposes <code>self</code> into the table and where clause.\nDoes walking this AST have any effect?\nIs this query safe to store in the prepared statement …\nThe limit clause\nThe limit clause\nThe combined limit/offset clause of the query\nThe combined limit/offset clause of the query\nThe locking clause of the query\nCreate a new InsertStatement instance\nThe offset clause\nThe offset clause\nAdds an <code>ON CONFLICT</code> to the insert statement, if a conflict …\nAdds <code>ON CONFLICT DO NOTHING</code> to the insert statement, …\nThe operator used by this InsertStatement\nThe operator used by this InsertStatement\nThe operator used by this InsertStatement\nAdds to the <code>WHERE</code> clause of a query using <code>OR</code>\nThe order clause of the query\nThe order clause of the query\nAdd a placeholder for a bind parameter to the end of the …\nPush a value onto the given query to be sent separate from …\nPush a value onto the given query to be sent separate from …\nIncreases the internal counter for bind parameters without …\nSerializes the given bind value, and collects the result.\nQuote <code>identifier</code>, and add it to the end of the query being …\nPush the given SQL identifier on the end of the query …\nAdd <code>sql</code> to the end of the query being constructed.\nPush the given SQL string on the end of the query being …\nReturns the type id of <code>Self::QueryId</code> if …\nReturns the type id of <code>Self::QueryId</code> if …\nCall this method whenever you pass an instance of <code>AstPass</code> …\nThe data which should be inserted\nThe data which should be inserted\nThe data which should be inserted\nSpecify what expression is returned after execution of the …\nSpecify what expression is returned after execution of the …\nSpecify what expression is returned after execution of the …\nAn optional returning clause\nAn optional returning clause\nAn optional returning clause\nThe select clause of the query\nThe select clause of the query\nProvides the <code>SET</code> clause of the <code>UPDATE</code> statement.\nGet if the query should be rendered with from clauses or …\nSee <code>SqlQuery::sql</code>.\nAppends a piece of SQL code at the end.\nThe table we are inserting into\nThe table we are inserting into\nThe table we are inserting into\nConverts this <code>QueryFragment</code> to its SQL representation.\nMark the current query being constructed as unsafe to …\nInserts the given values into the table passed to …\nList of values that should be inserted\nValues to insert\nWalk over this <code>QueryFragment</code> for all passes.\nThe where clause of the query\nThe where clause of the query\nA type which manages serializing bind parameters during …\nThe internal buffer type used by this bind collector\nA type wrapper for raw bytes\nA bind collector used by backends which transmit bind …\nThe serialized bytes for each bind parameter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe metadata associated with each bind parameter.\nConstruct an empty <code>RawBytesBindCollector</code>\nSerializes the given bind value, and collects the result.\nConstructs a query that finds record(s) based on …\nExtension trait to combine queries using a combinator like …\nSpecify the <code>ON</code> clause for a join statement. This will …\nThe query returned by <code>belonging_to</code>\nWhat kind of query does this type represent?\nMethods used to construct select statements.\nMethods used to execute queries.\nSugar for types which implement both <code>AsChangeset</code> and …\nA trait defining how to update a record and fetch the …\nGet the record(s) belonging to record(s) <code>other</code>\nGet the count of a query. This is equivalent to …\nAdds the <code>DISTINCT</code> keyword to a query.\nAdds the <code>DISTINCT ON</code> clause to a query.\nCombine two queries using a SQL <code>EXCEPT</code>\nCombine two queries using a SQL <code>EXCEPT ALL</code>\nExecutes the given command, returning the number of rows …\nAdds to the <code>WHERE</code> clause of a query.\nAttempts to find a single record from the given table by …\nAttempts to load a single record.\nAdds <code>FOR KEY SHARE</code> to the end of the select statement.\nAdds <code>FOR NO KEY UPDATE</code> to the end of the select statement.\nAdds <code>FOR SHARE</code> to the end of the select statement.\nAdds <code>FOR UPDATE</code> to the end of the select statement.\nRuns the command, and returns the affected row.\nRuns the command, returning an <code>Vec</code> with the affected rows.\nSets the <code>group by</code> clause of a query.\nAdds to the <code>HAVING</code> clause of a query.\nJoin two tables using a SQL <code>INNER JOIN</code>.\nCombine two queries using a SQL <code>INTERSECT</code>\nCombine two queries using a SQL <code>INTERSECT ALL</code>\nBoxes the pieces of a query into a single type.\nAlias for <code>left_outer_join</code>.\nJoin two tables using a SQL <code>LEFT OUTER JOIN</code>.\nSets the limit clause of the query.\nExecutes the given query, returning a <code>Vec</code> with the …\nExecutes the given query, returning an <code>Iterator</code> with the …\nThe traits used by <code>QueryDsl</code>.\nAdds <code>NOWAIT</code> to the end of a <code>FOR UPDATE</code> clause.\nCoerce the SQL type of the select clause to it’s …\nSets the offset clause of the query.\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nAdds to the <code>WHERE</code> clause of a query using <code>OR</code>\nSets the order clause of a query.\nAlias for <code>order</code>\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nAdds a <code>SELECT</code> clause to the query.\nWraps this select statement in parenthesis, allowing it to …\nAdds <code>SKIP LOCKED</code> to the end of a <code>FOR UPDATE</code> clause.\nAppends to the <code>ORDER BY</code> clause of this SQL query.\nCombine two queries using a SQL <code>UNION</code>\nCombine two queries using a SQL <code>UNION ALL</code>\nSee the traits documentation.\nThe <code>into_boxed</code> method\nThe <code>distinct</code> method\nThe <code>distinct_on</code> method\nThe <code>execute</code> method\nThe <code>filter</code> method\nThe <code>find</code> method\nThe <code>group_by</code> method\nThe <code>having</code> method\nThe <code>limit</code> method\nThe <code>load</code> method\nMethods related to locking select statements\nMethods related to modifiers on locking select statements\nThe <code>offset</code> method\nThe <code>or_filter</code> method\nThe <code>order</code> method\nThe return type of <code>internal_into_boxed</code>\nThe type returned by <code>.distinct</code>\nThe type returned by <code>.distinct_on</code>\nThe type returned by <code>.filter</code>.\nThe type returned by <code>.find</code>.\nThe type returned by <code>.filter</code>.\nThe type returned by <code>.group_by</code>\nThe type returned by <code>.having</code>.\nThe type returned by <code>.limit</code>\nThe type returned by <code>set_lock</code>. See <code>dsl::ForUpdate</code> and …\nThe type returned by <code>modify_lock</code>. See <code>dsl::SkipLocked</code> and …\nThe return type of <code>nullable</code>\nThe type returned by <code>.offset</code>.\nThe type returned by <code>.order</code>.\nThe type returned by <code>.then_order_by</code>.\nThe type returned by <code>.select</code>\nThe type returned by <code>.single_value</code>.\nReturn type of <code>LoadQuery::internal_load</code>\nThe <code>select</code> method\nThe <code>nullable</code> method\nThe <code>single_value</code> method\nThe <code>then_order_by</code> method\nSee the trait documentation.\nSee the trait documentation\nExecute this command\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation.\nLoad this query\nSee the trait documentation\nSee the trait level documentation\nSee the trait documentation\nSee the trait documentation\nSee the trait documentation.\nSee the trait documentation.\nSee the trait documentation\nSee the trait documentation.\nSee the trait documentation.\nSee the trait level documentation\nRepresents an alias within diesel’s query builder\nTypes created by the <code>alias!</code> macro that serve to …\nRepresents an aliased field (column) within diesel’s …\nThe type returned by <code>all_columns</code>\nDetermines how many times <code>Self</code> appears in <code>QS</code>\nA column on a database table. Types which implement this …\nHow many times does <code>Self</code> appear in <code>QS</code>?\nThe type returned by <code>default_selection</code>\nThe type returned by <code>from_clause</code>\nIndicates that two tables can be joined without an …\nMax length of that column\nA table appears in the from clause two or more times.\nThe name of this alias in the query\nThe name of this column\nA table never appears in the from clause.\nA table appears in the from clause exactly one time.\nThe result of adding these numbers together\nAdd two peano numbers together.\nThe type returned by <code>primary_key</code>\nRepresents a type which can appear in the <code>FROM</code> clause. …\nMax length for columns of type Char/Varchar…\nA SQL database table. Types which implement this trait …\nThe table which this column belongs to\nAllows Diesel to implement some internal traits for two …\nThe table the alias maps to\nReturns a tuple of all columns belonging to this table.\nThe default select clause of this type, which should be …\nMaps a single field of the source table in this alias\nMaps multiple fields of the source table in this alias …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe actual <code>FROM</code> clause of this type. This is typically …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the primary key of this table.\nObtain the table from the source\nA builder for a connection pool.\nThe connection type this manager deals with.\nAn error occurred establishing the connection\nAn r2d2 connection manager for use with Diesel.\nA trait which allows for customization of connections.\nThe error used when managing connections with <code>r2d2</code>.\nThe error type returned by <code>Connection</code>s.\nA “type map” used to associate data with pooled …\nA trait which handles errors reported by the …\nA trait which is provided with information about events in …\nA <code>HandleError</code> implementation which logs at the error level.\nA trait which provides connection-specific functionality.\nA <code>CustomizeConnection</code> which does nothing.\nA <code>HandleError</code> implementation which does nothing.\nA <code>HandleEvent</code> implementation which does nothing.\nA generic connection pool.\nA re-export of <code>r2d2::Error</code>, which is only used by methods …\nA smart pointer wrapping a connection.\nAn error occurred pinging the database\nA trait indicating a connection could be used inside a …\nInformation about the state of a <code>Pool</code>.\nConsumes the builder, returning a new, initialized pool.\nConsumes the builder, returning a new pool.\nReturns a builder type to configure a new pool.\nRemoves all values from the map.\nAttempts to create a new connection.\nSets the connection customizer used by the pool.\nSets the connection timeout used by the pool.\nReturns the configured connection timeout.\nThe number of connections currently being managed by the …\nSets the handler for errors reported in the pool.\nEvent subscriptions.\nSets the handler for events reported by the pool.\nReturns a shared reference to the extensions associated …\nReturns a mutable reference to the extensions associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a connection from the pool.\nReturns a shared reference to the stored value of the …\nReturns a mutable reference to the stored value of the …\nRetrieves a connection from the pool, waiting for at most …\nCalled when a new connection is acquired.\nCalled when a connection is checked back into the pool.\nCalled when a connection is checked out from the pool.\nHandles an error.\nCalled when a connection is released.\nCalled when a checkout attempt times out.\n<em>Quickly</em> determines if the connection is no longer usable.\nThe number of idle connections.\nSets the idle timeout used by the pool.\nReturns the configured idle connection timeout.\nInserts a new value into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the connection is broken and should not be reused\nDetermines if the connection is still connected to the …\nSets the maximum lifetime of connections in the pool.\nReturns the configured maximum connection lifetime.\nSets the maximum number of connections managed by the pool.\nReturns the configured maximum pool size.\nSets the minimum idle connection count maintained by the …\nReturns the configured mimimum idle connection count.\nConstructs a new <code>Builder</code>.\nCreates a new connection pool with a default configuration.\nReturns a new, empty <code>Extensions</code>.\nReturns a new connection manager, which establishes …\nCalled with connections immediately after they are …\nCalled with connections when they are removed from the …\nCheck if a connection is still valid\nRemoves the value of the specified type from the map, …\nReturns information about the current state of the pool.\nIf true, the health of a connection will be verified via a …\nReturns if the pool is configured to test connections on …\nSets the thread pool used for asynchronous operations such …\nAttempts to retrieve a connection from the pool if there …\nInformation about an acquire event.\nInformation about a checkin event.\nInformation about a checkout event.\nA trait which is provided with information about events in …\nA <code>HandleEvent</code> implementation which does nothing.\nInformation about a release event.\nInformation about a timeout event.\nReturns the age of the connection.\nReturns the ID of the connection.\nReturns the ID of the connection.\nReturns the ID of the connection.\nReturns the ID of the connection.\nReturns the time taken to check out the connection.\nReturns the amount of time the connection was checked out.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalled when a new connection is acquired.\nCalled when a connection is checked back into the pool.\nCalled when a connection is checked out from the pool.\nCalled when a connection is released.\nCalled when a checkout attempt times out.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the timeout of the failed checkout attempt.\nAttempted to perform an operation that cannot be done …\nThe database returned an error.\nTransaction manager broken, likely due to a broken …\nA check constraint was violated.\nThe connection to the server was unexpectedly closed.\nErrors which can occur during <code>Connection::establish</code>\nA specialized result type for establishing connections.\nDiesel could not configure the database connection.\nThe database returned an error.\nInformation about an error that was returned by the …\nThe kind of database error that occurred.\nAn error occurred deserializing the data being sent to the …\nContains the error value\nContains the error value\nRepresents all the ways that a query can fail.\nA foreign key constraint was violated.\nThe query contained a nul byte.\nThe connection URL contained a <code>NUL</code> byte.\nThe connection URL could not be parsed.\nNo rows were returned by a query expected to return at …\nAttempted to perform an operation that can only be done …\nA not null constraint was violated.\nContains the success value\nContains the success value\nSee the method documentation.\nThe query could not be constructed\nA specialized result type for queries.\nThe command could not be completed because the transaction …\nAn error occurred when attempting rollback of a …\nRoll back the current transaction.\nAn error occurred serializing the data being sent to the …\nA serializable transaction failed to commit due to a …\nThe query could not be sent to the database due to a …\nExpected more fields then present in the current row while …\nAn unexpected <code>NULL</code> was encountered during deserialization\nA unique constraint was violated.\nThe name of the column the error was associated with, if …\nThe constraint that was violated if this error is a …\nAn optional secondary error message providing more details …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn optional suggestion of what to do about the problem, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primary human-readable error message. Typically one …\nConverts a <code>QueryResult&lt;T&gt;</code> into a <code>QueryResult&lt;Option&lt;T&gt;&gt;</code>.\nAn optional integer indicating an error cursor position as …\nThe name of the table the error was associated with, if …\nThe error that was encountered during the failed commit …\nThe error that was encountered when attempting the rollback\nRepresents a single field in a database row.\nField type returned by a <code>Row</code> implementation\nReturn type of <code>PartialRow</code>\nRepresents a row of a SQL query, where the values are …\nA row type that wraps an inner row\nRepresents a single database row.\nRepresenting a way to index into database rows\nThis trait restricts who can implement <code>Row</code>\nGet the number of fields in the current row\nThe name of the current field\nReturns the argument unchanged.\nGet the field with the provided index from the row.\nRetrieve and deserialize a single value from the query\nGet a deserialized value with the provided index from the …\nGet the numeric index inside the current row for the …\nCalls <code>U::from(self)</code>.\nChecks whether this field is null or not.\nCreate a new <code>PartialRow</code> instance based on an inner row and …\nReturns a wrapping row that allows only to access fields, …\nGet the value representing the current field in the raw …\nContains the error value\nTiny enum to make the return type of <code>ToSql</code> more descriptive\nThe value is not null\nContains the success value\nWraps a buffer to be written by <code>ToSql</code> with additional …\nA specialized result type representing the result of …\nSerializes a single value to be sent to the database.\nHelper trait for writing tuples as named composite types\nNo data was written, as this type is null\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the current <code>Output</code> structure to access the inner …\nReturns the backend’s mechanism for dynamically looking …\nConstruct a new <code>Output</code>\nCall this method whenever you pass an instance of …\nSet the inner buffer to a specific value\nSee the trait documentation.\nSee trait documentation.\nAre both values of <code>IsNull</code> are nullable?\nThe <code>Array</code> SQL type.\nThe SQL type of <code>avg(this_type)</code>\nThe big integer SQL type.\nAlias for <code>BigInt</code>\nThe binary SQL type.\nThe boolean SQL type.\nA marker trait for accepting expressions of the type <code>Bool</code> …\nAlias for <code>Binary</code>, to ensure <code>diesel print-schema</code> works\nThe <code>&quot;char&quot;</code> SQL type. This is a PostgreSQL specific type. …\nThe <code>CIDR</code> SQL type. This type can only be used with …\nThe date SQL type.\nRepresents the MySQL datetime type.\nAlias for <code>Numeric</code>\nImplement numeric operators for the current query node\nThe double precision float SQL type.\nThe float SQL type.\nRepresents SQL types which can be used with <code>SUM</code> and <code>AVG</code>\nIndicates that a SQL type exists for a backend.\nThe <code>INET</code> SQL type. This type can only be used with …\nThe integer SQL type.\nThe interval SQL type.\nConverts a type which may or may not be nullable into its …\nConverts a type which may or may not be nullable into its …\nIs this type nullable?\nThe JSON SQL type.  This type can only be used with …\nThe <code>jsonb</code> SQL type.  This type can only be used with …\nThe <code>MACADDR</code> SQL type.\nAlias for <code>MacAddr</code> to be able to use it with …\nA type level constructor for maybe nullable types\nThe type used for runtime lookup of metadata.\nThe PostgreSQL Money type.\nThe not nullable representation of this type.\nThe nullable SQL type.\nThe nullable representation of this type.\nThe arbitrary precision numeric SQL type.\nThe <code>OID</code> SQL type. This is a PostgreSQL specific type.\nIs one value of <code>IsNull</code> nullable?\nSee the trait documentation\nSee the trait documentation\nSee the trait documentation\nThe <code>Range</code> SQL type.\nThe <code>Record</code> (a.k.a. tuple) SQL type.\nAlias for <code>Integer</code>\nA marker trait indicating that a SQL type represents a …\nThe small integer SQL type.\nAlias for <code>SmallInt</code>\nMarker trait for types which can be used with <code>MAX</code> and <code>MIN</code>\nA marker trait for SQL types\nImplement necessary traits for adding a new sql type\nThe SQL type of <code>sum(this_type)</code>\nThe text SQL type.\nThe time SQL type.\nThe timestamp SQL type.\nThe “timestamp with time zone” SQL type, which …\nThe SQLite timestamp with time zone type\nThe tiny integer SQL type.\nInformation about how a backend stores metadata about …\nThe actual type used to represent metadata.\nRepresents the MySQL unsigned type.\nQuery nodes with this expression type do not have a …\nThe <code>UUID</code> SQL type. This type can only be used with …\nThe SQL <code>VARCHAR</code> type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPossible values for <code>SqlType::IsNullable</code>\nFetch the metadata for the given type\nRepresents the output of numeric operators in SQL\nRepresents the output type of <code>AllAreNullable</code> for two given …\nYes, this type can be null\nRepresents the output type of <code>OneIsNullable</code> for two given …\nRepresents if the SQL type is nullable or not\nRepresents the output type of <code>MaybeNullableType</code>\nNo, this type cannot be null as it is marked as <code>NOT NULL</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents SQL types which can be added.\nRepresents SQL types which can be divided.\nRepresents SQL types which can be multiplied.\nThe SQL type of the result of adding <code>Rhs</code> to <code>Self</code>\nThe SQL type of the result of subtracting <code>Rhs</code> from <code>Self</code>\nThe SQL type of the result of multiplying <code>Self</code> by <code>Rhs</code>\nThe SQL type of the result of dividing <code>Self</code> by <code>Rhs</code>\nThe SQL type which can be added to this one\nThe SQL type which can be subtracted from this one\nThe SQL type which this can be multiplied by\nThe SQL type which this one can be divided by\nRepresents SQL types which can be subtracted.\nBind using <code>sqlite3_bind_blob</code>\n<code>bytes</code> should contain an <code>f64</code>\n<code>bytes</code> should contain an <code>f32</code>\n<code>bytes</code> should contain an <code>i32</code>\n<code>bytes</code> should contain an <code>i64</code>\nThe result type of the SQLite aggregate function\n<code>bytes</code> should contain an <code>i16</code>\nThe SQLite backend\nTrait for the implementation of a SQLite aggregate function\nThis type represents a value bound to a sqlite prepared …\nConnections for the SQLite backend. Unlike other backends, …\nDetermines how a bind parameter is given to SQLite\nRaw sqlite value as received from the database\nBind using <code>sqlite3_bind_text</code>\nEstablish a connection to the database specified by …\nRun a transaction with <code>BEGIN EXCLUSIVE</code>\nAfter the last row has been processed, the <code>finalize()</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRun a transaction with <code>BEGIN IMMEDIATE</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe SQLite query builder\nRegister a collation function.\nSQLite specific sql types\nThe <code>step()</code> method is called once for every record of the …\nGet the type of the value as returned by sqlite\nConstructs SQL queries for use with the SQLite backend\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a new query builder with an empty query\nThe SQLite timestamp with time zone type\nInterface to add information to conflict targets. Designed …\nOutput type of filter_target operation\nA partially constructed <code>ON CONFLICT DO UPDATE</code> clause.\nA partially constructed <code>ON CONFLICT</code> clause.\nCreates a query with <code>ON CONFLICT (target) DO NOTHING</code>\nUsed to create a query in the form …\nRepresents <code>excluded.column</code> in an <code>ON CONFLICT DO UPDATE</code> …\nequivalent to filter of FilterDsl but aimed at conflict …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to specify the constraint name for an upsert …\nSee <code>do_update</code> for usage examples.")