searchState.loadedDescShard("memchr", 0, "This library provides heavily optimized routines for …\nAn iterator over all occurrences of a single byte in a …\nAn iterator over all occurrences of two possible bytes in …\nAn iterator over all occurrences of three possible bytes …\nA module with low-level architecture dependent routines.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSearch for the first occurrence of a byte in a slice.\nSearch for the first occurrence of two possible bytes in a …\nReturns an iterator over all occurrences of the needles in …\nSearch for the first occurrence of three possible bytes in …\nReturns an iterator over all occurrences of the needles in …\nReturns an iterator over all occurrences of the needle in …\nThis module provides forward and reverse substring search …\nSearch for the last occurrence of a byte in a slice.\nSearch for the last occurrence of two possible bytes in a …\nReturns an iterator over all occurrences of the needles in …\nSearch for the last occurrence of three possible bytes in …\nReturns an iterator over all occurrences of the needles in …\nReturns an iterator over all occurrences of the needle in …\nReturns an iterator over all occurrences of the needle …\nReturns an iterator over all occurrences of the needle …\nReturns an iterator over all occurrences of the needle …\nContains architecture independent routines.\nVector algorithms for the <code>x86_64</code> target.\nCompare corresponding bytes in <code>x</code> and <code>y</code> for equality.\nCompare <code>n</code> bytes at the given pointers for equality.\nReturns true if and only if <code>needle</code> is a prefix of <code>haystack</code>.\nReturns true if and only if <code>needle</code> is a suffix of <code>haystack</code>.\nProvides architecture independent implementations of <code>memchr</code>…\nProvides an architecture independent implementation of the …\nAn implementation of the Rabin-Karp substring search …\nAn implementation of the Shift-Or substring search …\nAn implementation of the Two-Way substring search algorithm…\nFinds all occurrences of a single byte in a haystack.\nAn iterator over all occurrences of a single byte in a …\nFinds all occurrences of three bytes in a haystack.\nAn iterator over all occurrences of three possible bytes …\nFinds all occurrences of two bytes in a haystack.\nAn iterator over all occurrences of two possible bytes in …\nCounts all occurrences of this byte in the given haystack.\nCounts all occurrences of this byte in the given haystack …\nReturn the first occurrence of the needle in the given …\nReturn the first occurrence of one of the needle bytes in …\nReturn the first occurrence of one of the needle bytes in …\nLike <code>find</code>, but accepts and returns raw pointers.\nLike <code>find</code>, but accepts and returns raw pointers.\nLike <code>find</code>, but accepts and returns raw pointers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all occurrences of the needle …\nReturns an iterator over all occurrences of one of the …\nReturns an iterator over all occurrences of one of the …\nCreate a new searcher that finds occurrences of the byte …\nCreate a new searcher that finds occurrences of the two …\nCreate a new searcher that finds occurrences of the three …\nReturn the last occurrence of the needle in the given …\nReturn the last occurrence of one of the needle bytes in …\nReturn the last occurrence of one of the needle bytes in …\nLike <code>rfind</code>, but accepts and returns raw pointers.\nLike <code>rfind</code>, but accepts and returns raw pointers.\nLike <code>rfind</code>, but accepts and returns raw pointers.\nAn architecture independent “packed pair” finder.\nThis trait allows the user to customize the heuristic used …\nA pair of byte offsets into a needle to use as a predicate.\nRun this finder on the given haystack as a prefilter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the first offset of the pair.\nReturns the second offset of the pair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new prefilter that reports possible locations …\nCreate a new pair of offsets from the given needle.\nReturns the pair of offsets (into the needle) used to …\nReturn the heuristic frequency rank of the given byte. A …\nCreate a new pair using the offsets given for the needle …\nCreate a new prefilter using the pair given.\nCreate a new pair of offsets from the given needle and …\nA forward substring searcher using the Rabin-Karp …\nA reverse substring searcher using the Rabin-Karp …\nReturn the first occurrence of the <code>needle</code> in the <code>haystack</code> …\nLike <code>find</code>, but accepts and returns raw pointers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Rabin-Karp forward searcher for the given …\nCreate a new Rabin-Karp reverse searcher for the given …\nReturn the last occurrence of the <code>needle</code> in the <code>haystack</code> …\nLike <code>rfind</code>, but accepts and returns raw pointers.\nA forward substring searcher using the Shift-Or algorithm.\nReturn the first occurrence of the needle given to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Shift-Or forward searcher for the given <code>needle</code>…\nA forward substring searcher that uses the Two-Way …\nA reverse substring searcher that uses the Two-Way …\nReturns the first occurrence of <code>needle</code> in the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a searcher that finds occurrences of the given …\nCreate a searcher that finds occurrences of the given …\nReturns the last occurrence of <code>needle</code> in the given <code>haystack</code>…\nAlgorithms for the <code>x86_64</code> target using 256-bit vectors via …\nAlgorithms for the <code>x86_64</code> target using 128-bit vectors via …\nThis module defines 256-bit vector implementations of …\nA 256-bit vector implementation of the “packed pair” …\nFinds all occurrences of a single byte in a haystack.\nAn iterator over all occurrences of a single byte in a …\nFinds all occurrences of three bytes in a haystack.\nAn iterator over all occurrences of three possible bytes …\nFinds all occurrences of two bytes in a haystack.\nAn iterator over all occurrences of two possible bytes in …\nCounts all occurrences of this byte in the given haystack.\nCounts all occurrences of this byte in the given haystack …\nReturn the first occurrence of one of the needle bytes in …\nReturn the first occurrence of one of the needle bytes in …\nReturn the first occurrence of one of the needle bytes in …\nLike <code>find</code>, but accepts and returns raw pointers.\nLike <code>find</code>, but accepts and returns raw pointers.\nLike <code>find</code>, but accepts and returns raw pointers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when this implementation is available in the …\nReturns true when this implementation is available in the …\nReturns true when this implementation is available in the …\nReturns an iterator over all occurrences of the needle …\nReturns an iterator over all occurrences of the needle …\nReturns an iterator over all occurrences of the needle …\nCreate a new searcher that finds occurrences of the needle …\nCreate a new searcher that finds occurrences of the needle …\nCreate a new searcher that finds occurrences of the needle …\nCreate a new finder specific to AVX2 vectors and routines …\nCreate a new finder specific to AVX2 vectors and routines …\nCreate a new finder specific to AVX2 vectors and routines …\nReturn the last occurrence of one of the needle bytes in …\nReturn the last occurrence of one of the needle bytes in …\nReturn the last occurrence of one of the needle bytes in …\nLike <code>rfind</code>, but accepts and returns raw pointers.\nLike <code>rfind</code>, but accepts and returns raw pointers.\nLike <code>rfind</code>, but accepts and returns raw pointers.\nA “packed pair” finder that uses 256-bit vector …\nExecute a search using AVX2 vectors and routines.\nRun this finder on the given haystack as a prefilter.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true when this implementation is available in the …\nReturns the minimum haystack length that this <code>Finder</code> can …\nCreate a new pair searcher. The searcher returned can …\nReturns the pair of offsets (into the needle) used to …\nCreate a new “packed pair” finder using the pair of …\nThis module defines 128-bit vector implementations of …\nA 128-bit vector implementation of the “packed pair” …\nFinds all occurrences of a single byte in a haystack.\nAn iterator over all occurrences of a single byte in a …\nFinds all occurrences of three bytes in a haystack.\nAn iterator over all occurrences of three possible bytes …\nFinds all occurrences of two bytes in a haystack.\nAn iterator over all occurrences of two possible bytes in …\nCounts all occurrences of this byte in the given haystack.\nCounts all occurrences of this byte in the given haystack …\nReturn the first occurrence of one of the needle bytes in …\nReturn the first occurrence of one of the needle bytes in …\nReturn the first occurrence of one of the needle bytes in …\nLike <code>find</code>, but accepts and returns raw pointers.\nLike <code>find</code>, but accepts and returns raw pointers.\nLike <code>find</code>, but accepts and returns raw pointers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when this implementation is available in the …\nReturns true when this implementation is available in the …\nReturns true when this implementation is available in the …\nReturns an iterator over all occurrences of the needle …\nReturns an iterator over all occurrences of the needle …\nReturns an iterator over all occurrences of the needle …\nCreate a new searcher that finds occurrences of the needle …\nCreate a new searcher that finds occurrences of the needle …\nCreate a new searcher that finds occurrences of the needle …\nCreate a new finder specific to SSE2 vectors and routines …\nCreate a new finder specific to SSE2 vectors and routines …\nCreate a new finder specific to SSE2 vectors and routines …\nReturn the last occurrence of one of the needle bytes in …\nReturn the last occurrence of one of the needle bytes in …\nReturn the last occurrence of one of the needle bytes in …\nLike <code>rfind</code>, but accepts and returns raw pointers.\nLike <code>rfind</code>, but accepts and returns raw pointers.\nLike <code>rfind</code>, but accepts and returns raw pointers.\nA “packed pair” finder that uses 128-bit vector …\nExecute a search using SSE2 vectors and routines.\nRun this finder on the given haystack as a prefilter.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true when this implementation is available in the …\nReturns the minimum haystack length that this <code>Finder</code> can …\nCreate a new pair searcher. The searcher returned can …\nReturns the pair of offsets (into the needle) used to …\nCreate a new “packed pair” finder using the pair of …\nAutomatically detect whether a heuristic prefilter should …\nAn iterator over non-overlapping substring matches.\nAn iterator over non-overlapping substring matches in …\nA single substring searcher fixed to a particular needle.\nA builder for constructing non-default forward or reverse …\nA single substring reverse searcher fixed to a particular …\nNever used a prefilter in substring search.\nPrefilter controls whether heuristics are used to …\nConvert this finder into its borrowed variant.\nConvert this finder into its borrowed variant.\nBuild a forward finder using the given needle from the …\nBuild a forward finder using the given needle and a custom …\nBuild a reverse finder using the given needle from the …\nReturns the index of the first occurrence of the given …\nReturns the index of the first occurrence of this needle …\nReturns an iterator over all non-overlapping occurrences …\nReturns an iterator over all occurrences of a substring in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this iterator into its owned variant, such that it …\nConvert this iterator into its owned variant, such that it …\nConvert this finder into its owned variant, such that it …\nConvert this finder into its owned variant, such that it …\nReturns the needle that this finder searches for.\nReturns the needle that this finder searches for.\nCreate a new finder for the given needle.\nCreate a new reverse finder for the given needle.\nCreate a new finder builder with default settings.\nConfigure the prefilter setting for the finder.\nReturns the index of the last occurrence of the given …\nReturns the index of the last occurrence of this needle in …\nReturns a reverse iterator over all non-overlapping …\nReturns a reverse iterator over all occurrences of a …")