searchState.loadedDescShard("smallvec", 0, "Small vectors in various sizes. These store a certain …\nThe allocator return an error\nTypes that can be used as the backing store for a <code>SmallVec</code>.\nOverflow <code>usize::MAX</code> or other error during size computation\nError type for APIs with fallible heap allocation\nAn iterator that removes the items from a <code>SmallVec</code> and …\nAn iterator that consumes a <code>SmallVec</code> and yields its items …\nThe type of the array’s elements.\nA <code>Vec</code>-like container that can store a small number of …\nConvenience trait for constructing a <code>SmallVec</code>\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the vector’s buffer.\nExtracts a mutable slice of the entire vector.\nReturns the remaining items of this iterator as a mutable …\nReturns a raw pointer to the vector’s buffer.\nExtracts a slice containing the entire vector.\nReturns the remaining items of this iterator as a slice.\nThe number of items the vector can hold without …\nRemove all elements from the vector.\nRemoves consecutive duplicate elements.\nRemoves consecutive duplicate elements using the given …\nRemoves consecutive elements that map to the same key.\nCreates a draining iterator that removes the specified …\nCopy elements from a slice and append them to the vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nCreates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.\nCreates a <code>SmallVec</code> directly from the raw components of …\nCopy the elements from a slice into a new <code>SmallVec</code>.\nConstruct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.\nRe-allocate to set the capacity to …\nThe maximum number of elements this vector can hold inline\nInsert an element at position <code>index</code>, shifting all elements …\nCopy elements from a slice into the vector at position …\nInsert multiple elements at position <code>index</code>, shifting all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …\nConvert the <code>SmallVec</code> into an <code>A</code> if possible. Otherwise …\nConvert a <code>SmallVec</code> to a <code>Vec</code>, without reallocating if the …\nReturns <code>true</code> if the vector is empty\nThe number of elements stored in the vector\nConstruct an empty vector\nRemove an item from the end of the vector and return it, …\nAppend an item to the vector.\nRemove and return the element at position <code>index</code>, shifting …\nReserve capacity for <code>additional</code> more elements to be …\nReserve the minimum capacity for <code>additional</code> more elements …\nResizes the vector so that its length is equal to <code>len</code>.\nResizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nSets the length of a vector.\nShrink the capacity of the vector as much as possible.\nReturns the number of items the array can hold.\nCreates a <code>SmallVec</code> containing the arguments.\nReturns <code>true</code> if the data has spilled into a separate …\nRemove the element at position <code>index</code>, replacing it with …\nConstruct a new <code>SmallVec</code> from a slice.\nShorten the vector, keeping the first <code>len</code> elements and …\nRe-allocate to set the capacity to …\nReserve capacity for <code>additional</code> more elements to be …\nReserve the minimum capacity for <code>additional</code> more elements …\nConstruct an empty vector with enough capacity …\nThe layout that was passed to the allocator")