searchState.loadedDescShard("num_integer", 0, "Integer trait and functions.\nProvides methods to compute the average of two integers, …\nGreatest common divisor and Bézout coefficients\nAn iterator over binomial coefficients.\nProvides methods to compute an integer’s square root, …\nReturns the ceiling value of the average of <code>x</code> and <code>y</code> – …\nReturns the ceiling value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>x</code> and <code>y</code> – see …\nReturns the floor value of the average of <code>self</code> and <code>other</code>. …\nCalculate the binomial coefficient.\nReturns the truncated principal cube root of an integer –\nReturns the truncated principal cube root of an integer –\nReturns the truncated principal cube root of an integer –\nDecrements self by one.\nCeiled integer division\nCeiled integer division.\nFloored integer division\nFloored integer division.\nSimultaneous floored integer division and modulus\nSimultaneous floored integer division and modulus. Returns …\nSimultaneous integer division and modulus\nSimultaneous truncated integer division and modulus. …\nDeprecated, use <code>is_multiple_of</code> instead.\nGreatest common divisor and Bézout coefficients.\nGreatest common divisor, least common multiple, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculates the Greatest Common Divisor (GCD) of the number …\nGreatest Common Divisor (GCD).\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nGreatest Common Divisor (GCD) and Lowest Common Multiple …\nIncrements self by one.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the number is even.\nReturns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is odd.\nCalculates the Lowest Common Multiple (LCM) of the number …\nLowest Common Multiple (LCM).\nFloored integer modulus\nFloored integer modulo, satisfying:\nCalculate the multinomial coefficient.\nFor a given n, iterate over all binomial coefficients …\nRounds up to nearest multiple of argument.\nReturns the truncated principal <code>n</code>th root of an integer – …\nReturns the truncated principal <code>n</code>th root of an integer – …\nRounds down to nearest multiple of argument.\nReturns the truncated principal square root of an integer …\nReturns the truncated principal square root of an integer …\nReturns the truncated principal square root of an integer …")