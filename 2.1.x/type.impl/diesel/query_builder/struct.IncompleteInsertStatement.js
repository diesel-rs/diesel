(function() {var type_impls = {
"diesel":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-IncompleteInsertStatement%3CT,+Op%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#33\">source</a><a href=\"#impl-Clone-for-IncompleteInsertStatement%3CT,+Op%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Op: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"diesel/query_builder/struct.IncompleteInsertStatement.html\" title=\"struct diesel::query_builder::IncompleteInsertStatement\">IncompleteInsertStatement</a>&lt;T, Op&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#33\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.IncompleteInsertStatement.html\" title=\"struct diesel::query_builder::IncompleteInsertStatement\">IncompleteInsertStatement</a>&lt;T, Op&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","diesel::query_builder::insert_statement::IncompleteInsertOrIgnoreStatement","diesel::query_builder::insert_statement::IncompleteReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-IncompleteInsertStatement%3CT,+Op%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#33\">source</a><a href=\"#impl-Debug-for-IncompleteInsertStatement%3CT,+Op%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, Op: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"diesel/query_builder/struct.IncompleteInsertStatement.html\" title=\"struct diesel::query_builder::IncompleteInsertStatement\">IncompleteInsertStatement</a>&lt;T, Op&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#33\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","diesel::query_builder::insert_statement::IncompleteInsertOrIgnoreStatement","diesel::query_builder::insert_statement::IncompleteReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IncompleteInsertStatement%3CT,+Op%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#53-123\">source</a><a href=\"#impl-IncompleteInsertStatement%3CT,+Op%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Op&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.IncompleteInsertStatement.html\" title=\"struct diesel::query_builder::IncompleteInsertStatement\">IncompleteInsertStatement</a>&lt;T, Op&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_values\" class=\"method\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#97-99\">source</a><h4 class=\"code-header\">pub fn <a href=\"diesel/query_builder/struct.IncompleteInsertStatement.html#tymethod.default_values\" class=\"fn\">default_values</a>(self) -&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, <a class=\"struct\" href=\"diesel/query_builder/struct.DefaultValues.html\" title=\"struct diesel::query_builder::DefaultValues\">DefaultValues</a>, Op&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts <code>DEFAULT VALUES</code> into the targeted table.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>diesel::sql_query(<span class=\"string\">\"CREATE TABLE users (\n    name VARCHAR(255) NOT NULL DEFAULT 'Sean',\n    hair_color VARCHAR(255) NOT NULL DEFAULT 'Green'\n)\"</span>).execute(connection)<span class=\"question-mark\">?</span>;\n\ninsert_into(users)\n    .default_values()\n    .execute(connection)\n    .unwrap();\n<span class=\"kw\">let </span>inserted_user = users.first(connection)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>expected_data = (String::from(<span class=\"string\">\"Sean\"</span>), String::from(<span class=\"string\">\"Green\"</span>));\n\n<span class=\"macro\">assert_eq!</span>(expected_data, inserted_user);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#112-122\">source</a><h4 class=\"code-header\">pub fn <a href=\"diesel/query_builder/struct.IncompleteInsertStatement.html#tymethod.values\" class=\"fn\">values</a>&lt;U&gt;(self, records: U) -&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U::<a class=\"associatedtype\" href=\"diesel/prelude/trait.Insertable.html#associatedtype.Values\" title=\"type diesel::prelude::Insertable::Values\">Values</a>, Op&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"diesel/prelude/trait.Insertable.html\" title=\"trait diesel::prelude::Insertable\">Insertable</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts the given values into the table passed to <code>insert_into</code>.</p>\n<p>See the documentation of <a href=\"diesel/dsl/fn.insert_into.html\" title=\"fn diesel::dsl::insert_into\"><code>insert_into</code></a> for\nusage examples.</p>\n<p>This method can sometimes produce extremely opaque error messages due to\nlimitations of the Rust language. If you receive an error about\n“overflow evaluating requirement” as a result of calling this method,\nyou may need an <code>&amp;</code> in front of the argument to this method.</p>\n</div></details></div></details>",0,"diesel::query_builder::insert_statement::IncompleteInsertOrIgnoreStatement","diesel::query_builder::insert_statement::IncompleteReplaceStatement"],["<section id=\"impl-Copy-for-IncompleteInsertStatement%3CT,+Op%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#33\">source</a><a href=\"#impl-Copy-for-IncompleteInsertStatement%3CT,+Op%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>, Op: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"diesel/query_builder/struct.IncompleteInsertStatement.html\" title=\"struct diesel::query_builder::IncompleteInsertStatement\">IncompleteInsertStatement</a>&lt;T, Op&gt;</h3></section>","Copy","diesel::query_builder::insert_statement::IncompleteInsertOrIgnoreStatement","diesel::query_builder::insert_statement::IncompleteReplaceStatement"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()