(function() {var type_impls = {
"diesel":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsQuery-for-InsertStatement%3CT,+U,+Op%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#245-256\">source</a><a href=\"#impl-AsQuery-for-InsertStatement%3CT,+U,+Op%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, Op&gt; <a class=\"trait\" href=\"diesel/query_builder/trait.AsQuery.html\" title=\"trait diesel::query_builder::AsQuery\">AsQuery</a> for <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, NoReturningClause&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"diesel/prelude/trait.Table.html\" title=\"trait diesel::prelude::Table\">Table</a>,\n    <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, <a class=\"struct\" href=\"diesel/query_builder/struct.ReturningClause.html\" title=\"struct diesel::query_builder::ReturningClause\">ReturningClause</a>&lt;T::<a class=\"associatedtype\" href=\"diesel/prelude/trait.Table.html#associatedtype.AllColumns\" title=\"type diesel::prelude::Table::AllColumns\">AllColumns</a>&gt;&gt;: <a class=\"trait\" href=\"diesel/query_builder/trait.Query.html\" title=\"trait diesel::query_builder::Query\">Query</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"diesel/query_builder/trait.AsQuery.html#associatedtype.SqlType\" class=\"associatedtype\">SqlType</a> = &lt;&lt;<a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op&gt; as <a class=\"trait\" href=\"diesel/query_builder/trait.AsQuery.html\" title=\"trait diesel::query_builder::AsQuery\">AsQuery</a>&gt;::<a class=\"associatedtype\" href=\"diesel/query_builder/trait.AsQuery.html#associatedtype.Query\" title=\"type diesel::query_builder::AsQuery::Query\">Query</a> as <a class=\"trait\" href=\"diesel/query_builder/trait.Query.html\" title=\"trait diesel::query_builder::Query\">Query</a>&gt;::<a class=\"associatedtype\" href=\"diesel/query_builder/trait.Query.html#associatedtype.SqlType\" title=\"type diesel::query_builder::Query::SqlType\">SqlType</a></h4></section></summary><div class='docblock'>The SQL type of <code>Self::Query</code></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Query\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Query\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"diesel/query_builder/trait.AsQuery.html#associatedtype.Query\" class=\"associatedtype\">Query</a> = <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, <a class=\"struct\" href=\"diesel/query_builder/struct.ReturningClause.html\" title=\"struct diesel::query_builder::ReturningClause\">ReturningClause</a>&lt;&lt;T as <a class=\"trait\" href=\"diesel/prelude/trait.Table.html\" title=\"trait diesel::prelude::Table\">Table</a>&gt;::<a class=\"associatedtype\" href=\"diesel/prelude/trait.Table.html#associatedtype.AllColumns\" title=\"type diesel::prelude::Table::AllColumns\">AllColumns</a>&gt;&gt;</h4></section></summary><div class='docblock'>What kind of query does this type represent?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_query\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#253-255\">source</a><a href=\"#method.as_query\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/query_builder/trait.AsQuery.html#tymethod.as_query\" class=\"fn\">as_query</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"diesel/query_builder/trait.AsQuery.html#associatedtype.Query\" title=\"type diesel::query_builder::AsQuery::Query\">Query</a></h4></section></summary><div class='docblock'>Converts a type which semantically represents a SQL query into the\nactual query being executed. See the trait level docs for more.</div></details></div></details>","AsQuery","diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#141\">source</a><a href=\"#impl-Clone-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>, U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Op: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Ret: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, Ret&gt;<div class=\"where\">where\n    T::<a class=\"associatedtype\" href=\"diesel/prelude/trait.QuerySource.html#associatedtype.FromClause\" title=\"type diesel::prelude::QuerySource::FromClause\">FromClause</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#141\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, Ret&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#141\">source</a><a href=\"#impl-Debug-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>, U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, Op: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, Ret: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, Ret&gt;<div class=\"where\">where\n    T::<a class=\"associatedtype\" href=\"diesel/prelude/trait.QuerySource.html#associatedtype.FromClause\" title=\"type diesel::prelude::QuerySource::FromClause\">FromClause</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#141\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExecuteDsl%3CC,+Sqlite%3E-for-InsertStatement%3CT,+BatchInsert%3CVec%3CValuesClause%3CV,+T%3E%3E,+T,+QId,+STATIC_QUERY_ID%3E,+Op%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/insert_with_default_for_sqlite.rs.html#216-228\">source</a><a href=\"#impl-ExecuteDsl%3CC,+Sqlite%3E-for-InsertStatement%3CT,+BatchInsert%3CVec%3CValuesClause%3CV,+T%3E%3E,+T,+QId,+STATIC_QUERY_ID%3E,+Op%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V, T, QId, C, Op, O, const STATIC_QUERY_ID: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"diesel/query_dsl/methods/trait.ExecuteDsl.html\" title=\"trait diesel::query_dsl::methods::ExecuteDsl\">ExecuteDsl</a>&lt;C, <a class=\"struct\" href=\"diesel/sqlite/struct.Sqlite.html\" title=\"struct diesel::sqlite::Sqlite\">Sqlite</a>&gt; for <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, <a class=\"struct\" href=\"diesel/query_builder/struct.BatchInsert.html\" title=\"struct diesel::query_builder::BatchInsert\">BatchInsert</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"diesel/query_builder/struct.ValuesClause.html\" title=\"struct diesel::query_builder::ValuesClause\">ValuesClause</a>&lt;V, T&gt;&gt;, T, QId, STATIC_QUERY_ID&gt;, Op&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>,\n    C: <a class=\"trait\" href=\"diesel/prelude/trait.Connection.html\" title=\"trait diesel::prelude::Connection\">Connection</a>&lt;Backend = <a class=\"struct\" href=\"diesel/sqlite/struct.Sqlite.html\" title=\"struct diesel::sqlite::Sqlite\">Sqlite</a>&gt;,\n    V: ContainsDefaultableValue&lt;Out = O&gt;,\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(O, Self)</a>: <a class=\"trait\" href=\"diesel/query_dsl/methods/trait.ExecuteDsl.html\" title=\"trait diesel::query_dsl::methods::ExecuteDsl\">ExecuteDsl</a>&lt;C, <a class=\"struct\" href=\"diesel/sqlite/struct.Sqlite.html\" title=\"struct diesel::sqlite::Sqlite\">Sqlite</a>&gt;,</div></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>sqlite</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.execute\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/insert_with_default_for_sqlite.rs.html#225-227\">source</a><a href=\"#method.execute\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/query_dsl/methods/trait.ExecuteDsl.html#tymethod.execute\" class=\"fn\">execute</a>(query: Self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut C</a>) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Execute this command</div></details></div></details>","ExecuteDsl<C, Sqlite>","diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InsertStatement%3CT,+InsertFromSelect%3CU,+C%3E,+Op,+Ret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#195-216\">source</a><a href=\"#impl-InsertStatement%3CT,+InsertFromSelect%3CU,+C%3E,+Op,+Ret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>, U, C, Op, Ret&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, InsertFromSelect&lt;U, C&gt;, Op, Ret&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_columns\" class=\"method\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#201-215\">source</a><h4 class=\"code-header\">pub fn <a href=\"diesel/query_builder/struct.InsertStatement.html#tymethod.into_columns\" class=\"fn\">into_columns</a>&lt;C2&gt;(\n    self,\n    columns: C2\n) -&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, InsertFromSelect&lt;U, C2&gt;, Op, Ret&gt;<div class=\"where\">where\n    C2: ColumnList&lt;Table = T&gt; + <a class=\"trait\" href=\"diesel/prelude/trait.Expression.html\" title=\"trait diesel::prelude::Expression\">Expression</a>,\n    U: <a class=\"trait\" href=\"diesel/query_builder/trait.Query.html\" title=\"trait diesel::query_builder::Query\">Query</a>&lt;SqlType = C2::<a class=\"associatedtype\" href=\"diesel/prelude/trait.Expression.html#associatedtype.SqlType\" title=\"type diesel::prelude::Expression::SqlType\">SqlType</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Set the column list when inserting from a select statement</p>\n<p>See the documentation for <a href=\"diesel/dsl/fn.insert_into.html\" title=\"fn diesel::dsl::insert_into\"><code>insert_into</code></a> for usage examples.</p>\n</div></details></div></details>",0,"diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InsertStatement%3CT,+U,+Op%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#268-301\">source</a><a href=\"#impl-InsertStatement%3CT,+U,+Op%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>, U, Op&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.returning\" class=\"method\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#290-300\">source</a><h4 class=\"code-header\">pub fn <a href=\"diesel/query_builder/struct.InsertStatement.html#tymethod.returning\" class=\"fn\">returning</a>&lt;E&gt;(\n    self,\n    returns: E\n) -&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, <a class=\"struct\" href=\"diesel/query_builder/struct.ReturningClause.html\" title=\"struct diesel::query_builder::ReturningClause\">ReturningClause</a>&lt;E&gt;&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, <a class=\"struct\" href=\"diesel/query_builder/struct.ReturningClause.html\" title=\"struct diesel::query_builder::ReturningClause\">ReturningClause</a>&lt;E&gt;&gt;: <a class=\"trait\" href=\"diesel/query_builder/trait.Query.html\" title=\"trait diesel::query_builder::Query\">Query</a>,</div></h4></section></summary><div class=\"docblock\"><p>Specify what expression is returned after execution of the <code>insert</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5><h6 id=\"inserting-records\"><a class=\"doc-anchor\" href=\"#inserting-records\">§</a>Inserting records:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>inserted_names = diesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[name.eq(<span class=\"string\">\"Timmy\"</span>), name.eq(<span class=\"string\">\"Jimmy\"</span>)])\n    .returning(name)\n    .get_results(connection);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"macro\">vec!</span>[<span class=\"string\">\"Timmy\"</span>.to_string(), <span class=\"string\">\"Jimmy\"</span>.to_string()]), inserted_names);</code></pre></div>\n</div></details></div></details>",0,"diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#172-193\">source</a><a href=\"#impl-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>, U, Op, Ret&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, Ret&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#174-176\">source</a><h4 class=\"code-header\">pub fn <a href=\"diesel/query_builder/struct.InsertStatement.html#tymethod.new\" class=\"fn\">new</a>(target: T, records: U, operator: Op, returning: Ret) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>i-implement-a-third-party-backend-and-opt-into-breaking-changes</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Create a new InsertStatement instance</p>\n</div></details></div></details>",0,"diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/upsert/on_conflict_extension.rs.html#14-313\">source</a><a href=\"#impl-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, Op, Ret&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, Ret&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>,\n    U: <a class=\"trait\" href=\"diesel/query_builder/trait.UndecoratedInsertRecord.html\" title=\"trait diesel::query_builder::UndecoratedInsertRecord\">UndecoratedInsertRecord</a>&lt;T&gt; + IntoConflictValueClause,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_conflict_do_nothing\" class=\"method\"><a class=\"src rightside\" href=\"src/diesel/upsert/on_conflict_extension.rs.html#92-97\">source</a><h4 class=\"code-header\">pub fn <a href=\"diesel/query_builder/struct.InsertStatement.html#tymethod.on_conflict_do_nothing\" class=\"fn\">on_conflict_do_nothing</a>(\n    self\n) -&gt; <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, OnConflictValues&lt;U::ValueClause, NoConflictTarget, DoNothing&lt;T&gt;&gt;, Op, Ret&gt;</h4></section></summary><div class=\"docblock\"><p>Adds <code>ON CONFLICT DO NOTHING</code> to the insert statement, without\nspecifying any columns or constraints to restrict the conflict to.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5><h6 id=\"single-record\"><a class=\"doc-anchor\" href=\"#single-record\">§</a>Single Record</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>user = User { id: <span class=\"number\">1</span>, name: <span class=\"string\">\"Sean\" </span>};\n\n<span class=\"kw\">let </span>user_count = users.count().get_result::&lt;i64&gt;(conn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(user_count, <span class=\"number\">0</span>);\n\ndiesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span>user)\n    .on_conflict_do_nothing()\n    .execute(conn)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>user_count = users.count().get_result::&lt;i64&gt;(conn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(user_count, <span class=\"number\">1</span>);\n\ndiesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span>user)\n    .on_conflict_do_nothing()\n    .execute(conn)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>user_count = users.count().get_result::&lt;i64&gt;(conn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(user_count, <span class=\"number\">1</span>);</code></pre></div>\n<h6 id=\"vec-of-records\"><a class=\"doc-anchor\" href=\"#vec-of-records\">§</a>Vec of Records</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>user = User { id: <span class=\"number\">1</span>, name: <span class=\"string\">\"Sean\" </span>};\n\n<span class=\"kw\">let </span>inserted_row_count = diesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[user, user])\n    .on_conflict_do_nothing()\n    .execute(conn)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>user_count = users.count().get_result::&lt;i64&gt;(conn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(user_count, <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_conflict\" class=\"method\"><a class=\"src rightside\" href=\"src/diesel/upsert/on_conflict_extension.rs.html#301-312\">source</a><h4 class=\"code-header\">pub fn <a href=\"diesel/query_builder/struct.InsertStatement.html#tymethod.on_conflict\" class=\"fn\">on_conflict</a>&lt;Target&gt;(\n    self,\n    target: Target\n) -&gt; <a class=\"struct\" href=\"diesel/upsert/struct.IncompleteOnConflict.html\" title=\"struct diesel::upsert::IncompleteOnConflict\">IncompleteOnConflict</a>&lt;<a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U::ValueClause, Op, Ret&gt;, ConflictTarget&lt;Target&gt;&gt;<div class=\"where\">where\n    ConflictTarget&lt;Target&gt;: OnConflictTarget&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Adds an <code>ON CONFLICT</code> to the insert statement, if a conflict occurs\nfor the given unique constraint.</p>\n<p><code>Target</code> can be one of:</p>\n<ul>\n<li>A column</li>\n<li>A tuple of columns</li>\n<li><a href=\"../upsert/fn.on_constraint.html\"><code>on_constraint(&quot;constraint_name&quot;)</code></a></li>\n</ul>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5><h6 id=\"specifying-a-column-as-the-target\"><a class=\"doc-anchor\" href=\"#specifying-a-column-as-the-target\">§</a>Specifying a column as the target</h6>\n<p>This is supported by sqlite and postgres only</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>diesel::upsert::<span class=\"kw-2\">*</span>;\n\ndiesel::sql_query(<span class=\"string\">\"CREATE UNIQUE INDEX users_name ON users (name)\"</span>).execute(conn).unwrap();\n<span class=\"kw\">let </span>user = User { id: <span class=\"number\">1</span>, name: <span class=\"string\">\"Sean\" </span>};\n<span class=\"kw\">let </span>same_name_different_id = User { id: <span class=\"number\">2</span>, name: <span class=\"string\">\"Sean\" </span>};\n<span class=\"kw\">let </span>same_id_different_name = User { id: <span class=\"number\">1</span>, name: <span class=\"string\">\"Pascal\" </span>};\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>), diesel::insert_into(users).values(<span class=\"kw-2\">&amp;</span>user).execute(conn));\n\n<span class=\"kw\">let </span>query = diesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span>same_id_different_name)\n    .on_conflict(id)\n    .do_nothing()\n    .execute(conn)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>user_names = users.select(name).load::&lt;String&gt;(conn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(user_names, <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"Sean\"</span>)]);\n\n<span class=\"kw\">let </span>idx_conflict_result = diesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span>same_name_different_id)\n    .on_conflict(id)\n    .do_nothing()\n    .execute(conn);\n<span class=\"macro\">assert!</span>(idx_conflict_result.is_err());\n<span class=\"attr\">#[cfg(feature = <span class=\"string\">\"mysql\"</span>)]\n</span><span class=\"kw\">fn </span>run_test() -&gt; diesel::QueryResult&lt;()&gt; { <span class=\"prelude-val\">Ok</span>(()) }</code></pre></div>\n<h6 id=\"specifying-multiple-columns-as-the-target\"><a class=\"doc-anchor\" href=\"#specifying-multiple-columns-as-the-target\">§</a>Specifying multiple columns as the target</h6>\n<p>This is supported by sqlite and postgres only</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>diesel::upsert::<span class=\"kw-2\">*</span>;\n\ndiesel::sql_query(<span class=\"string\">\"CREATE UNIQUE INDEX users_name_hair_color ON users (name, hair_color)\"</span>).execute(conn).unwrap();\n<span class=\"kw\">let </span>user = User { id: <span class=\"number\">1</span>, name: <span class=\"string\">\"Sean\"</span>, hair_color: <span class=\"string\">\"black\" </span>};\n<span class=\"kw\">let </span>same_name_different_hair_color = User { id: <span class=\"number\">2</span>, name: <span class=\"string\">\"Sean\"</span>, hair_color: <span class=\"string\">\"brown\" </span>};\n<span class=\"kw\">let </span>same_name_same_hair_color = User { id: <span class=\"number\">3</span>, name: <span class=\"string\">\"Sean\"</span>, hair_color: <span class=\"string\">\"black\" </span>};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>), diesel::insert_into(users).values(<span class=\"kw-2\">&amp;</span>user).execute(conn));\n\n<span class=\"kw\">let </span>inserted_row_count = diesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span>same_name_different_hair_color)\n    .on_conflict((name, hair_color))\n    .do_nothing()\n    .execute(conn);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>), inserted_row_count);\n\n<span class=\"kw\">let </span>inserted_row_count = diesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span>same_name_same_hair_color)\n    .on_conflict((name, hair_color))\n    .do_nothing()\n    .execute(conn);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">0</span>), inserted_row_count);\n\n<span class=\"attr\">#[cfg(feature = <span class=\"string\">\"mysql\"</span>)]\n</span><span class=\"kw\">fn </span>main() {}</code></pre></div>\n<h6 id=\"on-duplicate-key\"><a class=\"doc-anchor\" href=\"#on-duplicate-key\">§</a>ON DUPLICATE KEY</h6>\n<p>Mysql supports only catching all duplicated keys at once:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>diesel::upsert::<span class=\"kw-2\">*</span>;\n\ndiesel::sql_query(<span class=\"string\">\"CREATE UNIQUE INDEX users_name ON users (name)\"</span>).execute(conn).unwrap();\n<span class=\"kw\">let </span>user = User { id: <span class=\"number\">1</span>, name: <span class=\"string\">\"Sean\" </span>};\n<span class=\"kw\">let </span>same_name_different_id = User { id: <span class=\"number\">2</span>, name: <span class=\"string\">\"Sean\" </span>};\n<span class=\"kw\">let </span>same_id_different_name = User { id: <span class=\"number\">1</span>, name: <span class=\"string\">\"Pascal\" </span>};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>), diesel::insert_into(users).values(<span class=\"kw-2\">&amp;</span>user).execute(conn));\n\n<span class=\"kw\">let </span>user_names = users.select(name).load::&lt;String&gt;(conn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(user_names, <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"Sean\"</span>)]);\n\n<span class=\"kw\">let </span>query = diesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span>same_id_different_name)\n    .on_conflict(diesel::dsl::DuplicatedKeys)\n    .do_nothing()\n    .execute(conn)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>user_names = users.select(name).load::&lt;String&gt;(conn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(user_names, <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"Sean\"</span>)]);\n\n<span class=\"kw\">let </span>idx_conflict_result = diesel::insert_into(users)\n    .values(<span class=\"kw-2\">&amp;</span>same_name_different_id)\n    .on_conflict(diesel::dsl::DuplicatedKeys)\n    .do_nothing()\n    .execute(conn)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>user_names = users.select(name).load::&lt;String&gt;(conn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(user_names, <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"Sean\"</span>)]);\n<span class=\"attr\">#[cfg(not(feature = <span class=\"string\">\"mysql\"</span>))]\n</span><span class=\"kw\">fn </span>run_test() -&gt; diesel::QueryResult&lt;()&gt; {<span class=\"prelude-val\">Ok</span>(())}</code></pre></div>\n<p>See the documentation for <a href=\"../upsert/fn.on_constraint.html\"><code>on_constraint</code></a> and <a href=\"diesel/upsert/struct.IncompleteOnConflict.html#method.do_update\" title=\"method diesel::upsert::IncompleteOnConflict::do_update\"><code>do_update</code></a> for\nmore examples.</p>\n</div></details></div></details>",0,"diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Query-for-InsertStatement%3CT,+U,+Op,+ReturningClause%3CRet%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#258-264\">source</a><a href=\"#impl-Query-for-InsertStatement%3CT,+U,+Op,+ReturningClause%3CRet%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, Op, Ret&gt; <a class=\"trait\" href=\"diesel/query_builder/trait.Query.html\" title=\"trait diesel::query_builder::Query\">Query</a> for <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, <a class=\"struct\" href=\"diesel/query_builder/struct.ReturningClause.html\" title=\"struct diesel::query_builder::ReturningClause\">ReturningClause</a>&lt;Ret&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>,\n    Ret: <a class=\"trait\" href=\"diesel/prelude/trait.Expression.html\" title=\"trait diesel::prelude::Expression\">Expression</a> + <a class=\"trait\" href=\"diesel/prelude/trait.SelectableExpression.html\" title=\"trait diesel::prelude::SelectableExpression\">SelectableExpression</a>&lt;T&gt; + <a class=\"trait\" href=\"diesel/expression/trait.NonAggregate.html\" title=\"trait diesel::expression::NonAggregate\">NonAggregate</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SqlType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqlType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"diesel/query_builder/trait.Query.html#associatedtype.SqlType\" class=\"associatedtype\">SqlType</a> = &lt;Ret as <a class=\"trait\" href=\"diesel/prelude/trait.Expression.html\" title=\"trait diesel::prelude::Expression\">Expression</a>&gt;::<a class=\"associatedtype\" href=\"diesel/prelude/trait.Expression.html#associatedtype.SqlType\" title=\"type diesel::prelude::Expression::SqlType\">SqlType</a></h4></section></summary><div class='docblock'>The SQL type that this query represents. <a href=\"diesel/query_builder/trait.Query.html#associatedtype.SqlType\">Read more</a></div></details></div></details>","Query","diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryFragment%3CDB%3E-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#218-243\">source</a><a href=\"#impl-QueryFragment%3CDB%3E-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, Op, Ret, DB&gt; <a class=\"trait\" href=\"diesel/query_builder/trait.QueryFragment.html\" title=\"trait diesel::query_builder::QueryFragment\">QueryFragment</a>&lt;DB&gt; for <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, Ret&gt;<div class=\"where\">where\n    DB: <a class=\"trait\" href=\"diesel/backend/trait.Backend.html\" title=\"trait diesel::backend::Backend\">Backend</a> + <a class=\"trait\" href=\"diesel/backend/trait.DieselReserveSpecialization.html\" title=\"trait diesel::backend::DieselReserveSpecialization\">DieselReserveSpecialization</a>,\n    T: <a class=\"trait\" href=\"diesel/prelude/trait.Table.html\" title=\"trait diesel::prelude::Table\">Table</a>,\n    T::<a class=\"associatedtype\" href=\"diesel/prelude/trait.QuerySource.html#associatedtype.FromClause\" title=\"type diesel::prelude::QuerySource::FromClause\">FromClause</a>: <a class=\"trait\" href=\"diesel/query_builder/trait.QueryFragment.html\" title=\"trait diesel::query_builder::QueryFragment\">QueryFragment</a>&lt;DB&gt;,\n    U: <a class=\"trait\" href=\"diesel/query_builder/trait.QueryFragment.html\" title=\"trait diesel::query_builder::QueryFragment\">QueryFragment</a>&lt;DB&gt; + CanInsertInSingleQuery&lt;DB&gt;,\n    Op: <a class=\"trait\" href=\"diesel/query_builder/trait.QueryFragment.html\" title=\"trait diesel::query_builder::QueryFragment\">QueryFragment</a>&lt;DB&gt;,\n    Ret: <a class=\"trait\" href=\"diesel/query_builder/trait.QueryFragment.html\" title=\"trait diesel::query_builder::QueryFragment\">QueryFragment</a>&lt;DB&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_ast\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#227-242\">source</a><a href=\"#method.walk_ast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/query_builder/trait.QueryFragment.html#tymethod.walk_ast\" class=\"fn\">walk_ast</a>&lt;'b&gt;(&amp;'b self, out: <a class=\"struct\" href=\"diesel/query_builder/struct.AstPass.html\" title=\"struct diesel::query_builder::AstPass\">AstPass</a>&lt;'_, 'b, DB&gt;) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Walk over this <code>QueryFragment</code> for all passes. <a href=\"diesel/query_builder/trait.QueryFragment.html#tymethod.walk_ast\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/mod.rs.html#220-223\">source</a><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/query_builder/trait.QueryFragment.html#method.to_sql\" class=\"fn\">to_sql</a>(&amp;self, out: &amp;mut DB::<a class=\"associatedtype\" href=\"diesel/backend/trait.Backend.html#associatedtype.QueryBuilder\" title=\"type diesel::backend::Backend::QueryBuilder\">QueryBuilder</a>, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>i-implement-a-third-party-backend-and-opt-into-breaking-changes</code></strong> only.</div></span><div class='docblock'>Converts this <code>QueryFragment</code> to its SQL representation. <a href=\"diesel/query_builder/trait.QueryFragment.html#method.to_sql\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_binds\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/mod.rs.html#234-241\">source</a><a href=\"#method.collect_binds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/query_builder/trait.QueryFragment.html#method.collect_binds\" class=\"fn\">collect_binds</a>&lt;'b&gt;(\n    &amp;'b self,\n    out: &amp;mut DB::<a class=\"associatedtype\" href=\"diesel/backend/trait.Backend.html#associatedtype.BindCollector\" title=\"type diesel::backend::Backend::BindCollector\">BindCollector</a>&lt;'b&gt;,\n    metadata_lookup: &amp;mut DB::<a class=\"associatedtype\" href=\"diesel/sql_types/trait.TypeMetadata.html#associatedtype.MetadataLookup\" title=\"type diesel::sql_types::TypeMetadata::MetadataLookup\">MetadataLookup</a>,\n    backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'b DB</a>\n) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>i-implement-a-third-party-backend-and-opt-into-breaking-changes</code></strong> only.</div></span><div class='docblock'>Serializes all bind parameters in this query. <a href=\"diesel/query_builder/trait.QueryFragment.html#method.collect_binds\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_safe_to_cache_prepared\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/mod.rs.html#261-265\">source</a><a href=\"#method.is_safe_to_cache_prepared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/query_builder/trait.QueryFragment.html#method.is_safe_to_cache_prepared\" class=\"fn\">is_safe_to_cache_prepared</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>i-implement-a-third-party-backend-and-opt-into-breaking-changes</code></strong> only.</div></span><div class='docblock'>Is this query safe to store in the prepared statement cache? <a href=\"diesel/query_builder/trait.QueryFragment.html#method.is_safe_to_cache_prepared\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_noop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/mod.rs.html#271-275\">source</a><a href=\"#method.is_noop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/query_builder/trait.QueryFragment.html#method.is_noop\" class=\"fn\">is_noop</a>(&amp;self, backend: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;DB</a>) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>i-implement-a-third-party-backend-and-opt-into-breaking-changes</code></strong> only.</div></span><div class='docblock'>Does walking this AST have any effect?</div></details></div></details>","QueryFragment<DB>","diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-QueryId-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#157-170\">source</a><a href=\"#impl-QueryId-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, Op, Ret&gt; <a class=\"trait\" href=\"diesel/query_builder/trait.QueryId.html\" title=\"trait diesel::query_builder::QueryId\">QueryId</a> for <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, Ret&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a> + <a class=\"trait\" href=\"diesel/query_builder/trait.QueryId.html\" title=\"trait diesel::query_builder::QueryId\">QueryId</a> + 'static,\n    U: <a class=\"trait\" href=\"diesel/query_builder/trait.QueryId.html\" title=\"trait diesel::query_builder::QueryId\">QueryId</a>,\n    Op: <a class=\"trait\" href=\"diesel/query_builder/trait.QueryId.html\" title=\"trait diesel::query_builder::QueryId\">QueryId</a>,\n    Ret: <a class=\"trait\" href=\"diesel/query_builder/trait.QueryId.html\" title=\"trait diesel::query_builder::QueryId\">QueryId</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.QueryId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.QueryId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"diesel/query_builder/trait.QueryId.html#associatedtype.QueryId\" class=\"associatedtype\">QueryId</a> = <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, &lt;U as <a class=\"trait\" href=\"diesel/query_builder/trait.QueryId.html\" title=\"trait diesel::query_builder::QueryId\">QueryId</a>&gt;::<a class=\"associatedtype\" href=\"diesel/query_builder/trait.QueryId.html#associatedtype.QueryId\" title=\"type diesel::query_builder::QueryId::QueryId\">QueryId</a>, &lt;Op as <a class=\"trait\" href=\"diesel/query_builder/trait.QueryId.html\" title=\"trait diesel::query_builder::QueryId\">QueryId</a>&gt;::<a class=\"associatedtype\" href=\"diesel/query_builder/trait.QueryId.html#associatedtype.QueryId\" title=\"type diesel::query_builder::QueryId::QueryId\">QueryId</a>, &lt;Ret as <a class=\"trait\" href=\"diesel/query_builder/trait.QueryId.html\" title=\"trait diesel::query_builder::QueryId\">QueryId</a>&gt;::<a class=\"associatedtype\" href=\"diesel/query_builder/trait.QueryId.html#associatedtype.QueryId\" title=\"type diesel::query_builder::QueryId::QueryId\">QueryId</a>&gt;</h4></section></summary><div class='docblock'>A type which uniquely represents <code>Self</code> in a SQL query. <a href=\"diesel/query_builder/trait.QueryId.html#associatedtype.QueryId\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_STATIC_QUERY_ID\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#166-169\">source</a><a href=\"#associatedconstant.HAS_STATIC_QUERY_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"diesel/query_builder/trait.QueryId.html#associatedconstant.HAS_STATIC_QUERY_ID\" class=\"constant\">HAS_STATIC_QUERY_ID</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = _</h4></section></summary><div class='docblock'>Can the SQL generated by <code>Self</code> be uniquely identified by its type? <a href=\"diesel/query_builder/trait.QueryId.html#associatedconstant.HAS_STATIC_QUERY_ID\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/query_id.rs.html#59-65\">source</a><a href=\"#method.query_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/query_builder/trait.QueryId.html#method.query_id\" class=\"fn\">query_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the type id of <code>Self::QueryId</code> if <code>Self::HAS_STATIC_QUERY_ID</code>.\nReturns <code>None</code> otherwise. <a href=\"diesel/query_builder/trait.QueryId.html#method.query_id\">Read more</a></div></details></div></details>","QueryId","diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RunQueryDsl%3CConn%3E-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#266\">source</a><a href=\"#impl-RunQueryDsl%3CConn%3E-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>, U, Op, Ret, Conn&gt; <a class=\"trait\" href=\"diesel/prelude/trait.RunQueryDsl.html\" title=\"trait diesel::prelude::RunQueryDsl\">RunQueryDsl</a>&lt;Conn&gt; for <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, Ret&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_dsl/mod.rs.html#1540-1545\">source</a><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/prelude/trait.RunQueryDsl.html#method.load\" class=\"fn\">load</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"diesel/query_dsl/methods/trait.LoadQuery.html\" title=\"trait diesel::query_dsl::methods::LoadQuery\">LoadQuery</a>&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Executes the given query, returning a <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> with the returned rows. <a href=\"diesel/prelude/trait.RunQueryDsl.html#method.load\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_dsl/mod.rs.html#1664-1673\">source</a><a href=\"#method.load_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/prelude/trait.RunQueryDsl.html#method.load_iter\" class=\"fn\">load_iter</a>&lt;'conn, 'query: 'conn, U, B&gt;(\n    self,\n    conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'conn mut Conn</a>\n) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;Self::<a class=\"associatedtype\" href=\"diesel/query_dsl/methods/trait.LoadQuery.html#associatedtype.RowIter\" title=\"type diesel::query_dsl::methods::LoadQuery::RowIter\">RowIter</a>&lt;'conn&gt;&gt;<div class=\"where\">where\n    U: 'conn,\n    Self: <a class=\"trait\" href=\"diesel/query_dsl/methods/trait.LoadQuery.html\" title=\"trait diesel::query_dsl::methods::LoadQuery\">LoadQuery</a>&lt;'query, Conn, U, B&gt; + 'conn,</div></h4></section></summary><div class='docblock'>Executes the given query, returning an <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> with the returned rows. <a href=\"diesel/prelude/trait.RunQueryDsl.html#method.load_iter\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_result\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_dsl/mod.rs.html#1720-1728\">source</a><a href=\"#method.get_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/prelude/trait.RunQueryDsl.html#method.get_result\" class=\"fn\">get_result</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;U&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"diesel/query_dsl/methods/trait.LoadQuery.html\" title=\"trait diesel::query_dsl::methods::LoadQuery\">LoadQuery</a>&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, and returns the affected row. <a href=\"diesel/prelude/trait.RunQueryDsl.html#method.get_result\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_results\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/diesel/query_dsl/mod.rs.html#1736-1741\">source</a><a href=\"#method.get_results\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"diesel/prelude/trait.RunQueryDsl.html#method.get_results\" class=\"fn\">get_results</a>&lt;'query, U&gt;(self, conn: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Conn</a>) -&gt; <a class=\"type\" href=\"diesel/prelude/type.QueryResult.html\" title=\"type diesel::prelude::QueryResult\">QueryResult</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"diesel/query_dsl/methods/trait.LoadQuery.html\" title=\"trait diesel::query_dsl::methods::LoadQuery\">LoadQuery</a>&lt;'query, Conn, U&gt;,</div></h4></section></summary><div class='docblock'>Runs the command, returning an <code>Vec</code> with the affected rows. <a href=\"diesel/prelude/trait.RunQueryDsl.html#method.get_results\">Read more</a></div></details></div></details>","RunQueryDsl<Conn>","diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"],["<section id=\"impl-Copy-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/diesel/query_builder/insert_statement/mod.rs.html#141\">source</a><a href=\"#impl-Copy-for-InsertStatement%3CT,+U,+Op,+Ret%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"diesel/prelude/trait.QuerySource.html\" title=\"trait diesel::prelude::QuerySource\">QuerySource</a>, U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>, Op: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>, Ret: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"diesel/query_builder/struct.InsertStatement.html\" title=\"struct diesel::query_builder::InsertStatement\">InsertStatement</a>&lt;T, U, Op, Ret&gt;<div class=\"where\">where\n    T::<a class=\"associatedtype\" href=\"diesel/prelude/trait.QuerySource.html#associatedtype.FromClause\" title=\"type diesel::prelude::QuerySource::FromClause\">FromClause</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","diesel::query_builder::insert_statement::InsertOrIgnoreStatement","diesel::query_builder::insert_statement::ReplaceStatement"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()