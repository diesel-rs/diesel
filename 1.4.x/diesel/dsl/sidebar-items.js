initSidebarItems({"fn":[["avg","Represents a SQL `AVG` function. This function can only take types which are Foldable."],["count","Creates a SQL `COUNT` expression"],["count_star","Creates a SQL `COUNT(*)` expression"],["date","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date."],["delete","Creates a `DELETE` statement."],["exists","Creates a SQL `EXISTS` expression."],["insert_into","Creates an `INSERT` statement for the target table."],["insert_or_ignore_into","Creates an `INSERT [OR] IGNORE` statement."],["max","Represents a SQL `MAX` function. This function can only take types which are ordered."],["min","Represents a SQL `MIN` function. This function can only take types which are ordered."],["not","Creates a SQL `NOT` expression"],["replace_into","Creates a `REPLACE` statement."],["select","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere."],["sql","Use literal SQL in the query builder"],["sql_query","Construct a full SQL query using raw SQL."],["sum","Represents a SQL `SUM` function. This function can only take types which are Foldable."],["update","Creates an `UPDATE` statement."]],"struct":[["now","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it."]],"type":[["And","The return type of `lhs.and(rhs)`"],["AsExpr","The type of `Item` when converted to an expression with the same type as `TargetExpr`"],["AsExprOf","The type of `Item` when converted to an expression of `Type`"],["Asc","The return type of `expr.asc()`"],["Between","The return type of `lhs.between(lower, upper)`"],["Desc","The return type of `expr.desc()`"],["Distinct","Represents the return type of `.distinct()`"],["DistinctOn","Represents the return type of `.distinct_on(expr)`"],["Eq","The return type of `lhs.eq(rhs)`"],["EqAny","The return type of `lhs.eq_any(rhs)`"],["Escape","The return type of `lhs.escape('x')`"],["Filter","Represents the return type of `.filter(predicate)`"],["Find","Represents the return type of `.find(pk)`"],["FindBy","Represents the return type of `.filter(lhs.eq(rhs))`"],["ForKeyShare","Represents the return type of `.for_key_share()`"],["ForNoKeyUpdate","Represents the return type of `.for_no_key_update()`"],["ForShare","Represents the return type of `.for_share()`"],["ForUpdate","Represents the return type of `.for_update()`"],["Gt","The return type of `lhs.gt(rhs)`"],["GtEq","The return type of `lhs.ge(rhs)`"],["InnerJoin","Represents the return type of `.inner_join(rhs)`"],["IntoBoxed","Represents the return type of `.into_boxed::<'a, DB>()`"],["IsNotNull","The return type of `expr.is_not_null()`"],["IsNull","The return type of `expr.is_null()`"],["LeftJoin","Represents the return type of `.left_join(rhs)`"],["Like","The return type of `lhs.like(rhs)`"],["Limit","Represents the return type of `.limit()`"],["Lt","The return type of `lhs.lt(rhs)`"],["LtEq","The return type of `lhs.le(rhs)`"],["NeAny","The return type of `lhs.ne_any(rhs)`"],["NoWait","Represents the return type of `.no_wait()`"],["Not","The return type of `not(expr)`"],["NotBetween","The return type of `lhs.not_between(lower, upper)`"],["NotEq","The return type of `lhs.ne(rhs)`"],["NotLike","The return type of `lhs.not_like(rhs)`"],["Nullable","The return type of `expr.nullable()`"],["NullableSelect","Represents the return type of `.nullable()`"],["Offset","Represents the return type of `.offset()`"],["Or","The return type of `lhs.or(rhs)`"],["OrFilter","Represents the return type of `.or_filter(predicate)`"],["Order","Represents the return type of `.order(ordering)`"],["Select","Represents the return type of `.select(selection)`"],["SingleValue","Represents the return type of `.single_value()`"],["SkipLocked","Represents the return type of `.skip_locked()`"],["SqlTypeOf","The SQL type of an expression"],["ThenOrderBy","Represents the return type of `.then_order_by(ordering)`"],["Update","Represents the return type of `update(lhs).set(rhs)`"],["avg","The return type of `avg(expr)`"],["count","The return type of `count(expr)`"],["count_star","The return type of `count_star)(`"],["date","The return type of `date(expr)`"],["max","The return type of `max(expr)`"],["min","The return type of `min(expr)`"],["not","The return type of `not(expr)`"],["sum","The return type of `sum(expr)`"]]});