error[E0271]: type mismatch resolving `<Sqlite as SqlDialect>::InsertWithDefaultKeyword == IsoSqlDefaultKeyword`
  --> tests/fail/upsert_with_multiple_values_not_supported_on_sqlite.rs:17:18
   |
17 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ expected struct `IsoSqlDefaultKeyword`, found struct `DoesNotSupportDefaultKeyword`
   |          |
   |          required by a bound introduced by this call
   |
   = note: required for `BatchInsert<Vec<ValuesClause<ColumnInsertValue<id, Bound<Integer, i32>>, table>>, table, (), false>` to implement `CanInsertInSingleQuery<Sqlite>`
   = note: 1 redundant requirement hidden
   = note: required for `OnConflictValues<BatchInsert<Vec<ValuesClause<ColumnInsertValue<id, ...>, ...>>, ..., ..., false>, ..., ...>` to implement `CanInsertInSingleQuery<Sqlite>`
   = note: required for `InsertStatement<table, OnConflictValues<BatchInsert<Vec<ValuesClause<..., ...>>, ..., ..., false>, ..., ...>>` to implement `QueryFragment<Sqlite>`
   = note: required for `InsertStatement<table, OnConflictValues<BatchInsert<Vec<ValuesClause<..., ...>>, ..., ..., false>, ..., ...>>` to implement `ExecuteDsl<diesel::SqliteConnection, Sqlite>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`

error[E0277]: the trait bound `BatchInsert<Vec<diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, users::table>>, users::table, (), false>: QueryFragment<Sqlite, sqlite::backend::SqliteBatchInsert>` is not satisfied
  --> tests/fail/upsert_with_multiple_values_not_supported_on_sqlite.rs:17:18
   |
17 |         .execute(&mut connection);
   |          ------- ^^^^^^^^^^^^^^^ the trait `QueryFragment<Sqlite, sqlite::backend::SqliteBatchInsert>` is not implemented for `BatchInsert<Vec<diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>, users::table>>, users::table, (), false>`
   |          |
   |          required by a bound introduced by this call
   |
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             <BatchInsert<V, Tab, QId, HAS_STATIC_QUERY_ID> as QueryFragment<DB>>
             <BatchInsert<Vec<diesel::query_builder::insert_statement::ValuesClause<V, Tab>>, Tab, QId, HAS_STATIC_QUERY_ID> as QueryFragment<DB, PostgresLikeBatchInsertSupport>>
   = note: required for `BatchInsert<Vec<ValuesClause<ColumnInsertValue<id, Bound<Integer, i32>>, table>>, table, (), false>` to implement `QueryFragment<Sqlite>`
   = note: 3 redundant requirements hidden
   = note: required for `InsertStatement<table, OnConflictValues<BatchInsert<Vec<ValuesClause<..., ...>>, ..., ..., false>, ..., ...>>` to implement `QueryFragment<Sqlite>`
   = note: required for `InsertStatement<table, OnConflictValues<BatchInsert<Vec<ValuesClause<..., ...>>, ..., ..., false>, ..., ...>>` to implement `ExecuteDsl<diesel::SqliteConnection, Sqlite>`
note: required by a bound in `diesel::RunQueryDsl::execute`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |         Self: methods::ExecuteDsl<Conn>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
