error[E0277]: Cannot select `posts::columns::id` from `users::table`
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:26:22
   |
26 |         .distinct_on(posts::id)
   |          ----------- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
   |          |
   |          required by a bound introduced by this call
   |
   = note: `posts::columns::id` is no valid selection for `users::table`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             `posts::columns::id` implements `SelectableExpression<JoinOn<Join, On>>`
             `posts::columns::id` implements `SelectableExpression<Only<posts::table>>`
             `posts::columns::id` implements `SelectableExpression<SelectStatement<FromClause<From>>>`
             `posts::columns::id` implements `SelectableExpression<Tablesample<posts::table, TSM>>`
             `posts::columns::id` implements `SelectableExpression<posts::table>`
             `posts::columns::id` implements `SelectableExpression<query_source::joins::Join<Left, Right, Inner>>`
             `posts::columns::id` implements `SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>`
   = note: required for `users::table` to implement `DistinctOnDsl<posts::columns::id>`
note: required by a bound in `diesel::QueryDsl::distinct_on`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn distinct_on<Expr>(self, expr: Expr) -> DistinctOn<Self, Expr>
   |        ----------- required by a bound in this associated function
   |     where
   |         Self: methods::DistinctOnDsl<Expr>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryDsl::distinct_on`

error[E0277]: Cannot select `users::columns::name` from `posts::table`
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:30:10
   |
30 |         .distinct_on((posts::name, users::name))
   |          ^^^^^^^^^^^ the trait `SelectableExpression<posts::table>` is not implemented for `users::columns::name`
   |
   = note: `users::columns::name` is no valid selection for `posts::table`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             `users::columns::name` implements `SelectableExpression<JoinOn<Join, On>>`
             `users::columns::name` implements `SelectableExpression<Only<users::table>>`
             `users::columns::name` implements `SelectableExpression<SelectStatement<FromClause<From>>>`
             `users::columns::name` implements `SelectableExpression<Tablesample<users::table, TSM>>`
             `users::columns::name` implements `SelectableExpression<query_source::joins::Join<Left, Right, Inner>>`
             `users::columns::name` implements `SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>`
             `users::columns::name` implements `SelectableExpression<users::table>`
   = note: required for `(posts::columns::name, users::columns::name)` to implement `SelectableExpression<posts::table>`
   = note: required for `posts::table` to implement `DistinctOnDsl<(posts::columns::name, users::columns::name)>`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:30:10
   |
30 |         .distinct_on((posts::name, users::name))
   |          ^^^^^^^^^^^ expected `Once`, found `Never`
   |
note: required for `users::columns::name` to implement `AppearsOnTable<posts::table>`
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:8:9
   |
8  |         name -> VarChar,
   |         ^^^^
   = note: associated types for the current `impl` cannot be restricted in `where` clauses
   = note: 1 redundant requirement hidden
   = note: required for `(posts::columns::name, users::columns::name)` to implement `AppearsOnTable<posts::table>`
   = note: required for `(posts::columns::name, users::columns::name)` to implement `SelectableExpression<posts::table>`
   = note: required for `posts::table` to implement `DistinctOnDsl<(posts::columns::name, users::columns::name)>`

error[E0277]: the trait bound `(diesel::sql_types::Integer, diesel::sql_types::Text): SingleValue` is not satisfied
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:27:22
   |
27 |         .get_results(&mut connection);
   |          ----------- ^^^^^^^^^^^^^^^ the trait `SingleValue` is not implemented for `(diesel::sql_types::Integer, diesel::sql_types::Text)`
   |          |
   |          required by a bound introduced by this call
   |
   = help: the following other types implement trait `SingleValue`:
             Array<ST>
             BigInt
             Bool
             CChar
             Cidr
             Citext
             Datetime
             Inet
           and $N others
   = note: required for `{type error}` to implement `FromStaticSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>`
   = note: required for `{type error}` to implement `FromSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>`
   = note: required for `(diesel::sql_types::Integer, diesel::sql_types::Text)` to implement `load_dsl::private::CompatibleType<{type error}, Pg>`
   = note: required for `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<users::table>>, DistinctOnClause<posts::columns::id>>` to implement `LoadQuery<'_, diesel::PgConnection, {type error}>`
note: required by a bound in `get_results`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_results<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ----------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_results`

error[E0277]: the trait bound `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Text): SingleValue` is not satisfied
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:31:21
   |
31 |         .get_result(&mut connection);
   |          ---------- ^^^^^^^^^^^^^^^ the trait `SingleValue` is not implemented for `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Text)`
   |          |
   |          required by a bound introduced by this call
   |
   = help: the following other types implement trait `SingleValue`:
             Array<ST>
             BigInt
             Bool
             CChar
             Cidr
             Citext
             Datetime
             Inet
           and $N others
   = note: required for `{type error}` to implement `FromStaticSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Text), Pg>`
   = note: required for `{type error}` to implement `FromSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Text), Pg>`
   = note: required for `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Text)` to implement `load_dsl::private::CompatibleType<{type error}, Pg>`
   = note: required for `SelectStatement<FromClause<posts::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<posts::table>>, DistinctOnClause<(posts::columns::name, users::columns::name)>>` to implement `LoadQuery<'_, diesel::PgConnection, {type error}>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
