error[E0277]: the trait bound `i32: FromSqlRow<diesel::sql_types::Text, Pg>` is not satisfied
  --> tests/fail/selectable_with_typemisamatch.rs:18:11
   |
LL |     name: i32,
   |           ^^^ the trait `FromSql<diesel::sql_types::Text, Pg>` is not implemented for `i32`
   |
   = note: double check your type mappings via the documentation of `diesel::sql_types::Text`
   = note: `diesel::sql_query` requires the loading target to column names for loading values.
           You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`
   = help: the following other types implement trait `FromSql<A, DB>`:
             `i32` implements `FromSql<diesel::sql_types::Integer, Mysql>`
             `i32` implements `FromSql<diesel::sql_types::Integer, Pg>`
             `i32` implements `FromSql<diesel::sql_types::Integer, Sqlite>`
   = note: required for `i32` to implement `diesel::Queryable<diesel::sql_types::Text, Pg>`
   = note: required for `i32` to implement `FromSqlRow<diesel::sql_types::Text, Pg>`
   = help: see issue #48214

error[E0277]: the trait bound `std::string::String: FromSqlRow<diesel::sql_types::Integer, Pg>` is not satisfied
  --> tests/fail/selectable_with_typemisamatch.rs:16:9
   |
LL |     id: String,
   |         ^^^^^^ the trait `FromSql<diesel::sql_types::Integer, Pg>` is not implemented for `std::string::String`
   |
   = note: double check your type mappings via the documentation of `diesel::sql_types::Integer`
   = note: `diesel::sql_query` requires the loading target to column names for loading values.
           You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`
   = help: the following other types implement trait `FromSql<A, DB>`:
             `std::string::String` implements `FromSql<Citext, Pg>`
             `std::string::String` implements `FromSql<TimestamptzSqlite, Sqlite>`
             `std::string::String` implements `FromSql<diesel::sql_types::Date, Sqlite>`
             `std::string::String` implements `FromSql<diesel::sql_types::Time, Sqlite>`
             `std::string::String` implements `FromSql<diesel::sql_types::Timestamp, Sqlite>`
   = note: required for `std::string::String` to implement `diesel::Queryable<diesel::sql_types::Integer, Pg>`
   = note: required for `std::string::String` to implement `FromSqlRow<diesel::sql_types::Integer, Pg>`
   = help: see issue #48214

error[E0277]: the trait bound `(String, i32): FromStaticSqlRow<(Integer, Text), Pg>` is not satisfied
  --> tests/fail/selectable_with_typemisamatch.rs:34:17
   |
LL |     embed_user: User,
   |                 ^^^^ the trait `FromStaticSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>` is not implemented for `(std::string::String, i32)`
   |
   = help: the following other types implement trait `FromStaticSqlRow<ST, DB>`:
             `(T0,)` implements `FromStaticSqlRow<(ST0,), __DB>`
             `(T1, T0)` implements `FromStaticSqlRow<(ST1, ST0), __DB>`
             `(T1, T2, T0)` implements `FromStaticSqlRow<(ST1, ST2, ST0), __DB>`
             `(T1, T2, T3, T0)` implements `FromStaticSqlRow<(ST1, ST2, ST3, ST0), __DB>`
             `(T1, T2, T3, T4, T0)` implements `FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST0), __DB>`
             `(T1, T2, T3, T4, T5, T0)` implements `FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST0), __DB>`
             `(T1, T2, T3, T4, T5, T6, T0)` implements `FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST0), __DB>`
             `(T1, T2, T3, T4, T5, T6, T7, T0)` implements `FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST0), __DB>`
           and N others
note: required for `User` to implement `diesel::Queryable<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>`
  --> tests/fail/selectable_with_typemisamatch.rs:12:22
   |
LL | #[derive(Selectable, Queryable)]
   |                      ^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
...
LL | struct User {
   |        ^^^^
   = note: required for `User` to implement `FromSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>`
   = help: see issue #48214

      = note: this error originates in the derive macro `Queryable` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `diesel::expression::select_by::SelectBy<User, _>: load_dsl::private::CompatibleType<_, _>` is not satisfied
    --> tests/fail/selectable_with_typemisamatch.rs:43:15
     |
43   |         .load(&mut conn)
     |          ---- ^^^^^^^^^ the trait `load_dsl::private::CompatibleType<_, _>` is not implemented for `diesel::expression::select_by::SelectBy<User, _>`
     |          |
     |          required by a bound introduced by this call
     |
     = note: this is a mismatch between what your query returns and what your type expects the query to return
     = note: the fields in your struct need to match the fields returned by your query in count, order and type
     = note: consider using `#[diesel(check_for_backend(_))]` on either `#[derive(Selectable)]` or `#[derive(QueryableByName)]` 
             on your struct `_` and in your query `.select(_::as_select())` to get a better error message
     = help: the trait `load_dsl::private::CompatibleType<U, DB>` is implemented for `diesel::expression::select_by::SelectBy<U, DB>`
     = note: required for `SelectStatement<FromClause<table>, SelectClause<SelectBy<User, _>>>` to implement `LoadQuery<'_, _, _>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
     |        ---- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
  
     For more information about this error, try `rustc --explain E0277`.
