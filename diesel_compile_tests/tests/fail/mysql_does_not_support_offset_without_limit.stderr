error[E0277]: `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>` is no valid SQL fragment for the `Mysql` backend
    --> tests/fail/mysql_does_not_support_offset_without_limit.rs:16:38
     |
16   |         .get_result::<(i32, String)>(&mut connection);
     |          ----------                  ^^^^^^^^^^^^^^^ unsatisfied trait bound
     |          |
     |          required by a bound introduced by this call
     |
     = help: the trait `QueryFragment<Mysql>` is not implemented for `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>`
     = note: this usually means that the `Mysql` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `LimitOffsetClause<L, O>` implements `QueryFragment<Pg>`
               `LimitOffsetClause<LimitClause<L>, NoOffsetClause>` implements `QueryFragment<Mysql>`
               `LimitOffsetClause<LimitClause<L>, NoOffsetClause>` implements `QueryFragment<Sqlite>`
               `LimitOffsetClause<LimitClause<L>, OffsetClause<O>>` implements `QueryFragment<Mysql>`
               `LimitOffsetClause<LimitClause<L>, OffsetClause<O>>` implements `QueryFragment<Sqlite>`
               `LimitOffsetClause<NoLimitClause, NoOffsetClause>` implements `QueryFragment<Mysql>`
               `LimitOffsetClause<NoLimitClause, NoOffsetClause>` implements `QueryFragment<Sqlite>`
               `LimitOffsetClause<NoLimitClause, OffsetClause<O>>` implements `QueryFragment<Sqlite>`
     = note: required for `SelectStatement<FromClause<table>, ..., ..., ..., ..., ...>` to implement `QueryFragment<Mysql, AnsiSqlSelectStatement>`
     = note: 1 redundant requirement hidden
     = note: required for `SelectStatement<FromClause<table>, ..., ..., ..., ..., ...>` to implement `QueryFragment<Mysql>`
     = note: required for `SelectStatement<FromClause<table>, ..., ..., ..., ..., ...>` to implement `LoadQuery<'_, diesel::MysqlConnection, (i32, std::string::String)>`
note: required by a bound in `get_result`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
     |        ---------- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
  
     
error[E0277]: the trait bound `LimitOffsetClause<NoLimitClause, ...>: IntoBoxedClause<'_, ...>` is not satisfied
  --> tests/fail/mysql_does_not_support_offset_without_limit.rs:21:10
   |
LL |         .into_boxed()
   |          ^^^^^^^^^^ unsatisfied trait bound
   |
   = help: the trait `IntoBoxedClause<'_, Mysql>` is not implemented for `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>`
   = note: this usually means that `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>` is no valid SQL for `Mysql`
   = help: the following other types implement trait `IntoBoxedClause<'a, DB>`:
             `LimitOffsetClause<L, O>` implements `IntoBoxedClause<'_, Pg>`
             `LimitOffsetClause<LimitClause<L>, NoOffsetClause>` implements `IntoBoxedClause<'_, Mysql>`
             `LimitOffsetClause<LimitClause<L>, NoOffsetClause>` implements `IntoBoxedClause<'_, Sqlite>`
             `LimitOffsetClause<LimitClause<L>, OffsetClause<O>>` implements `IntoBoxedClause<'_, Mysql>`
             `LimitOffsetClause<LimitClause<L>, OffsetClause<O>>` implements `IntoBoxedClause<'_, Sqlite>`
             `LimitOffsetClause<NoLimitClause, NoOffsetClause>` implements `IntoBoxedClause<'_, Mysql>`
             `LimitOffsetClause<NoLimitClause, NoOffsetClause>` implements `IntoBoxedClause<'_, Sqlite>`
             `LimitOffsetClause<NoLimitClause, OffsetClause<O>>` implements `IntoBoxedClause<'_, Sqlite>`
   = note: required for `SelectStatement<FromClause<table>, ..., ..., ..., ..., ...>` to implement `BoxedDsl<'_, Mysql>`

   
error[E0277]: the trait bound `LimitOffsetClause<NoLimitClause, ...>: IntoBoxedClause<'_, ...>` is not satisfied
    --> tests/fail/mysql_does_not_support_offset_without_limit.rs:21:10
     |
21   |         .into_boxed()
     |          ^^^^^^^^^^ unsatisfied trait bound
     |
     = help: the trait `IntoBoxedClause<'_, Mysql>` is not implemented for `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>`
     = note: this usually means that `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>` is no valid SQL for `Mysql`
     = help: the following other types implement trait `IntoBoxedClause<'a, DB>`:
               `LimitOffsetClause<L, O>` implements `IntoBoxedClause<'_, Pg>`
               `LimitOffsetClause<LimitClause<L>, NoOffsetClause>` implements `IntoBoxedClause<'_, Mysql>`
               `LimitOffsetClause<LimitClause<L>, NoOffsetClause>` implements `IntoBoxedClause<'_, Sqlite>`
               `LimitOffsetClause<LimitClause<L>, OffsetClause<O>>` implements `IntoBoxedClause<'_, Mysql>`
               `LimitOffsetClause<LimitClause<L>, OffsetClause<O>>` implements `IntoBoxedClause<'_, Sqlite>`
               `LimitOffsetClause<NoLimitClause, NoOffsetClause>` implements `IntoBoxedClause<'_, Mysql>`
               `LimitOffsetClause<NoLimitClause, NoOffsetClause>` implements `IntoBoxedClause<'_, Sqlite>`
               `LimitOffsetClause<NoLimitClause, OffsetClause<O>>` implements `IntoBoxedClause<'_, Sqlite>`
     = note: required for `SelectStatement<FromClause<table>, ..., ..., ..., ..., ...>` to implement `BoxedDsl<'_, Mysql>`
note: required by a bound in `diesel::QueryDsl::into_boxed`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn into_boxed<'a, DB>(self) -> IntoBoxed<'a, Self, DB>
     |        ---------- required by a bound in this associated function
...
LL |         Self: methods::BoxedDsl<'a, DB>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryDsl::into_boxed`
  
     For more information about this error, try `rustc --explain E0277`.
