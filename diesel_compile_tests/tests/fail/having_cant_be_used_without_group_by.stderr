error[E0277]: the trait bound `SelectStatement<FromClause<table>, SelectClause<name>>: HavingDsl<_>` is not satisfied
  --> tests/fail/having_cant_be_used_without_group_by.rs:28:10
   |
LL |         .having(users::id.gt(1))
   |          ^^^^^^ the trait `HavingDsl<_>` is not implemented for `SelectStatement<FromClause<table>, SelectClause<name>>`
   |
   = help: the trait `HavingDsl<_>` is not implemented for `SelectStatement<_, _, _, _, _, _, diesel::query_builder::group_by_clause::NoGroupByClause, diesel::query_builder::having_clause::NoHavingClause, _>`
           but it is implemented for `SelectStatement<_, _, _, _, _, _, diesel::query_builder::group_by_clause::GroupByClause<_>, _, _>`
   = help: for that trait implementation, expected `diesel::query_builder::group_by_clause::GroupByClause<_>`, found `diesel::query_builder::group_by_clause::NoGroupByClause`

   
error[E0277]: the trait bound `(): diesel::Expression` is not satisfied
  --> tests/fail/having_cant_be_used_without_group_by.rs:34:10
   |
LL |         .having(users::id.gt(1))
   |          ^^^^^^ the trait `diesel::Expression` is not implemented for `()`
   |
   = help: the following other types implement trait `diesel::Expression`:
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
             (T0, T1, T2, T3, T4, T5, T6)
             (T0, T1, T2, T3, T4, T5, T6, T7)
             (T0, T1, T2, T3, T4, T5, T6, T7, T8)
           and N others
   = note: required for `BoxedSelectStatement<'_, (Integer, Text), FromClause<table>, _>` to implement `HavingDsl<_>`

   
error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
  --> tests/fail/having_cant_be_used_without_group_by.rs:42:10
   |
LL |         .having(posts::id.eq(42))
   |          ^^^^^^ expected `Once`, found `Never`
   |
note: required for `posts::columns::id` to implement `AppearsOnTable<users::table>`
  --> tests/fail/having_cant_be_used_without_group_by.rs:14:9
   |
LL |         id -> Integer,
   |         ^^
   = note: associated types for the current `impl` cannot be restricted in `where` clauses
   = note: 2 redundant requirements hidden
   = note: required for `Grouped<Eq<id, Bound<Integer, i32>>>` to implement `AppearsOnTable<users::table>`
   = note: required for `SelectStatement<FromClause<table>, ..., ..., ..., ..., ..., ...>` to implement `HavingDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<posts::columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>>>`

   
error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
  --> tests/fail/having_cant_be_used_without_group_by.rs:50:10
   |
LL |         .having(posts::id.eq(42))
   |          ^^^^^^ expected `Once`, found `Never`
   |
note: required for `posts::columns::id` to implement `AppearsOnTable<users::table>`
  --> tests/fail/having_cant_be_used_without_group_by.rs:14:9
   |
LL |         id -> Integer,
   |         ^^
   = note: associated types for the current `impl` cannot be restricted in `where` clauses
   = note: 2 redundant requirements hidden
   = note: required for `Grouped<Eq<id, Bound<Integer, i32>>>` to implement `AppearsOnTable<users::table>`
   = note: required for `BoxedSelectStatement<'_, Text, FromClause<table>, _, id>` to implement `HavingDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<posts::columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>>>`

   
error[E0277]: the trait bound `(diesel::sql_types::Integer, diesel::sql_types::Text): SingleValue` is not satisfied
    --> tests/fail/having_cant_be_used_without_group_by.rs:36:15
     |
36   |         .load(&mut conn);
     |          ---- ^^^^^^^^^ the trait `SingleValue` is not implemented for `(diesel::sql_types::Integer, diesel::sql_types::Text)`
     |          |
     |          required by a bound introduced by this call
     |
     = help: the following other types implement trait `SingleValue`:
               Array<ST>
               BigInt
               Bool
               CChar
               Cidr
               Citext
               Datetime
               Inet
             and N others
     = note: required for `{type error}` to implement `FromStaticSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>`
     = note: required for `{type error}` to implement `FromSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>`
     = note: required for `(diesel::sql_types::Integer, diesel::sql_types::Text)` to implement `load_dsl::private::CompatibleType<{type error}, Pg>`
     = note: required for `BoxedSelectStatement<'_, (Integer, Text), FromClause<table>, Pg>` to implement `LoadQuery<'_, diesel::PgConnection, {type error}>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
     |        ---- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
