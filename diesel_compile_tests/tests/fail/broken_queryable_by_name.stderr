error[E0277]: the trait bound `i32: FromSqlRow<diesel::sql_types::Text, Pg>` is not satisfied
  --> tests/fail/broken_queryable_by_name.rs:18:5
   |
LL |     name: i32,
   |     ^^^^^^^^^ the trait `FromSql<diesel::sql_types::Text, Pg>` is not implemented for `i32`
   |
   = note: double check your type mappings via the documentation of `diesel::sql_types::Text`
   = note: `diesel::sql_query` requires the loading target to column names for loading values.
           You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`
   = help: the following other types implement trait `FromSql<A, DB>`:
             `i32` implements `FromSql<diesel::sql_types::Integer, Mysql>`
             `i32` implements `FromSql<diesel::sql_types::Integer, Pg>`
             `i32` implements `FromSql<diesel::sql_types::Integer, Sqlite>`
   = note: required for `i32` to implement `Queryable<diesel::sql_types::Text, Pg>`
   = note: required for `i32` to implement `FromSqlRow<diesel::sql_types::Text, Pg>`
   = help: see issue #48214

error[E0277]: the trait bound `std::string::String: FromSqlRow<diesel::sql_types::Integer, Pg>` is not satisfied
  --> tests/fail/broken_queryable_by_name.rs:16:5
   |
LL |     id: String,
   |     ^^^^^^^^^^ the trait `FromSql<diesel::sql_types::Integer, Pg>` is not implemented for `std::string::String`
   |
   = note: double check your type mappings via the documentation of `diesel::sql_types::Integer`
   = note: `diesel::sql_query` requires the loading target to column names for loading values.
           You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`
   = help: the following other types implement trait `FromSql<A, DB>`:
             `std::string::String` implements `FromSql<Citext, Pg>`
             `std::string::String` implements `FromSql<TimestamptzSqlite, Sqlite>`
             `std::string::String` implements `FromSql<diesel::sql_types::Date, Sqlite>`
             `std::string::String` implements `FromSql<diesel::sql_types::Time, Sqlite>`
             `std::string::String` implements `FromSql<diesel::sql_types::Timestamp, Sqlite>`
   = note: required for `std::string::String` to implement `Queryable<diesel::sql_types::Integer, Pg>`
   = note: required for `std::string::String` to implement `FromSqlRow<diesel::sql_types::Integer, Pg>`
   = help: see issue #48214

error[E0277]: the trait bound `i32: FromSqlRow<diesel::sql_types::Text, Pg>` is not satisfied
  --> tests/fail/broken_queryable_by_name.rs:29:5
   |
LL |     name: i32,
   |     ^^^^^^^^^ the trait `FromSql<diesel::sql_types::Text, Pg>` is not implemented for `i32`
   |
   = note: double check your type mappings via the documentation of `diesel::sql_types::Text`
   = note: `diesel::sql_query` requires the loading target to column names for loading values.
           You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`
   = help: the following other types implement trait `FromSql<A, DB>`:
             `i32` implements `FromSql<diesel::sql_types::Integer, Mysql>`
             `i32` implements `FromSql<diesel::sql_types::Integer, Pg>`
             `i32` implements `FromSql<diesel::sql_types::Integer, Sqlite>`
   = note: required for `i32` to implement `Queryable<diesel::sql_types::Text, Pg>`
   = note: required for `i32` to implement `FromSqlRow<diesel::sql_types::Text, Pg>`
   = help: see issue #48214

error[E0277]: the trait bound `std::string::String: FromSqlRow<diesel::sql_types::Integer, Pg>` is not satisfied
  --> tests/fail/broken_queryable_by_name.rs:26:5
   |
LL |     id: String,
   |     ^^^^^^^^^^ the trait `FromSql<diesel::sql_types::Integer, Pg>` is not implemented for `std::string::String`
   |
   = note: double check your type mappings via the documentation of `diesel::sql_types::Integer`
   = note: `diesel::sql_query` requires the loading target to column names for loading values.
           You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`
   = help: the following other types implement trait `FromSql<A, DB>`:
             `std::string::String` implements `FromSql<Citext, Pg>`
             `std::string::String` implements `FromSql<TimestamptzSqlite, Sqlite>`
             `std::string::String` implements `FromSql<diesel::sql_types::Date, Sqlite>`
             `std::string::String` implements `FromSql<diesel::sql_types::Time, Sqlite>`
             `std::string::String` implements `FromSql<diesel::sql_types::Timestamp, Sqlite>`
   = note: required for `std::string::String` to implement `Queryable<diesel::sql_types::Integer, Pg>`
   = note: required for `std::string::String` to implement `FromSqlRow<diesel::sql_types::Integer, Pg>`
   = help: see issue #48214

error[E0277]: the trait bound `Untyped: load_dsl::private::CompatibleType<User, _>` is not satisfied
    --> tests/fail/broken_queryable_by_name.rs:36:49
     |
36   |     let s = diesel::sql_query("…").load::<User>(conn);
     |                                    ----         ^^^^ the trait `load_dsl::private::CompatibleType<User, _>` is not implemented for `Untyped`
     |                                    |
     |                                    required by a bound introduced by this call
     |
     = note: this is a mismatch between what your query returns and what your type expects the query to return
     = note: the fields in your struct need to match the fields returned by your query in count, order and type
     = note: consider using `#[diesel(check_for_backend(_))]` on either `#[derive(Selectable)]` or `#[derive(QueryableByName)]` 
             on your struct `User` and in your query `.select(User::as_select())` to get a better error message
     = help: the trait `load_dsl::private::CompatibleType<U, DB>` is implemented for `Untyped`
     = note: required for `SqlQuery` to implement `LoadQuery<'_, _, User>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
     |        ---- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `User: FromSqlRow<_, _>` is not satisfied
    --> tests/fail/broken_queryable_by_name.rs:36:49
     |
36   |     let s = diesel::sql_query("…").load::<User>(conn);
     |                                    ----         ^^^^ the trait `FromSqlRow<_, _>` is not implemented for `User`
     |                                    |
     |                                    required by a bound introduced by this call
     |
     = note: double check your type mappings via the documentation of `_`
     = note: `diesel::sql_query` requires the loading target to column names for loading values.
             You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`
     = help: the following other types implement trait `LoadQuery<'query, Conn, U, B>`:
               InsertStatement<T, BatchInsert<Vec<diesel::query_builder::insert_statement::ValuesClause<V, T>>, T, QId, STATIC_QUERY_ID>, Op>
               InsertStatement<T, diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<BatchInsert<Vec<diesel::query_builder::insert_statement::ValuesClause<V, T>>, T, QId, STATIC_QUERY_ID>, Target, ConflictOpt>, Op>
     = note: required for `SqlQuery` to implement `LoadQuery<'_, _, User>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
     |        ---- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
For more information about this error, try `rustc --explain E0277`.
