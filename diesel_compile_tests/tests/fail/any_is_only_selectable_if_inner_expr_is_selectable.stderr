warning: use of deprecated function `diesel::dsl::any`: Use `ExpressionMethods::eq_any` instead
  --> tests/fail/any_is_only_selectable_if_inner_expr_is_selectable.rs:33:25
   |
LL |         .filter(name.eq(any(more_stuff::names)))
   |                         ^^^
   |
   = note: `#[warn(deprecated)]` on by default

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
    --> tests/fail/any_is_only_selectable_if_inner_expr_is_selectable.rs:34:15
     |
34   |         .load(&mut conn);
     |          ---- ^^^^^^^^^ expected `Once`, found `Never`
     |          |
     |          required by a bound introduced by this call
     |
note: required for `more_stuff::columns::names` to implement `AppearsOnTable<stuff::table>`
    --> tests/fail/any_is_only_selectable_if_inner_expr_is_selectable.rs:15:9
     |
15   |         names -> Array<VarChar>,
     |         ^^^^^
     = note: associated types for the current `impl` cannot be restricted in `where` clauses
     = note: 3 redundant requirements hidden
     = note: required for `Grouped<Eq<name, Any<names>>>` to implement `AppearsOnTable<stuff::table>`
     = note: required for `WhereClause<Grouped<Eq<name, Any<names>>>>` to implement `diesel::query_builder::where_clause::ValidWhereClause<FromClause<stuff::table>>`
     = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` to implement `Query`
     = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` to implement `LoadQuery<'_, _, _>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
     |        ---- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
  
     
error[E0277]: the trait bound `{type error}: FromSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>` is not satisfied
    --> tests/fail/any_is_only_selectable_if_inner_expr_is_selectable.rs:34:15
     |
34   |         .load(&mut conn);
     |          ---- ^^^^^^^^^ the trait `SingleValue` is not implemented for `(diesel::sql_types::Integer, diesel::sql_types::Text)`
     |          |
     |          required by a bound introduced by this call
     |
     = note: double check your type mappings via the documentation of `(diesel::sql_types::Integer, diesel::sql_types::Text)`
     = note: `diesel::sql_query` requires the loading target to column names for loading values.
             You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`
     = help: the following other types implement trait `SingleValue`:
               BigInt
               Bool
               CChar
               Cidr
               Citext
               Datetime
               Inet
               Interval
             and N others
     = note: required for `{type error}` to implement `FromStaticSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>`
     = note: required for `{type error}` to implement `FromSqlRow<(diesel::sql_types::Integer, diesel::sql_types::Text), Pg>`
     = note: required for `(diesel::sql_types::Integer, diesel::sql_types::Text)` to implement `load_dsl::private::CompatibleType<{type error}, Pg>`
     = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` to implement `LoadQuery<'_, diesel::PgConnection, {type error}>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
     |        ---- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
