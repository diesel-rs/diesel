error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
    --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:31:63
     |
31   |     let _ = users::table.filter(posts::id.eq(1)).load::<User>(&mut conn);
     |                                                  ----         ^^^^^^^^^ expected `Once`, found `Never`
     |                                                  |
     |                                                  required by a bound introduced by this call
     |
note: required for `posts::columns::id` to implement `AppearsOnTable<users::table>`
    --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:15:9
     |
15   |         id -> Integer,
     |         ^^
     = note: associated types for the current `impl` cannot be restricted in `where` clauses
     = note: 2 redundant requirements hidden
     = note: required for `Grouped<Eq<id, Bound<Integer, i32>>>` to implement `AppearsOnTable<users::table>`
     = note: required for `WhereClause<Grouped<Eq<id, Bound<Integer, i32>>>>` to implement `diesel::query_builder::where_clause::ValidWhereClause<FromClause<users::table>>`
     = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` to implement `Query`
     = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` to implement `LoadQuery<'_, _, User>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
     |        ---- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
  
     
error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
  --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:34:45
   |
LL |     let _ = users::table.into_boxed::<Pg>().filter(posts::id.eq(1));
   |                                             ^^^^^^ expected `Once`, found `Never`
   |
note: required for `posts::columns::id` to implement `AppearsOnTable<users::table>`
  --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:15:9
   |
LL |         id -> Integer,
   |         ^^
   = note: associated types for the current `impl` cannot be restricted in `where` clauses
   = note: 2 redundant requirements hidden
   = note: required for `Grouped<Eq<id, Bound<Integer, i32>>>` to implement `AppearsOnTable<users::table>`
   = note: required for `BoxedSelectStatement<'_, (Integer, Text), FromClause<table>, Pg>` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<posts::columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>>>`

   
error[E0277]: cannot box `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` for backend `Pg`
  --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:37:50
   |
LL |     let _ = users::table.filter(posts::id.eq(1)).into_boxed::<Pg>();
   |                                                  ^^^^^^^^^^ the trait `BoxedDsl<'_, Pg>` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>`
   |
   = note: this either means `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` is no valid SQL for `Pg`
   = note: or this means `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` uses clauses not supporting boxing like the `LOCKING` or `GROUP BY` clause
   = help: the following other types implement trait `BoxedDsl<'a, DB>`:
             SelectStatement<FromClause<F>, S, D, W, O, LOf, G, H>
             SelectStatement<NoFromClause, S, D, W, O, LOf, G, H>

   
error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
    --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:43:23
     |
43   |         .load::<User>(&mut conn);
     |          ----         ^^^^^^^^^ expected `Once`, found `Never`
     |          |
     |          required by a bound introduced by this call
     |
note: required for `posts::columns::title` to implement `AppearsOnTable<users::table>`
    --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:16:9
     |
16   |         title -> VarChar,
     |         ^^^^^
     = note: associated types for the current `impl` cannot be restricted in `where` clauses
     = note: 2 redundant requirements hidden
     = note: required for `Grouped<Eq<name, title>>` to implement `AppearsOnTable<users::table>`
     = note: required for `WhereClause<Grouped<Eq<name, title>>>` to implement `diesel::query_builder::where_clause::ValidWhereClause<FromClause<users::table>>`
     = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` to implement `Query`
     = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` to implement `LoadQuery<'_, _, User>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
     |        ---- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
  
     
error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
  --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:48:10
   |
LL |         .filter(users::name.eq(posts::title));
   |          ^^^^^^ expected `Once`, found `Never`
   |
note: required for `posts::columns::title` to implement `AppearsOnTable<users::table>`
  --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:16:9
   |
LL |         title -> VarChar,
   |         ^^^^^
   = note: associated types for the current `impl` cannot be restricted in `where` clauses
   = note: 2 redundant requirements hidden
   = note: required for `Grouped<Eq<name, title>>` to implement `AppearsOnTable<users::table>`
   = note: required for `BoxedSelectStatement<'_, (Integer, Text), FromClause<table>, Pg>` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<users::columns::name, posts::columns::title>>>`

   
error[E0277]: cannot box `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` for backend `Pg`
  --> tests/fail/filter_cannot_take_comparison_for_columns_from_another_table.rs:53:10
   |
LL |         .into_boxed::<Pg>();
   |          ^^^^^^^^^^ the trait `BoxedDsl<'_, Pg>` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>`
   |
   = note: this either means `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` is no valid SQL for `Pg`
   = note: or this means `SelectStatement<FromClause<table>, DefaultSelectClause<...>, ..., ...>` uses clauses not supporting boxing like the `LOCKING` or `GROUP BY` clause
   = help: the following other types implement trait `BoxedDsl<'a, DB>`:
             SelectStatement<FromClause<F>, S, D, W, O, LOf, G, H>
             SelectStatement<NoFromClause, S, D, W, O, LOf, G, H>
