error[E0277]: `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` is no valid SQL fragment for the `Mysql` backend
    --> tests/fail/mysql_on_conflict_tests.rs:42:18
     |
42   |         .execute(&mut connection);
     |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
     |          |
     |          required by a bound introduced by this call
     |
     = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>`
     = note: this usually means that the `Mysql` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
     = note: required for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` to implement `QueryFragment<Mysql>`
     = note: 1 redundant requirement hidden
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `QueryFragment<Mysql>`
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
     |        ------- required by a bound in this associated function
...
LL |         Self: methods::ExecuteDsl<Conn>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
  
     
error[E0277]: `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` is no valid SQL fragment for the `Mysql` backend
    --> tests/fail/mysql_on_conflict_tests.rs:49:18
     |
49   |         .execute(&mut connection);
     |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
     |          |
     |          required by a bound introduced by this call
     |
     = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>`
     = note: this usually means that the `Mysql` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
     = note: required for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` to implement `QueryFragment<Mysql>`
     = note: 1 redundant requirement hidden
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `QueryFragment<Mysql>`
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
     |        ------- required by a bound in this associated function
...
LL |         Self: methods::ExecuteDsl<Conn>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
  
     
error[E0277]: the trait bound `ConflictTarget<(DuplicatedKeys, name)>: OnConflictTarget<table>` is not satisfied
   --> tests/fail/mysql_on_conflict_tests.rs:54:22
    |
54  |         .on_conflict((dsl::DuplicatedKeys, name))
    |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound
    |          |
    |          required by a bound introduced by this call
    |
    = help: the trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<users::table>` is not implemented for `ConflictTarget<(DuplicatedKeys, name)>`
    = help: the following other types implement trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<Table>`:
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
            and N others
note: required by a bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`
   --> DIESEL/diesel/diesel/src/upsert/on_conflict_extension.rs
    |
LL |     pub fn on_conflict<Target>(
    |            ----------- required by a bound in this associated function
...
LL |         ConflictTarget<Target>: OnConflictTarget<T>,
    |                                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`
 
    
error[E0277]: `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` is no valid SQL fragment for the `Mysql` backend
    --> tests/fail/mysql_on_conflict_tests.rs:57:18
     |
57   |         .execute(&mut connection);
     |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
     |          |
     |          required by a bound introduced by this call
     |
     = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>`
     = note: this usually means that the `Mysql` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
     = note: required for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` to implement `QueryFragment<Mysql>`
     = note: 1 redundant requirement hidden
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `QueryFragment<Mysql>`
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
     |        ------- required by a bound in this associated function
...
LL |         Self: methods::ExecuteDsl<Conn>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
  
     
error[E0277]: `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` is no valid SQL fragment for the `Mysql` backend
    --> tests/fail/mysql_on_conflict_tests.rs:65:18
     |
65   |         .execute(&mut connection);
     |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
     |          |
     |          required by a bound introduced by this call
     |
     = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>`
     = note: this usually means that the `Mysql` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
     = note: required for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` to implement `QueryFragment<Mysql>`
     = note: 1 redundant requirement hidden
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `QueryFragment<Mysql>`
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
     |        ------- required by a bound in this associated function
...
LL |         Self: methods::ExecuteDsl<Conn>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
  
     
error[E0277]: `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` is no valid SQL fragment for the `Mysql` backend
    --> tests/fail/mysql_on_conflict_tests.rs:74:18
     |
74   |         .execute(&mut connection);
     |          ------- ^^^^^^^^^^^^^^^ unsatisfied trait bound
     |          |
     |          required by a bound introduced by this call
     |
     = help: the trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is not implemented for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>`
     = note: this usually means that the `Mysql` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action, diesel::query_builder::where_clause::WhereClause<Expr>>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB, SD>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<DB>`
               `diesel::query_builder::upsert::on_conflict_clause::OnConflictValues<Values, Target, Action>` implements `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>`
     = note: required for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` to implement `QueryFragment<Mysql>`
     = note: 1 redundant requirement hidden
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `QueryFragment<Mysql>`
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `ExecuteDsl<diesel::MysqlConnection, Mysql>`
note: required by a bound in `diesel::RunQueryDsl::execute`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
     |        ------- required by a bound in this associated function
...
LL |         Self: methods::ExecuteDsl<Conn>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
  
     
error[E0277]: `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>` is no valid SQL fragment for the `Pg` backend
    --> tests/fail/mysql_on_conflict_tests.rs:84:18
     |
84   |         .execute(&mut connection);
     |          ------- ^^^^^^^^^^^^^^^ the trait `QueryFragment<Pg>` is not implemented for `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>`
     |          |
     |          required by a bound introduced by this call
     |
     = note: this usually means that the `Pg` database system does not support 
             this SQL syntax
     = help: the trait `QueryFragment<Pg, diesel::query_builder::private::NotSpecialized>` is not implemented for `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<DuplicatedKeys>`
             but trait `QueryFragment<Mysql, mysql::backend::MysqlOnConflictClause>` is implemented for it
     = note: required for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` to implement `QueryFragment<Pg, pg::backend::PgOnConflictClause>`
     = note: 2 redundant requirements hidden
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `QueryFragment<Pg>`
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `ExecuteDsl<diesel::PgConnection, Pg>`
note: required by a bound in `diesel::RunQueryDsl::execute`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
     |        ------- required by a bound in this associated function
...
LL |         Self: methods::ExecuteDsl<Conn>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
  
     
error[E0277]: the trait bound `ConflictTarget<(name, DuplicatedKeys)>: OnConflictTarget<table>` is not satisfied
   --> tests/fail/mysql_on_conflict_tests.rs:89:22
    |
89  |         .on_conflict((name, dsl::DuplicatedKeys))
    |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound
    |          |
    |          required by a bound introduced by this call
    |
    = help: the trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<users::table>` is not implemented for `ConflictTarget<(name, DuplicatedKeys)>`
    = help: the following other types implement trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<Table>`:
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
            and N others
note: required by a bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`
   --> DIESEL/diesel/diesel/src/upsert/on_conflict_extension.rs
    |
LL |     pub fn on_conflict<Target>(
    |            ----------- required by a bound in this associated function
...
LL |         ConflictTarget<Target>: OnConflictTarget<T>,
    |                                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`
 
    
error[E0277]: `ConflictTarget<(name, DuplicatedKeys)>` is no valid SQL fragment for the `Pg` backend
    --> tests/fail/mysql_on_conflict_tests.rs:92:18
     |
92   |         .execute(&mut connection);
     |          ------- ^^^^^^^^^^^^^^^ the trait `QueryFragment<Pg>` is not implemented for `ConflictTarget<(name, DuplicatedKeys)>`
     |          |
     |          required by a bound introduced by this call
     |
     = note: this usually means that the `Pg` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `QueryFragment<DB, SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `QueryFragment<_DB, _SP>`
             and N others
     = note: required for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` to implement `QueryFragment<Pg, pg::backend::PgOnConflictClause>`
     = note: 2 redundant requirements hidden
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `QueryFragment<Pg>`
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `ExecuteDsl<diesel::PgConnection, Pg>`
note: required by a bound in `diesel::RunQueryDsl::execute`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
     |        ------- required by a bound in this associated function
...
LL |         Self: methods::ExecuteDsl<Conn>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
  
     
error[E0277]: the trait bound `ConflictTarget<(DuplicatedKeys, name)>: OnConflictTarget<table>` is not satisfied
   --> tests/fail/mysql_on_conflict_tests.rs:97:22
    |
97  |         .on_conflict((dsl::DuplicatedKeys, name))
    |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound
    |          |
    |          required by a bound introduced by this call
    |
    = help: the trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<users::table>` is not implemented for `ConflictTarget<(DuplicatedKeys, name)>`
    = help: the following other types implement trait `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<Table>`:
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
              `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `diesel::query_builder::upsert::on_conflict_target::OnConflictTarget<<_T as Column>::Table>`
            and N others
note: required by a bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`
   --> DIESEL/diesel/diesel/src/upsert/on_conflict_extension.rs
    |
LL |     pub fn on_conflict<Target>(
    |            ----------- required by a bound in this associated function
...
LL |         ConflictTarget<Target>: OnConflictTarget<T>,
    |                                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::upsert::on_conflict_extension::<impl InsertStatement<T, U, Op, Ret>>::on_conflict`
 
    
error[E0277]: `ConflictTarget<(DuplicatedKeys, name)>` is no valid SQL fragment for the `Pg` backend
    --> tests/fail/mysql_on_conflict_tests.rs:100:18
     |
100  |         .execute(&mut connection);
     |          ------- ^^^^^^^^^^^^^^^ the trait `QueryFragment<Pg>` is not implemented for `ConflictTarget<(DuplicatedKeys, name)>`
     |          |
     |          required by a bound introduced by this call
     |
     = note: this usually means that the `Pg` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(T,)>` implements `QueryFragment<DB, SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5)>` implements `QueryFragment<_DB, _SP>`
               `diesel::query_builder::upsert::on_conflict_target::ConflictTarget<(_T, T0, T1, T2, T3, T4, T5, T6)>` implements `QueryFragment<_DB, _SP>`
             and N others
     = note: required for `OnConflictValues<ValuesClause<(..., ...), ...>, ..., ...>` to implement `QueryFragment<Pg, pg::backend::PgOnConflictClause>`
     = note: 2 redundant requirements hidden
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `QueryFragment<Pg>`
     = note: required for `InsertStatement<table, OnConflictValues<..., ..., ...>>` to implement `ExecuteDsl<diesel::PgConnection, Pg>`
note: required by a bound in `diesel::RunQueryDsl::execute`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn execute(self, conn: &mut Conn) -> QueryResult<usize>
     |        ------- required by a bound in this associated function
...
LL |         Self: methods::ExecuteDsl<Conn>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::execute`
  
     For more information about this error, try `rustc --explain E0277`.
