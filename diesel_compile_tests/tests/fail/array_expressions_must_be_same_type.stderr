error[E0277]: cannot select `f64` from `NoFromClause`
   --> tests/fail/array_expressions_must_be_same_type.rs:15:12
    |
15  |     select(array((1, 3f64)))
    |     ------ ^^^^^^^^^^^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `f64`
    |     |
    |     required by a bound introduced by this call
    |
    = note: `f64` is no valid selection for `NoFromClause`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              `&'a T` implements `SelectableExpression<QS>`
              `(T0, T1)` implements `SelectableExpression<QS>`
              `(T0, T1, T2)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3, T4)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3, T4, T5)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3, T4, T5, T6)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `SelectableExpression<QS>`
            and N others
    = note: required for `(diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>, f64)` to implement `SelectableExpression<NoFromClause>`
    = note: 1 redundant requirement hidden
    = note: required for `ArrayLiteral<(Bound<Integer, i32>, f64), Integer>` to implement `SelectableExpression<NoFromClause>`
    = note: required for `SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>`
    = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `Query`
    = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `AsQuery`
note: required by a bound in `diesel::select`
   --> DIESEL/diesel/diesel/src/query_builder/functions.rs
    |
LL | pub fn select<T>(expression: T) -> crate::dsl::select<T>
    |        ------ required by a bound in this function
...
LL |     crate::dsl::select<T>: AsQuery,
    |                            ^^^^^^^ required by this bound in `select`
 
    
error[E0277]: the trait bound `f64: ValidGrouping<()>` is not satisfied
   --> tests/fail/array_expressions_must_be_same_type.rs:15:12
    |
15  |     select(array((1, 3f64)))
    |     ------ ^^^^^^^^^^^^^^^^ the trait `ValidGrouping<()>` is not implemented for `f64`
    |     |
    |     required by a bound introduced by this call
    |
    = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
              `&T` implements `ValidGrouping<GB>`
              `(T0, T1)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3, T4)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3, T4, T5)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3, T4, T5, T6)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `ValidGrouping<__GroupByClause>`
            and N others
    = note: required for `(f64,)` to implement `ValidGrouping<()>`
    = note: 2 redundant requirements hidden
    = note: required for `ArrayLiteral<(Bound<Integer, i32>, f64), Integer>` to implement `ValidGrouping<()>`
    = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `Query`
    = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `AsQuery`
note: required by a bound in `diesel::select`
   --> DIESEL/diesel/diesel/src/query_builder/functions.rs
    |
LL | pub fn select<T>(expression: T) -> crate::dsl::select<T>
    |        ------ required by a bound in this function
...
LL |     crate::dsl::select<T>: AsQuery,
    |                            ^^^^^^^ required by this bound in `select`
 
    
error[E0277]: cannot select `f64` from `NoFromClause`
    --> tests/fail/array_expressions_must_be_same_type.rs:20:33
     |
20   |         .get_result::<Vec<i32>>(&mut connection)
     |          ----------             ^^^^^^^^^^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `f64`
     |          |
     |          required by a bound introduced by this call
     |
     = note: `f64` is no valid selection for `NoFromClause`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               `&'a T` implements `SelectableExpression<QS>`
               `(T0, T1)` implements `SelectableExpression<QS>`
               `(T0, T1, T2)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3, T4)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3, T4, T5)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3, T4, T5, T6)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `SelectableExpression<QS>`
             and N others
     = note: required for `(diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>, f64)` to implement `SelectableExpression<NoFromClause>`
     = note: 1 redundant requirement hidden
     = note: required for `ArrayLiteral<(Bound<Integer, i32>, f64), Integer>` to implement `SelectableExpression<NoFromClause>`
     = note: required for `SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `Query`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `LoadQuery<'_, _, Vec<i32>>`
note: required by a bound in `get_result`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
     |        ---------- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
  
     
error[E0277]: the trait bound `f64: ValidGrouping<()>` is not satisfied
    --> tests/fail/array_expressions_must_be_same_type.rs:20:33
     |
20   |         .get_result::<Vec<i32>>(&mut connection)
     |          ----------             ^^^^^^^^^^^^^^^ the trait `ValidGrouping<()>` is not implemented for `f64`
     |          |
     |          required by a bound introduced by this call
     |
     = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
               `&T` implements `ValidGrouping<GB>`
               `(T0, T1)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3, T4)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3, T4, T5)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3, T4, T5, T6)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `ValidGrouping<__GroupByClause>`
             and N others
     = note: required for `(f64,)` to implement `ValidGrouping<()>`
     = note: 2 redundant requirements hidden
     = note: required for `ArrayLiteral<(Bound<Integer, i32>, f64), Integer>` to implement `ValidGrouping<()>`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `Query`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `LoadQuery<'_, _, Vec<i32>>`
note: required by a bound in `get_result`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
     |        ---------- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
  
     
error[E0277]: the trait bound `f64: QueryId` is not satisfied
    --> tests/fail/array_expressions_must_be_same_type.rs:20:33
     |
20   |         .get_result::<Vec<i32>>(&mut connection)
     |          ----------             ^^^^^^^^^^^^^^^ the trait `QueryId` is not implemented for `f64`
     |          |
     |          required by a bound introduced by this call
     |
     = help: the following other types implement trait `QueryId`:
               &T
               ()
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
               (T0, T1, T2, T3, T4, T5)
               (T0, T1, T2, T3, T4, T5, T6)
             and N others
     = note: required for `(diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>, f64)` to implement `QueryId`
     = note: 3 redundant requirements hidden
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `QueryId`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `LoadQuery<'_, _, Vec<i32>>`
note: required by a bound in `get_result`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
     |        ---------- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
  
     
error[E0277]: `f64` is no valid SQL fragment for the `Pg` backend
    --> tests/fail/array_expressions_must_be_same_type.rs:20:33
     |
20   |         .get_result::<Vec<i32>>(&mut connection)
     |          ----------             ^^^^^^^^^^^^^^^ the trait `QueryFragment<Pg>` is not implemented for `f64`
     |          |
     |          required by a bound introduced by this call
     |
     = note: this usually means that the `Pg` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `&T` implements `QueryFragment<DB>`
               `()` implements `QueryFragment<DB>`
               `(T0, T1)` implements `QueryFragment<__DB>`
               `(T0, T1, T2)` implements `QueryFragment<__DB>`
               `(T0, T1, T2, T3)` implements `QueryFragment<__DB>`
               `(T0, T1, T2, T3, T4)` implements `QueryFragment<__DB>`
               `(T0, T1, T2, T3, T4, T5)` implements `QueryFragment<__DB>`
               `(T0, T1, T2, T3, T4, T5, T6)` implements `QueryFragment<__DB>`
             and N others
     = note: required for `(diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>, f64)` to implement `QueryFragment<Pg>`
     = note: 4 redundant requirements hidden
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `QueryFragment<Pg>`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `LoadQuery<'_, _, Vec<i32>>`
note: required by a bound in `get_result`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
     |        ---------- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
  
     
error[E0277]: the trait bound `f64: diesel::Expression` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:15:22
   |
LL |     select(array((1, 3f64)))
   |            -----     ^^^^ the trait `diesel::Expression` is not implemented for `f64`
   |            |
   |            required by a bound introduced by this call
   |
   = help: the following other types implement trait `diesel::Expression`:
             &T
             AliasedField<S, C>
             Box<T>
             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsIntermediateNode<W, T, Whens>, E>
             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::ElseExpression<E>>
             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::NoElseExpression>
             CountDistinct<T, E>
             CountStar
           and N others
   = note: required for `f64` to implement `AsExpression<diesel::sql_types::Integer>`
   = note: required for `(i32, f64)` to implement `AsExpressionList<diesel::sql_types::Integer>`
note: required by a bound in `diesel::dsl::array`
  --> DIESEL/diesel/diesel/src/pg/expression/array.rs
   |
LL | pub fn array<ST, T>(elements: T) -> dsl::array<ST, T>
   |        ----- required by a bound in this function
LL | where
LL |     T: IntoArrayExpression<ST>,
   |        ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `array`

error[E0277]: cannot select `{integer}` from `NoFromClause`
   --> tests/fail/array_expressions_must_be_same_type.rs:26:12
    |
26  |     select(array((1, 3f64)))
    |     ------ ^^^^^^^^^^^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `{integer}`
    |     |
    |     required by a bound introduced by this call
    |
    = note: `{integer}` is no valid selection for `NoFromClause`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              `&'a T` implements `SelectableExpression<QS>`
              `(T0, T1)` implements `SelectableExpression<QS>`
              `(T0, T1, T2)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3, T4)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3, T4, T5)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3, T4, T5, T6)` implements `SelectableExpression<QS>`
              `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `SelectableExpression<QS>`
            and N others
    = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `SelectableExpression<NoFromClause>`
    = note: 1 redundant requirement hidden
    = note: required for `ArrayLiteral<({integer}, Bound<Double, f64>), Double>` to implement `SelectableExpression<NoFromClause>`
    = note: required for `SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>`
    = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `Query`
    = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `AsQuery`
note: required by a bound in `diesel::select`
   --> DIESEL/diesel/diesel/src/query_builder/functions.rs
    |
LL | pub fn select<T>(expression: T) -> crate::dsl::select<T>
    |        ------ required by a bound in this function
...
LL |     crate::dsl::select<T>: AsQuery,
    |                            ^^^^^^^ required by this bound in `select`
 
    
error[E0277]: the trait bound `{integer}: ValidGrouping<()>` is not satisfied
   --> tests/fail/array_expressions_must_be_same_type.rs:26:12
    |
26  |     select(array((1, 3f64)))
    |     ------ ^^^^^^^^^^^^^^^^ the trait `ValidGrouping<()>` is not implemented for `{integer}`
    |     |
    |     required by a bound introduced by this call
    |
    = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
              `&T` implements `ValidGrouping<GB>`
              `(T0, T1)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3, T4)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3, T4, T5)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3, T4, T5, T6)` implements `ValidGrouping<__GroupByClause>`
              `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `ValidGrouping<__GroupByClause>`
            and N others
    = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `ValidGrouping<()>`
    = note: 1 redundant requirement hidden
    = note: required for `ArrayLiteral<({integer}, Bound<Double, f64>), Double>` to implement `ValidGrouping<()>`
    = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `Query`
    = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `AsQuery`
note: required by a bound in `diesel::select`
   --> DIESEL/diesel/diesel/src/query_builder/functions.rs
    |
LL | pub fn select<T>(expression: T) -> crate::dsl::select<T>
    |        ------ required by a bound in this function
...
LL |     crate::dsl::select<T>: AsQuery,
    |                            ^^^^^^^ required by this bound in `select`
 
    
error[E0277]: cannot select `{integer}` from `NoFromClause`
    --> tests/fail/array_expressions_must_be_same_type.rs:31:33
     |
31   |         .get_result::<Vec<f64>>(&mut connection)
     |          ----------             ^^^^^^^^^^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `{integer}`
     |          |
     |          required by a bound introduced by this call
     |
     = note: `{integer}` is no valid selection for `NoFromClause`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               `&'a T` implements `SelectableExpression<QS>`
               `(T0, T1)` implements `SelectableExpression<QS>`
               `(T0, T1, T2)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3, T4)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3, T4, T5)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3, T4, T5, T6)` implements `SelectableExpression<QS>`
               `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `SelectableExpression<QS>`
             and N others
     = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `SelectableExpression<NoFromClause>`
     = note: 1 redundant requirement hidden
     = note: required for `ArrayLiteral<({integer}, Bound<Double, f64>), Double>` to implement `SelectableExpression<NoFromClause>`
     = note: required for `SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `Query`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `LoadQuery<'_, _, Vec<f64>>`
note: required by a bound in `get_result`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
     |        ---------- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
  
     
error[E0277]: the trait bound `{integer}: ValidGrouping<()>` is not satisfied
    --> tests/fail/array_expressions_must_be_same_type.rs:31:33
     |
31   |         .get_result::<Vec<f64>>(&mut connection)
     |          ----------             ^^^^^^^^^^^^^^^ the trait `ValidGrouping<()>` is not implemented for `{integer}`
     |          |
     |          required by a bound introduced by this call
     |
     = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
               `&T` implements `ValidGrouping<GB>`
               `(T0, T1)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3, T4)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3, T4, T5)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3, T4, T5, T6)` implements `ValidGrouping<__GroupByClause>`
               `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `ValidGrouping<__GroupByClause>`
             and N others
     = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `ValidGrouping<()>`
     = note: 1 redundant requirement hidden
     = note: required for `ArrayLiteral<({integer}, Bound<Double, f64>), Double>` to implement `ValidGrouping<()>`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `Query`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `LoadQuery<'_, _, Vec<f64>>`
note: required by a bound in `get_result`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
     |        ---------- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
  
     
error[E0277]: the trait bound `{integer}: QueryId` is not satisfied
    --> tests/fail/array_expressions_must_be_same_type.rs:31:33
     |
31   |         .get_result::<Vec<f64>>(&mut connection)
     |          ----------             ^^^^^^^^^^^^^^^ the trait `QueryId` is not implemented for `{integer}`
     |          |
     |          required by a bound introduced by this call
     |
     = help: the following other types implement trait `QueryId`:
               &T
               ()
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
               (T0, T1, T2, T3, T4, T5)
               (T0, T1, T2, T3, T4, T5, T6)
             and N others
     = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `QueryId`
     = note: 3 redundant requirements hidden
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `QueryId`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `LoadQuery<'_, _, Vec<f64>>`
note: required by a bound in `get_result`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
     |        ---------- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
  
     
error[E0277]: `{integer}` is no valid SQL fragment for the `Pg` backend
    --> tests/fail/array_expressions_must_be_same_type.rs:31:33
     |
31   |         .get_result::<Vec<f64>>(&mut connection)
     |          ----------             ^^^^^^^^^^^^^^^ the trait `QueryFragment<Pg>` is not implemented for `{integer}`
     |          |
     |          required by a bound introduced by this call
     |
     = note: this usually means that the `Pg` database system does not support 
             this SQL syntax
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               `&T` implements `QueryFragment<DB>`
               `()` implements `QueryFragment<DB>`
               `(T0, T1)` implements `QueryFragment<__DB>`
               `(T0, T1, T2)` implements `QueryFragment<__DB>`
               `(T0, T1, T2, T3)` implements `QueryFragment<__DB>`
               `(T0, T1, T2, T3, T4)` implements `QueryFragment<__DB>`
               `(T0, T1, T2, T3, T4, T5)` implements `QueryFragment<__DB>`
               `(T0, T1, T2, T3, T4, T5, T6)` implements `QueryFragment<__DB>`
             and N others
     = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `QueryFragment<Pg>`
     = note: 4 redundant requirements hidden
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `QueryFragment<Pg>`
     = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<..., ...>>>` to implement `LoadQuery<'_, _, Vec<f64>>`
note: required by a bound in `get_result`
    --> DIESEL/diesel/diesel/src/query_dsl/mod.rs
     |
LL |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
     |        ---------- required by a bound in this associated function
LL |     where
LL |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
  
     
error[E0277]: the trait bound `{integer}: diesel::Expression` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:26:19
   |
LL |     select(array((1, 3f64)))
   |            -----  ^ the trait `diesel::Expression` is not implemented for `{integer}`
   |            |
   |            required by a bound introduced by this call
   |
   = help: the following other types implement trait `diesel::Expression`:
             &T
             AliasedField<S, C>
             Box<T>
             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsIntermediateNode<W, T, Whens>, E>
             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::ElseExpression<E>>
             CaseWhen<diesel::expression::case_when::non_public_types::CaseWhenConditionsLeaf<W, T>, diesel::expression::case_when::non_public_types::NoElseExpression>
             CountDistinct<T, E>
             CountStar
           and N others
   = note: required for `{integer}` to implement `AsExpression<diesel::sql_types::Double>`
   = note: required for `({integer}, f64)` to implement `AsExpressionList<diesel::sql_types::Double>`
note: required by a bound in `diesel::dsl::array`
  --> DIESEL/diesel/diesel/src/pg/expression/array.rs
   |
LL | pub fn array<ST, T>(elements: T) -> dsl::array<ST, T>
   |        ----- required by a bound in this function
LL | where
LL |     T: IntoArrayExpression<ST>,
   |        ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `array`

error[E0277]: cannot convert `(i32, f64)` into an expression of type `Array<diesel::sql_types::Integer>`
  --> tests/fail/array_expressions_must_be_same_type.rs:15:12
   |
LL |     select(array((1, 3f64)))
   |            ^^^^^^^^^^^^^^^^ the trait `AsExpressionList<diesel::sql_types::Integer>` is not implemented for `(i32, f64)`
   |
   = note: `the trait bound `(i32, f64): IntoArrayExpression<diesel::sql_types::Integer>` is not satisfied. (`AsExpressionList` is a deprecated trait alias for `IntoArrayExpression`)
   = help: the following other types implement trait `AsExpressionList<ST>`:
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
             (T0, T1, T2, T3, T4, T5, T6)
             (T0, T1, T2, T3, T4, T5, T6, T7)
             (T0, T1, T2, T3, T4, T5, T6, T7, T8)
           and N others

error[E0277]: cannot convert `({integer}, f64)` into an expression of type `Array<diesel::sql_types::Double>`
  --> tests/fail/array_expressions_must_be_same_type.rs:26:12
   |
LL |     select(array((1, 3f64)))
   |            ^^^^^^^^^^^^^^^^ the trait `AsExpressionList<diesel::sql_types::Double>` is not implemented for `({integer}, f64)`
   |
   = note: `the trait bound `({integer}, f64): IntoArrayExpression<diesel::sql_types::Double>` is not satisfied. (`AsExpressionList` is a deprecated trait alias for `IntoArrayExpression`)
   = help: the following other types implement trait `AsExpressionList<ST>`:
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
             (T0, T1, T2, T3, T4, T5, T6)
             (T0, T1, T2, T3, T4, T5, T6, T7)
             (T0, T1, T2, T3, T4, T5, T6, T7, T8)
           and N others
For more information about this error, try `rustc --explain E0277`.
