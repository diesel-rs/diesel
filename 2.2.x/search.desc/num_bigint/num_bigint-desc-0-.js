searchState.loadedDescShard("num_bigint", 0, "Big Integer Types for Rust\nA big signed integer type.\nA big unsigned integer type.\nA <code>Sign</code> is a <code>BigInt</code>’s composing element.\nA generic trait for converting a value to a <code>BigInt</code>. This …\nA generic trait for converting a value to a <code>BigUint</code>.\nThe error type returned when a checked conversion …\nAn iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …\nAn iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …\nA constant <code>BigInt</code> with value 0, useful for static …\nA constant <code>BigUint</code> with value 0, useful for static …\nReinitializes a <code>BigInt</code>.\nAssign a value to a <code>BigUint</code>.\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns whether the bit in position <code>bit</code> is set, using the …\nReturns whether the bit in the given position is set\nDetermines the fewest bits necessary to express the <code>BigInt</code>,\nDetermines the fewest bits necessary to express the <code>BigUint</code>…\nReturns the truncated principal cube root of <code>self</code> – see …\nReturns the truncated principal cube root of <code>self</code> – see …\nReturns the number of one bits.\nDeprecated, use <code>is_multiple_of</code> instead.\nDeprecated, use <code>is_multiple_of</code> instead.\nGreatest common divisor, least common multiple, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCalculates the Greatest Common Divisor (GCD) of the number …\nCalculates the Greatest Common Divisor (GCD) of the number …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the original value, if available. The value will …\nConvert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nCalculates the Lowest Common Multiple (LCM) of the number …\nCalculates the Lowest Common Multiple (LCM) of the number …\nReturns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.\nReturns the modular multiplicative inverse if it exists, …\nReturns the modular multiplicative inverse if it exists, …\nReturns <code>(self ^ exponent) mod modulus</code>\nReturns <code>(self ^ exponent) % modulus</code>.\nNegate <code>Sign</code> value.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nRounds up to nearest multiple of argument.\nRounds up to nearest multiple of argument.\nReturns the truncated principal <code>n</code>th root of <code>self</code> – See …\nReturns the truncated principal <code>n</code>th root of <code>self</code> – see …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>. The input slice must …\nReturns <code>self ^ exponent</code>.\nReturns <code>self ^ exponent</code>.\nRounds down to nearest multiple of argument.\nRounds down to nearest multiple of argument.\nSets or clears the bit in the given position, using the two…\nSets or clears the bit in the given position\nReturns the sign of the <code>BigInt</code> as a <code>Sign</code>.\nReturns the truncated principal square root of <code>self</code> – …\nReturns the truncated principal square root of <code>self</code> – …\nConverts the value of <code>self</code> to a <code>BigInt</code>.\nConverts the value of <code>self</code> to a <code>BigUint</code>.\nConverts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the byte representation of the <code>BigUint</code> in …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the byte representation of the <code>BigUint</code> in …\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in little-endian …\nReturns the integer in the requested base in little-endian …\nReturns the two’s-complement byte representation of the …\nReturns the two’s-complement byte representation of the …\nReturns the integer formatted as a string in the given …\nReturns the integer formatted as a string in the given …\nReturns the sign and the <code>u32</code> digits representation of the …\nReturns the <code>u32</code> digits representation of the <code>BigUint</code> …\nReturns the sign and the <code>u64</code> digits representation of the …\nReturns the <code>u64</code> digits representation of the <code>BigUint</code> …\nReturns the number of least-significant bits that are ones.\nReturns the number of least-significant bits that are zero,\nReturns the number of least-significant bits that are zero,")