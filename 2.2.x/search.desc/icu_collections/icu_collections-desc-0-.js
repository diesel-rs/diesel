searchState.loadedDescShard("icu_collections", 0, "Efficient collections for Unicode data.\nThis module provides a data structure for a …\nThis module provides necessary functionality for highly …\nThis module provides functionality for querying of sets of …\nThis module provides a data structure for an …\nThis struct represents a de-serialized <code>Char16Trie</code> that was …\nThis struct represents an iterator over a <code>Char16Trie</code>.\nThe input unit(s) continued a matching string and there is …\nThe input unit(s) continued a matching string and there is …\nThe input unit(s) did not continue a matching string. Once …\nThe input unit(s) matched a string but there is no value …\nAn enum representing the return value from a lookup in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Char16TrieIterator</code> backed by borrowed data …\nReturns a new <code>Char16Trie</code> with ownership of the provided …\nReturns a new <code>Char16TrieIterator</code> backed by borrowed data …\nTraverses the trie from the current state for this input …\nTraverses the trie from the current state for this input …\nTraverses the trie from the current state for this input …\nA membership wrapper for <code>CodePointInversionList</code>.\n<code>VarULE</code> type for <code>CodePointInversionList</code>. See …\nA CodePointInversionList was constructed with an invalid …\nA CodePointInversionList was constructed from an invalid …\nReturns <code>CodePointInversionList</code> spanning entire Unicode …\nReturns <code>CodePointInversionList</code> spanning BMP range\nChecks to see the query is in the <code>CodePointInversionList</code>\nChecks to see the unsigned int is in the …\nChecks to see if the range is in the <code>CodePointInversionList</code>\nCheck if the calling <code>CodePointInversionList</code> contains all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a specific range contained in this …\nReturns the number of ranges contained in this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not the <code>CodePointInversionList</code> is empty\nYields an <code>Iterator</code> going through the character set in the …\nYields an <code>Iterator</code> returning the ranges of the code points …\nYields an <code>Iterator</code> returning the ranges of the code points …\nReturns the number of elements of the …\nReturns the end of the initial substring where the …\nReturns the start of the trailing substring (starting from …\nReturns a new <code>CodePointInversionList</code> from an inversion list\nA data structure providing a concrete implementation of a …\n<code>VarULE</code> type for <code>CodePointInversionListAndStringList</code>. See …\nA string in the string list had an invalid length\nCustom Errors for <code>CodePointInversionListAndStringList</code>.\nTwo strings in the string list compare to each other …\nA string in the string list appears more than once\nAccess the underlying <code>CodePointInversionList</code>.\nExamples\nExamples\nExamples\nAccess the VarULE type behind the unsized <code>cp_inv_list</code> field\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn true if this set contains multi-code point strings …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of elements in this set (its …\nAccess the VarULE type behind the unsized <code>str_list</code> field\nAccess the contained strings.\nReturns a new <code>CodePointInversionListAndStringList</code> from …\nRepresents a range of consecutive code points sharing the …\nA custom <code>Iterator</code> type specifically for a code point trie …\nThis struct represents a de-serialized <code>CodePointTrie</code> that …\nA custom error type for <code>CodePointTrie</code>.\nThis struct contains the fixed-length header fields of a …\n<code>CodePointTrie</code> must be constructed from data vector with at …\nRepresents the “fast” type code point tries for the …\nCould not construct <code>CodePointTrie</code> from deserialized values\nRepresents the “small” type code point tries for the …\nThe type of trie represents whether the trie has an …\nA trait representing the values stored in the data array …\nLast-resort fallback value to return if we cannot read …\nInternal data null block offset, not shifted. Set to an …\nReturns the value used as an error value for this trie\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value that is associated with <code>char</code> in this …\nReturns the value that is associated with <code>code_point</code> in …\nReturns the value that is associated with <code>code_point</code> for …\nReturns a reference to the ULE of the value that is …\nReturns a <code>CodePointMapRange</code> struct which represents a …\nThe code point of the start of the last range of the trie. …\nOffset for the null block in the “index-3” table of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nYields an <code>Iterator</code> returning ranges of consecutive code …\nYields an <code>Iterator</code> returning the ranges of the code points …\nYields an <code>Iterator</code> returning the ranges of the code points …\nThe value stored in the trie that represents a null value …\nSample data for <code>CodePointTrie</code> that returns the code point…\nRange of code points from start to end (inclusive).\nA version of the <code>high_start</code> value that is right-shifted 12 …\nA method for converting back to a <code>u32</code> that can roundtrip …\nThe enum value representing the type of trie, where trie …\nA parsing function that is primarily motivated by …\nReturns a new <code>CodePointTrie</code> backed by borrowed data for …\nTrie value associated with this range.\nReason for inability to deserialize values.\nReturn a <code>CodePointTrie</code> that returns the Unicode plane …")