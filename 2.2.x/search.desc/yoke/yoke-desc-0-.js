searchState.loadedDescShard("yoke", 0, "This crate provides <code>Yoke&lt;Y, C&gt;</code>, which allows one to “yoke…\nThis trait marks cart types that do not change source on …\nThis type MUST be <code>Self</code> with the <code>&#39;static</code> replaced with <code>&#39;a</code>, …\nA Cow-like borrowed object “yoked” to its backing data.\nThe <code>Yokeable&lt;&#39;a&gt;</code> trait is implemented on the <code>&#39;static</code> …\nCustom derive for <code>yoke::Yokeable</code>,\nConstruct a <code>Yoke</code> by yokeing an object to a cart in a …\nUse <code>Yoke::attach_to_cart()</code>.\nConstruct a <code>Yoke</code><code>&lt;Y, C&gt;</code> from a cart implementing <code>StableDeref</code>…\nGet a reference to the backing cart.\nTypes for optional pointers with niche optimization.\nConverts a <code>Yoke&lt;Y, Option&lt;C&gt;&gt;</code> to …\nTypes to enable polymorphic carts.\nAllows type-erasing the cart in a <code>Yoke&lt;Y, Arc&lt;C&gt;&gt;</code>.\nAllows type-erasing the cart in a <code>Yoke&lt;Y, Box&lt;C&gt;&gt;</code>.\nAllows type-erasing the cart in a <code>Yoke&lt;Y, Rc&lt;C&gt;&gt;</code>.\nThis module contains helper types for erasing Cart types.\nReturns the argument unchanged.\nObtain a valid reference to the yokeable data\nCalls <code>U::from(self)</code>.\nGet the backing cart by value, dropping the yokeable …\nObtain the yokeable out of a <code>Yoke&lt;Y, ()&gt;</code>\nThis method can be used to cast away <code>Self&lt;&#39;a&gt;</code>’s lifetime.\nAllows one to “project” a yoke to perform a …\nThis is similar to <code>Yoke::map_project</code>, however it does not …\nThis is similar to <code>Yoke::map_project_cloned</code>, but it works …\nThis is similar to <code>Yoke::map_project</code>, but it works around …\nConstruct a new <code>Yoke</code> from static data. There will be no …\nConstruct a new <code>Yoke</code> from static data. There will be no …\nUnsafe function for replacing the cart with another\nThis method must cast <code>self</code> between <code>&amp;&#39;a Self&lt;&#39;static&gt;</code> and …\nThis method must cast <code>self</code> between <code>&amp;&#39;a mut Self&lt;&#39;static&gt;</code> …\nThis method must cast <code>self</code> between <code>Self&lt;&#39;static&gt;</code> and …\nConstruct a <code>Yoke</code> by yokeing an object to a cart. If an …\nUse <code>Yoke::try_attach_to_cart()</code>.\nObtain the yokeable out of a …\nObtain the yokeable out of a <code>Yoke&lt;Y, Option&lt;C&gt;&gt;</code> if …\nThis is similar to <code>Yoke::map_project</code>, however it can also …\nThis is similar to <code>Yoke::try_map_project</code>, however it does …\nThis is similar to <code>Yoke::try_map_project_cloned</code>, but it …\nThis is similar to <code>Yoke::try_map_project</code>, but it works …\nMutate the stored <code>Yokeable</code> data.\nHelper function allowing one to wrap the cart type <code>C</code> in an …\nHelper function allowing one to wrap the cart type <code>C</code> in a …\nHelper function allowing one to wrap the cart type <code>C</code> in an …\nHelper function allowing one to wrap the cart type <code>C</code> in an …\nHelper function allowing one to wrap the cart type <code>C</code> in an …\nHelper function allowing one to wrap the cart type <code>C</code> in an …\nA type with similar semantics as <code>Option&lt;C&lt;T&gt;&gt;</code> but with a …\nAn object fully representable by a non-null pointer.\nAn object that implements <code>CartablePointerLike</code> that also …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether this instance is <code>None</code>. From the return …\nA cart that can be one type or the other. Enables …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type-erased Cart that has <code>Arc</code> semantics\nA type-erased Cart that has <code>Box</code> semantics\nDummy trait that lets us <code>dyn Drop</code>\nA type-erased Cart that has <code>Rc</code> semantics")