searchState.loadedDescShard("bigdecimal", 0, "A Big Decimal\nA big decimal type.\nImmutable big-decimal, referencing a borrowed buffer of …\nMathematical Context\nA generic trait for converting a number to a value.\nThe base trait for numeric types, covering <code>0</code> and <code>1</code> values, …\nDefines a multiplicative identity element for <code>Self</code>.\nThe result after applying the operator.\nBinary operator for raising a value to a power.\nUseful functions for signed numbers (i.e. numbers that can …\nA generic trait for converting a value to a number.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nCompute the absolute value of number\nTake absolute value of the decimal (non-negative sign)\nThe positive difference of two numbers.\nAdd two big digit references\nAdd two decimal refs, storing value in dest\nReturn the internal big integer value and an exponent. …\nReturn digits as borrowed Cow of integer digits, and its …\nTake the cube root of the number, using default context\nTake cube root of self, using properties of context\nClone this value into dest\nComplete ordering implementation for BigDecimal\nCount total number of decimal digits\nCube a decimal: <em>x³</em>\nNumber of digits in the non-scaled integer representation\nMultiply decimal by 2 (efficiently)\nEvaluate the natural-exponential function ex\nReturns the scale of the BigDecimal, the total number of …\nReturn number of digits ‘right’ of the decimal point …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct BigDecimal from BigInt and a scale\nConstruct positive BigDecimal from BigUint and a scale\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConvert from a string and radix (typically <code>2..=36</code>).\nCreates and initializes a BigDecimal.\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nDivide decimal by 2 (efficiently)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into the internal big integer value and an …\nTake BigDecimal and split into <code>num::BigInt</code> of digits, and …\nCompute the reciprical of the number: x-1\nReturn inverse of self, rounding with ctx\nReturn true if this number has zero fractional part (is …\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturn if the referenced decimal is zero\nCreate context with precision and rounding mode\nCreates and initializes a <code>BigDecimal</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nCreates and initializes a <code>BigDecimal</code>.\nReturns <code>self</code> to the power <code>rhs</code>.\nReturn maximum precision\nReturn given number rounded to ‘round_digits’ …\nRound decimal to precision in this context, using …\nRound decimal to precision in this context, using …\nCreate BigDecimal from this reference, rounding to …\nRounding structures and subroutines\nReturn rounding mode\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturn the sign of the <code>BigDecimal</code> as <code>num::bigint::Sign</code>.\nSign of decimal\nReturns the sign of the number.\nTake the square root of the number\nTake square root of absolute-value of the number\nTake square root, copying sign of the initial decimal\nTake the square root of the number, using context for …\nTake square root of this number\nSquare a decimal: <em>x²</em>\nCreate string of this bigdecimal in engineering notation\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nClone digits to make this reference a full BigDecimal …\nClone digits, returning BigDecimal with given scale\nCreate string of decimal in standard decimal notation.\nMake a BigDecimalRef of this value\nCreate string of this bigdecimal in scientific notation\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nCopy context with new precision value\nReturn a new BigDecimal object with precision set to new …\nCopy context with new precision value\nReturn this BigDecimal with the given precision, rounding …\nCopy context with new rounding mode\nReturn a new BigDecimal object equivalent to self, with …\nReturn a new BigDecimal after shortening the digits and …\nWrite bigdecimal in engineering notation to writer <code>w</code>\nWrite decimal value in decimal notation to the writer …\nWrite bigdecimal in scientific notation to writer <code>w</code>\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nTowards +∞\nAlways round towards zero\nTowards -∞\nRound to ‘nearest neighbor’, or down if ending decimal …\nRound to ‘nearest neighbor’, if equidistant, round …\nRound to ‘nearest neighbor’, or up if ending decimal …\nDetermines how to calculate the last digit of the number\nAlways round away from zero\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerform the rounding operation\nRound value at particular digit, returning replacement …")