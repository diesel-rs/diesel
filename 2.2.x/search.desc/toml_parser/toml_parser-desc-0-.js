searchState.loadedDescShard("toml_parser", 0, "TOML lexer and parser\nA slice of <code>Source</code>\nData encoded as TOML\nA helper trait used for indexing operations on <code>Source</code>\nLocation within the <code>Source</code>\nExtend this <code>Raw</code> to the end of <code>after</code>\nDecode raw TOML values into Rust native types\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a subslice of the input\nReturn a subslice of the input\nAccess the TOML encoded <code>&amp;str</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart lexing the TOML encoded data\nLex TOML tokens\nA TOML push parser\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnything else\nValue separator\nEither for dotted-key or float\nKey-value separator\nInline table start\nEither array or standard-table start\nLex TOML tokens\nInline table end\nEither array or standard-table end\nAn unvalidated TOML Token\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCentralize validation for all whitespace-like content\nReturns if entering the array is allowed\nReturns if entering the array is allowed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns if entering the inline table is allowed\nReturns if entering the inline table is allowed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse lexed tokens into <code>Event</code>s\nParse lexed tokens into <code>Event</code>s\nParse lexed tokens into <code>Event</code>s\nParse lexed tokens into <code>Event</code>s")