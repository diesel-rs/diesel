searchState.loadedDescShard("zerotrie", 0, "A data structure offering zero-copy storage and retrieval …\nThe trie reached its maximum supported capacity.\nThe builder could not solve the perfect hash function.\nMixed-case data was added to a case-insensitive trie.\nNon-ASCII data was added to an ASCII-only trie.\nA data structure that compactly maps from ASCII strings to …\nA data structure that compactly maps from byte sequences …\nError types for the <code>zerotrie</code> crate.\nA data structure that maps from a large number of byte …\nA data structure that compactly maps from byte strings to …\nA data structure that compactly maps from ASCII strings to …\nReturns this trie as a reference transparent over a byte …\nReturns this trie as a reference transparent over a byte …\nReturns this trie as a reference transparent over a byte …\nReturns this trie as a reference transparent over a byte …\nReturns a trie with a store borrowing from this trie.\nReturns a trie with a store borrowing from this trie.\nReturns a trie with a store borrowing from this trie.\nReturns a trie with a store borrowing from this trie.\nReturns the bytes contained in the underlying store.\nReturns the bytes contained in the underlying store.\nReturns the bytes contained in the underlying store.\nReturns the bytes contained in the underlying store.\nReturns the size of the trie in number of bytes.\nReturns the size of the trie in number of bytes.\nReturns the size of the trie in number of bytes.\nReturns the size of the trie in number of bytes.\nReturns the size of the trie in number of bytes.\nConverts this trie’s store to a different store …\nConverts this trie’s store to a different store …\nConverts this trie’s store to a different store …\nConverts this trie’s store to a different store …\nConverts this trie’s store to a different store …\nTypes for walking stepwise through a trie.\nGets a cursor into the current trie.\nGets a cursor into the current trie.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCasts from a byte slice to a reference to a trie with the …\nCasts from a byte slice to a reference to a trie with the …\nCasts from a byte slice to a reference to a trie with the …\nCasts from a byte slice to a reference to a trie with the …\n<strong>Const Constructor:</strong> Creates an <code>ZeroTrieSimpleAscii</code> from a …\n<strong>Const Constructor:</strong> Creates an <code>ZeroTrieSimpleAscii</code> from a …\nCreate a trie directly from a store.\nCreate a trie directly from a store.\nCreate a trie directly from a store.\nCreate a trie directly from a store.\nQueries the trie for a string.\nQueries the trie for a string.\nQueries the trie for a string.\nQueries the trie for a string.\nQueries the trie for a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSame as <code>ZeroTrieSimpleAscii::cursor()</code> but moves self to …\nSame as <code>ZeroAsciiIgnoreCaseTrie::cursor()</code> but moves self …\nTakes the byte store from this trie.\nTakes the byte store from this trie.\nTakes the byte store from this trie.\nTakes the byte store from this trie.\nTakes the byte store from this trie.\nWrap this specific ZeroTrie variant into a ZeroTrie.\nWrap this specific ZeroTrie variant into a ZeroTrie.\nWrap this specific ZeroTrie variant into a ZeroTrie.\nReturns <code>true</code> if the trie is empty.\nReturns <code>true</code> if the trie is empty.\nReturns <code>true</code> if the trie is empty.\nReturns <code>true</code> if the trie is empty.\nReturns <code>true</code> if the trie is empty.\nInformation about a probed edge.\nA cursor into a <code>ZeroAsciiIgnoreCaseTrie</code>, useful for …\nA cursor into a <code>ZeroTrieSimpleAscii</code>, useful for stepwise …\nThe character’s byte value between this node and its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the cursor points to an empty trie.\nChecks whether the cursor points to an empty trie.\nSteps the cursor one character into the trie based on an …\nProbes the next byte in the cursor.\nSteps the cursor one character into the trie based on the …\nSteps the cursor one byte into the trie.\nTakes the value at the current position.\nTakes the value at the current position.\nThe number of siblings of this node, <em>including itself</em>.\nEquivalent to <code>ZeroTrieSimpleAsciiCursor::step()</code>, except …\nEquivalent to <code>ZeroAsciiIgnoreCaseTrieCursor::step()</code>, …\nSteps the cursor through each ASCII byte of the string.\nSteps the cursor through each ASCII byte of the string.")