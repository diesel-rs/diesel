searchState.loadedDescShard("zerovec", 0, "Zero-copy vector abstractions for arbitrary types, backed …\nCopy-on-write type that efficiently represents <code>VarULE</code> …\nA zero-copy “slice”, that works for unsized types, …\nA zero-copy, byte-aligned vector for variable-width types.\nA zero-copy map datastructure, built on sorted …\nA zero-copy, two-dimensional map datastructure .\nA zero-copy “slice”, i.e. the zero-copy version of <code>[T]</code>.\nA zero-copy, byte-aligned vector for fixed-width types.\nCreates a <code>ZeroVec&lt;T&gt;</code> from a <code>&amp;[T]</code> by allocating memory.\nObtain a borrowed version of this map\nObtain a borrowed version of this map\nGet the byte representation of this type\nGet a reference to the entire encoded backing buffer of …\nReturns this slice as its underlying <code>&amp;[u8]</code> byte buffer …\nIf this is a borrowed <code>ZeroVec</code>, return it as a slice that …\nObtain this <code>VarZeroVec</code> as a <code>VarZeroSlice</code>\nReturns this <code>ZeroVec</code> as a <code>ZeroSlice</code>.\nDereferences this slice as <code>&amp;[T::ULE]</code>.\nGet this <code>VarZeroSlice</code> as a borrowed <code>VarZeroVec</code>\nGet this <code>ZeroSlice</code> as a borrowed <code>ZeroVec</code>\nBinary searches a sorted <code>VarZeroVec&lt;T&gt;</code> for the given …\nBinary searches a sorted <code>ZeroVec&lt;T&gt;</code> for the given element. …\nBinary searches a sorted <code>VarZeroVec&lt;T&gt;</code> for the given …\nBinary searches a sorted <code>ZeroVec&lt;T&gt;</code> based on a given …\nBinary searches a <code>VarZeroVec&lt;T&gt;</code> for the given element …\nBinary searches a <code>VarZeroVec&lt;T&gt;</code> for the given predicate …\nCasts a <code>ZeroSlice&lt;T&gt;</code> to a compatible <code>ZeroSlice&lt;P&gt;</code>.\nCasts a <code>ZeroVec&lt;T&gt;</code> to a compatible <code>ZeroVec&lt;P&gt;</code>.\nCast a <code>ZeroMap&lt;K, V&gt;</code> to <code>ZeroMap&lt;P, V&gt;</code> where <code>K</code> and <code>P</code> are …\nCast a <code>ZeroMap&lt;K, V&gt;</code> to <code>ZeroMap&lt;K, P&gt;</code> where <code>V</code> and <code>P</code> are …\nRemove all elements from the <code>ZeroMap</code>\nRemove all elements from the <code>ZeroMap2d</code>\nRemove all elements from this ZeroVec and reset it to an …\nSame as <code>ZeroSlice::len</code>, which is available through <code>Deref</code> …\nReturns whether <code>key</code> is contained in this map\nReturns whether <code>key0</code> is contained in this map\nGets the first element. Returns <code>None</code> if empty.\nMutates each element according to a given function, meant …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>Box&lt;ZeroSlice&lt;T&gt;&gt;</code> from a boxed slice of ULEs\nConstruct from a slice that is known to represent a valid <code>V</code>\nUses a <code>&amp;[u8]</code> buffer as a <code>VarZeroSlice&lt;T&gt;</code> without any …\nUses a <code>&amp;[u8]</code> buffer as a <code>VarZeroVec&lt;T&gt;</code> without any …\nUses a <code>&amp;[u8]</code> buffer as a <code>ZeroVec&lt;T&gt;</code> without any …\nUses a <code>&amp;[u8]</code> buffer as a <code>ZeroVec&lt;T&gt;</code> without any …\nConstruct this from an <code>EncodeAsVarULE</code> version of the …\nCreates an owned <code>ZeroVec</code> from an iterator of values.\nCreates a <code>ZeroVec&lt;&#39;a, T&gt;</code> from a <code>&amp;&#39;a [T]</code>, either by …\nConstruct a <code>&amp;ZeroSlice&lt;T&gt;</code> from a slice of ULEs.\nGet the value associated with <code>key</code>, if it exists.\nGet one of this slice’s elements, returning <code>None</code> if the …\nGets the element at the specified index. Returns <code>None</code> if …\nGets a cursor for <code>key0</code>. If <code>None</code>, then <code>key0</code> is not in the …\nBinary search the map for <code>key0</code>, returning a cursor.\nGet the value associated with <code>key0</code> and <code>key1</code>, if it exists.\nGets the entire slice as an array of length <code>N</code>. Returns <code>None</code>…\nBinary search the map with <code>predicate</code> to find a key, …\nFor cases when <code>V</code> is fixed-size, obtain a direct copy of <code>V</code> …\nFor cases when <code>V</code> is fixed-size, obtain a direct copy of <code>V</code> …\nBinary search the map with <code>predicate</code> to find a key, …\nGets a subslice of elements within a certain range. …\nGet a borrowed reference to the underlying ULE type at a …\nGet one of this slice’s elements\nGiven <code>Self</code> (<code>$aligned</code>), <code>Self::ULE</code> (<code>$unaligned</code>), and a …\nInsert <code>value</code> with <code>key</code>, returning the existing value if it …\nInsert <code>value</code> with <code>key</code>, returning the existing value if it …\nSame as <code>insert()</code>, but allows using EncodeAsVarULE types …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes the byte vector representing the encoded data of …\nConverts a <code>ZeroVec&lt;T&gt;</code> into a <code>ZeroVec&lt;u8&gt;</code>, retaining the …\nConverts the type into a <code>Cow&lt;&#39;a, [T::ULE]&gt;</code>, which is the …\nConverts a borrowed ZeroVec to an owned ZeroVec. No-op if …\nConverts a borrowed ZeroVec to an owned ZeroVec. No-op if …\nWhether the <code>ZeroMap</code> is empty\nWhether the <code>ZeroMap2d</code> is empty\nReturns <code>true</code> if the slice contains no elements.\nReturns whether this slice is empty.\nWhether or not this is owned\nReturn whether the <code>VarZeroVec</code> is operating on owned or …\nCheck if this type is fully owned\nProduce an ordered iterator over key-value pairs\nObtain an iterator over this slice’s elements\nGets an iterator over the elements.\nProduce an ordered iterator over keys0, which can then be …\nSimilar to <code>Self::iter()</code> except it returns a direct copy of …\nSimilar to <code>Self::iter()</code> except it returns a direct copy of …\nProduce an ordered iterator over keys\nProduce an iterator over values, ordered by keys\nGets the last element. Returns <code>None</code> if empty.\nThe number of elements in the <code>ZeroMap</code>\nThe number of values in the <code>ZeroMap2d</code>\nGet the number of elements in this slice\nReturns the number of elements in this slice.\nConvert this into a mutable vector of the owned <code>T</code> type, …\nGenerate a corresponding <code>ULE</code> type and the relevant <code>AsULE</code> …\nGenerate a corresponding <code>VarULE</code> type and the relevant …\nThis module contains additional utility types and traits …\nCreates a new, empty <code>ZeroMap&lt;K, V&gt;</code>.\nCreates a new, empty <code>ZeroMap2d</code>.\nCreates a new, empty <code>VarZeroVec&lt;T&gt;</code>.\nCreates a new, borrowed, empty <code>ZeroVec&lt;T&gt;</code>.\nConstruct a new borrowed version of this\nCreates a new borrowed <code>ZeroVec</code> using an existing backing …\nConstruct a new empty VarZeroSlice\nReturns an empty slice.\nConstruct a new borrowed version of this\nCreates a new owned <code>ZeroVec</code> using an existing allocated …\nIf the ZeroVec is owned, returns the capacity of the …\nConstruct from a slice. Errors if the slice doesn’t …\nParse a VarZeroSlice from a slice of the appropriate format\nParse a VarZeroVec from a slice of the appropriate format\nAttempt to construct a <code>&amp;ZeroSlice&lt;T&gt;</code> from a byte slice, …\nParses a <code>&amp;[u8]</code> buffer into a <code>ZeroVec&lt;T&gt;</code>.\nConstruct from an owned slice. Errors if the slice doesn’…\nRemove the value at <code>key</code>, returning it if it exists.\nRemove the value at <code>key</code>, returning it if it exists.\nReserve capacity for <code>additional</code> more elements to be …\nReserve capacity for <code>additional</code> more elements to be …\nReturns a tuple with the first element and a subslice of …\nRemoves the first element of the ZeroVec. The ZeroVec …\nRemoves the last element of the ZeroVec. The ZeroVec …\nAllows the ZeroVec to be mutated by converting it to an …\nObtain an owned <code>Vec&lt;Box&lt;T&gt;&gt;</code> out of this\nCreates a <code>Vec&lt;T&gt;</code> from a <code>ZeroVec&lt;T&gt;</code>.\nAppends <code>value</code> with <code>key</code> to the end of the underlying …\nAppends <code>value</code> with <code>key</code> to the end of the underlying …\nConverts a <code>&amp;ZeroSlice&lt;T&gt;</code> into a <code>&amp;ZeroSlice&lt;P&gt;</code>.\nConvert a <code>ZeroMap&lt;K, V&gt;</code> to <code>ZeroMap&lt;P, V&gt;</code> where <code>K</code> and <code>P</code> are …\nConvert a <code>ZeroMap&lt;K, V&gt;</code> to <code>ZeroMap&lt;K, P&gt;</code> where <code>V</code> and <code>P</code> are …\nSame as <code>ZeroVec::for_each_mut()</code>, but bubbles up errors.\nThis function can be used for constructing ZeroVecs in a …\nThis function can be used for constructing ZeroVecs in a …\nThis function can be used for constructing ZeroVecs in a …\nThis function can be used for constructing ZeroVecs in a …\nThis function can be used for constructing ZeroVecs in a …\nThis function can be used for constructing ZeroVecs in a …\nAttempts to create a <code>ZeroVec&lt;&#39;a, T&gt;</code> from a <code>&amp;&#39;a [T]</code> by …\nConverts a <code>ZeroVec&lt;T&gt;</code> into a <code>ZeroVec&lt;P&gt;</code>, retaining the …\nConverts a <code>ZeroVec&lt;u8&gt;</code> into a <code>ZeroVec&lt;T&gt;</code>, retaining the …\nTraits over unaligned little-endian data (ULE, pronounced …\nThis module contains additional utility types for working …\nConstruct a new <code>ZeroMap</code> with a given capacity\nConstruct a new <code>ZeroMap2d</code> with a given capacity\nCreates a new, owned, empty <code>ZeroVec&lt;T&gt;</code>, with a certain …\nAllows the ZeroVec to be mutated by converting it to an …\nConvenience wrapper for <code>ZeroSlice::from_ule_slice</code>. The …\nCreates a borrowed <code>ZeroVec</code>. Convenience wrapper for …\nThe container that can be used with this type: <code>ZeroVec</code> or …\nThe type produced by <code>Container::get()</code>\nThe type returned by <code>Self::get()</code>\nTrait abstracting over <code>ZeroVec</code> and <code>VarZeroVec</code>, for use in …\nThe type produced by <code>Container::replace()</code> and …\nThe type returned by <code>Self::remove()</code> and <code>Self::replace()</code>\nA fully borrowed version of this\nA borrowed-only version of <code>ZeroMap2d</code>\nAn intermediate state of queries over <code>ZeroMap2d</code> and …\nA borrowed-only version of <code>ZeroMap</code>\nTrait marking types which are allowed to be keys or values …\nTrait abstracting over <code>ZeroVec</code> and <code>VarZeroVec</code>, for use in …\nReturns whether <code>key</code> is contained in this map\nReturns whether <code>key0</code> is contained in this map\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value associated with <code>key</code>, if it exists.\nGets a cursor for <code>key0</code>. If <code>None</code>, then <code>key0</code> is not in the …\nBinary search the map for <code>key0</code>, returning a cursor.\nGets the value for a key1 from this cursor, or <code>None</code> if …\nGets the value for a predicate from this cursor, or <code>None</code> …\nFor cases when <code>V</code> is fixed-size, obtain a direct copy of <code>V</code> …\nFor cases when <code>V</code> is fixed-size, obtain a direct copy of <code>V</code> …\nGet the value associated with <code>key0</code> and <code>key1</code>, if it exists.\nBinary search the map with <code>predicate</code> to find a key, …\nCompare two values of <code>Self::GetType</code>. This must produce the …\nCompare two values of <code>Self::GetType</code>. This must produce the …\nFor cases when <code>V</code> is fixed-size, obtain a direct copy of <code>V</code> …\nFor cases when <code>V</code> is fixed-size, obtain a direct copy of <code>V</code> …\nFor cases when <code>V</code> is fixed-size, obtain a direct copy of <code>V</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform this cursor into an ordered iterator over keys1 …\nTransform this cursor into an ordered iterator over keys1 …\nWhether the <code>ZeroMapBorrowed</code> is empty\nWhether the <code>ZeroMap2dBorrowed</code> is empty\nProduce an ordered iterator over key-value pairs\nProduce an ordered iterator over keys0\nBorrow an ordered iterator over keys1 and values for a …\nBorrow an ordered iterator over keys1 and values for a …\nSimilar to <code>Self::iter()</code> except it returns a direct copy of …\nSimilar to <code>Self::iter()</code> except it returns a direct copy of …\nProduce an ordered iterator over keys\nProduce an iterator over values, ordered by keys\nReturns the key0 corresponding to the cursor position.\nThe number of elements in the <code>ZeroMapBorrowed</code>\nThe number of elements in the <code>ZeroMap2dBorrowed</code>\nCreates a new, empty <code>ZeroMapBorrowed&lt;K, V&gt;</code>.\nCreates a new, empty <code>ZeroMap2dBorrowed&lt;K0, K1, V&gt;</code>.\nConvert an owned value to a borrowed T\nCompare this type with a <code>Self::GetType</code>. This must produce …\nCompare this type with a <code>Self::GetType</code>. This must produce …\nConstruct a borrowed variant by borrowing from <code>&amp;self</code>.\nExtract the inner borrowed variant if possible. Returns …\nSearch for a key in a sorted vector, returns <code>Ok(index)</code> if …\nSearch for a key in a sorted vector by a predicate, …\nSearch for a key within a certain range in a sorted vector.\nSearch for a key within a certain range in a sorted vector …\nRemove all elements from the vector\nConstruct from the borrowed version of the type\nGet element at <code>index</code>\nObtain a reference to T, passed to a closure\nInsert an element at <code>index</code>\nCheck if this vector is in ascending order according to <code>T</code>s …\nCheck if this vector is in ascending order according to <code>T</code>s …\nCheck if this vector is empty\nCheck if this vector is empty\nThe length of this vector\nCreate a new, empty borrowed variant\nApplies the permutation such that …\nPush an element to the end of this vector\nRemove the element at <code>index</code> (panicking if nonexistant)\nReplace the element at <code>index</code> with another one, returning …\nReserve space for <code>addl</code> additional elements\nCreate a new, empty vector, with given capacity\nA trait for any type that has a 1:1 mapping with an …\nA u8 array of little-endian data corresponding to a …\nAllows types to be encoded as VarULEs. This is highly …\nA type whose byte sequence equals the byte sequence of its …\nAttempted to parse a buffer into a slice of the given ULE …\nThis type is used by the custom derive to represent …\nThe <code>ULE</code> types implementing this trait guarantee that …\nOptional type which uses <code>NichedOptionULE&lt;U,N&gt;</code> as ULE type.\n<code>ULE</code> type for <code>NichedOption&lt;U,N&gt;</code> where U implements …\nThis type is the <code>ULE</code> type for <code>Option&lt;U&gt;</code> where <code>U</code> is a <code>ULE</code> …\nA type allowing one to represent <code>Option&lt;U&gt;</code> for <code>VarULE</code> <code>U</code> …\nThe byte sequence provided for <code>ty</code> failed to parse …\nA u8 array of little-endian data with infallible …\nA trait for a type where aligned slices can be cast to …\nFixed-width, byte-aligned data that can be cast to and …\nThe ULE type corresponding to <code>Self</code>.\nCustom derive for <code>ULE</code>.\nAn error type to be used for decoding slices of ULE types\nVariable-width, byte-aligned data that can be cast to and …\nCustom derive for <code>VarULE</code>\nGiven <code>&amp;Self</code>, returns a <code>&amp;[u8]</code> with the same lifetime.\nGet the bytes behind this value\nBorrows as an <code>Option&lt;&amp;U&gt;</code>.\nObtain this as an <code>Option&lt;&amp;U&gt;</code>\nGets this <code>RawBytesULE</code> as a <code>u128</code>. This is equivalent to …\nGets this <code>RawBytesULE</code> as a <code>u64</code>. This is equivalent to …\nGets this <code>RawBytesULE</code> as a <code>u32</code>. This is equivalent to …\nGets this <code>RawBytesULE</code> as a <code>u16</code>. This is equivalent to …\nCompute the amount of bytes needed to support elements …\nDocumentation on implementing custom VarULE types.\nCalls <code>cb</code> with a piecewise list of byte slices that when …\nReturn the length, in bytes, of the corresponding <code>VarULE</code> …\nReturn the length, in bytes, of the corresponding <code>VarULE</code> …\nWrite the corresponding <code>VarULE</code> type to the <code>dst</code> buffer. <code>dst</code> …\nWrite the corresponding <code>VarULE</code> type to the <code>dst</code> buffer. <code>dst</code> …\nGiven an <code>EncodeAsVarULE</code> type <code>S</code>, encode it into a <code>Box&lt;T&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>char</code> to a <code>CharULE</code>. This is equivalent to calling\nConverts a <code>u64</code> to a <code>RawBytesULE</code>. This is equivalent to …\nConverts a <code>u128</code> to a <code>RawBytesULE</code>. This is equivalent to …\nConverts a <code>u16</code> to a <code>RawBytesULE</code>. This is equivalent to …\nConverts a <code>u32</code> to a <code>RawBytesULE</code>. This is equivalent to …\nConvert an array of <code>char</code> to an array of <code>CharULE</code>.\nConvert an array of <code>u128</code> to an array of <code>RawBytesULE &lt; 16 &gt;</code>.\nConvert an array of <code>u16</code> to an array of <code>RawBytesULE &lt; 2 &gt;</code>.\nConvert an array of <code>u32</code> to an array of <code>RawBytesULE &lt; 4 &gt;</code>.\nConvert an array of <code>u64</code> to an array of <code>RawBytesULE &lt; 8 &gt;</code>.\nTakes a byte slice, <code>&amp;[u8]</code>, and return it as <code>&amp;Self</code> with the …\nConstruct from a byte slice\nConverts from <code>Self::ULE</code> to <code>Self</code>.\nConvert to an <code>Option&lt;U&gt;</code>\nObtain this as an <code>Option&lt;T&gt;</code>\nGet field at <code>index</code> as a value of type T\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct an “invalid length” error for the given type …\nNew <code>NichedOptionULE&lt;U, N&gt;</code> from <code>Option&lt;U&gt;</code>\nConstruct an <code>OptionULE&lt;U&gt;</code> from an equivalent <code>Option&lt;T&gt;</code>\nConstruct a partially initialized MultiFieldsULE backed by …\nConstruct a parse error for the given type\nParses a byte slice, <code>&amp;[u8]</code>, and return it as <code>&amp;Self</code> with …\nParses a byte slice, <code>&amp;[u8]</code>, and return it as <code>&amp;[Self]</code> with …\nGiven a buffer of size obtained by …\nGiven <code>&amp;[Self]</code>, returns a <code>&amp;[u8]</code> with the same lifetime.\nTakes a byte slice, <code>&amp;[u8]</code>, and return it as <code>&amp;[Self]</code> with …\nConverts from <code>&amp;[Self]</code> to <code>&amp;[Self::ULE]</code> if possible.\nAllocate on the heap as a <code>Box&lt;T&gt;</code>\nConverts this <code>CharULE</code> to a <code>char</code>. This is equivalent to …\nConverts from <code>Self</code> to <code>Self::ULE</code>.\nULE impls for tuples.\n<code>VarULE</code> impls for tuples.\nValidates a byte slice, <code>&amp;[u8]</code>.\nValidates a byte slice, <code>&amp;[u8]</code>.\nNote: MultiFieldsULE is usually used in cases where one …\nValidate field at <code>index</code> to see if it is a valid <code>T</code> VarULE …\nTypes to help compose fixed-size <code>ULE</code> and variable-size …\nULE type for tuples with 2 elements.\nULE type for tuples with 3 elements.\nULE type for tuples with 4 elements.\nULE type for tuples with 5 elements.\nULE type for tuples with 6 elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVarULE type for tuples with 2 elements. See module docs …\nVarULE type for tuples with 3 elements. See module docs …\nVarULE type for tuples with 4 elements. See module docs …\nVarULE type for tuples with 5 elements. See module docs …\nVarULE type for tuples with 6 elements. See module docs …\nGet field 0of this tuple\nGet field 0of this tuple\nGet field 0of this tuple\nGet field 0of this tuple\nGet field 0of this tuple\nGet field 1of this tuple\nGet field 1of this tuple\nGet field 1of this tuple\nGet field 1of this tuple\nGet field 1of this tuple\nGet field 2of this tuple\nGet field 2of this tuple\nGet field 2of this tuple\nGet field 2of this tuple\nGet field 3of this tuple\nGet field 3of this tuple\nGet field 3of this tuple\nGet field 4of this tuple\nGet field 4of this tuple\nGet field 5of this tuple\nA sized type that can be converted to a <code>VarTupleULE</code>.\nA dynamically-sized type combining a sized and an unsized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is a <code>VarZeroVecFormat</code> that stores u16s in the index …\nThis is a <code>VarZeroVecFormat</code> that stores u32s in the index …\nThis is a <code>VarZeroVecFormat</code> that stores u8s in the index …\nAn iterator over VarZeroSlice\nThis trait allows switching between different possible …\nA fully-owned <code>VarZeroVec</code>. This type has no lifetime but …\nAn iterator over elements in a VarZeroVec\nObtain this <code>VarZeroVec</code> as a <code>VarZeroSlice</code>\nGet this <code>VarZeroVecOwned</code> as a borrowed <code>VarZeroVec</code>\nEmpty the vector\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a VarZeroVecOwned from a <code>VarZeroSlice</code> by cloning …\nInsert an element at index <code>idx</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this vector and return the backing buffer\nConstruct an empty VarZeroVecOwned\nInsert an element at the end of this vector\nRemove the element at index <code>idx</code>\nReplace the element at index <code>idx</code> with another\nConstruct a VarZeroVecOwned from a list of elements")