searchState.loadedDescShard("strsim", 0, "This library implements string similarity metrics.\nContains the error value\nContains the success value\nLike optimal string alignment, but substrings can be …\nReturns the argument unchanged.\nLike optimal string alignment, but substrings can be …\nCalculates the number of positions in the two sequences …\nCalculates the Jaro similarity between two sequences. The …\nLike Jaro but gives a boost to sequences that have a …\nCalculates the minimum number of insertions, deletions, …\nCalculates the number of positions in the two strings …\nCalls <code>U::from(self)</code>.\nCalculates the Jaro similarity between two strings. The …\nLike Jaro but gives a boost to strings that have a common …\nCalculates the minimum number of insertions, deletions, …\nCalculates a normalized score of the Damerau–Levenshtein …\nCalculates a normalized score of the Levenshtein algorithm …\nLike Levenshtein but allows for adjacent transpositions. …\nCalculates a Sørensen-Dice similarity distance using …")