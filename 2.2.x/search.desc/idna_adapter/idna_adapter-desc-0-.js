searchState.loadedDescShard("idna_adapter", 0, "This crate abstracts over a Unicode back end for the <code>idna</code> …\nAn adapter between a Unicode back end an the <code>idna</code> crate.\nValue for the Bidi_Class Unicode property.\nA mask representing potentially multiple <code>BidiClass</code> values.\nMask for allowable bidi classes in the first character of …\nValue for the Joining_Type Unicode property.\nA mask representing potentially multiple <code>JoiningType</code> …\nMask for checking for both left and dual joining.\nMask for checking for both left and dual joining.\nMask for checking if the domain is a bidi domain.\nReturns the Bidi_Class of <code>c</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> iff both masks have at <code>JoiningType</code> in common.\n<code>true</code> iff both masks have at <code>BidiClass</code> in common.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> iff this value is Arabic_Number\n<code>true</code> iff this value is European_Number\n<code>true</code> iff this value is Left_To_Right\n<code>true</code> iff the General_Category of <code>c</code> is Mark, i.e. any of …\n<code>true</code> iff this value is Nonspacing_Mark\n<code>true</code> iff the Canonical_Combining_Class of <code>c</code> is Virama.\nReturns the Joining_Type of <code>c</code>.\nSee the method of the same name in <code>icu_normalizer</code> for the …\nConstructor using data compiled into the binary.\nSee the method of the same name in <code>icu_normalizer</code> for the …\nReturns the corresponding <code>JoiningTypeMask</code>.\nReturns the corresponding <code>BidiClassMask</code>.")