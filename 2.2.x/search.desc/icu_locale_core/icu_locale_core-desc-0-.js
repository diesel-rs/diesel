searchState.loadedDescShard("icu_locale_core", 0, "Parsing, manipulating, and serializing Unicode Language …\nA locale type optimized for use in fallbacking and the …\nDuplicated extension.\nInvalid extension subtag.\nInvalid language subtag.\nInvalid script, region or variant subtag.\nA core struct representing a …\nA core struct representing a <code>Unicode Locale Identifier</code>.\nList of parser errors that can be generated while parsing …\nThe unknown language identifier “und”.\nThe unknown locale “und”.\n<code>const</code> version of <code>Default::default</code>\nUnicode Extensions provide a mechanism to extend the …\nAny extensions present in the locale identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe basic language/script/region components in the locale …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>DataLocale</code> into a <code>Locale</code>.\nReturns whether this <code>DataLocale</code> is <code>und</code> in the locale and …\nWhether this <code>LanguageIdentifier</code> equals …\nA macro allowing for compile-time construction of valid …\nLanguage subtag\nLanguage subtag of the language identifier.\nA macro allowing for compile-time construction of valid …\nCompare this <code>LanguageIdentifier</code> with a potentially …\nThis API provides necessary functionality for building …\nRegion subtag\nRegion subtag of the language identifier.\nScript subtag\nScript subtag of the language identifier.\nCompare this <code>DataLocale</code> with BCP-47 bytes.\nCompare this <code>LanguageIdentifier</code> with BCP-47 bytes.\nCompare this <code>Locale</code> with BCP-47 bytes.\nSubivision (-u-sd-) subtag\nLanguage Identifier and Locale contains a set of subtags …\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nCompare this <code>LanguageIdentifier</code> with another …\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nVariant subtag\nVariant subtags of the language identifier.\nDocumentation on zero-copy deserialization of locale types.\nDefines the type of extension.\nA map of extensions associated with a given <code>Locale</code>.\nAll other extension types.\nPrivate Extension Type marked as <code>x</code>.\nTransform Extension Type marked as <code>t</code>.\nUnicode Extension Type marked as <code>u</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction to create a new map of extensions containing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are no extensions present.\nReturns a new empty map of extensions. Same as <code>default()</code>, …\nOther Use Extensions is a list of extensions other than …\nA sequence of any other extensions that are present in the …\nPrivate Use Extensions is a list of extensions intended for\nA representation of the data for a private-use extension, …\nRetains the specified extension types, clearing all others.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nTransform Extensions provide information on content …\nA representation of the data for a transform extension, …\nUnicode Extensions provide information about user …\nA representation of the data for a Unicode extension, when …\nA list of <code>Other Use Extensions</code> as defined in …\nReturns the argument unchanged.\nGets the tag character for this extension as a char.\nGets the tag character for this extension as a byte.\nGets the tag character for this extension as a &amp;str.\nCalls <code>U::from(self)</code>.\nConverts the given value to a <code>String</code>.\nA list of <code>Private Use Extensions</code> as defined in …\nA single item used in a list of <code>Private</code> extensions.\nA helper function for displaying as a <code>&amp;str</code>.\nEmpties the <code>Private</code> list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafely creates a <code>Subtag</code> from its raw format as returned …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nReturns a new empty list of private-use extensions. Same …\nA constructor which takes a single <code>Subtag</code>.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nA macro allowing for compile-time construction of valid …\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nSafely creates a <code>Subtag</code> from its raw format as returned by …\nA constructor which takes a str slice, parses it and …\nSee <code>Self::try_from_str</code>\nA list of <code>Key</code>-<code>Value</code> pairs representing functional …\nA key used in a list of <code>Fields</code>.\nA list of <code>Unicode BCP47 T Extensions</code> as defined in …\nA value used in a list of <code>Fields</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nEmpties the <code>Fields</code> list.\nClears the transform extension, effectively removing it …\nReturns <code>true</code> if the list contains a <code>Value</code> for the …\nThe key-value pairs present in this locale extension, with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafely creates a <code>Key</code> from its raw format as returned by …\nReturns a reference to the <code>Value</code> corresponding to the <code>Key</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nReturns <code>true</code> if there are no fields.\nReturns <code>true</code> if there are no tfields and no tlang in the …\nA macro allowing for compile-time construction of valid <code>Key</code>…\nThe <code>LanguageIdentifier</code> specified with this locale …\nReturns a new empty list of key-value pairs. Same as …\nReturns a new empty map of Transform extensions. Same as …\nCompare with a potentially unnormalized BCP-47 string.\nRetains a subset of fields as specified by the predicate …\nSets the specified keyword, returning the old value if it …\nCompare with BCP-47 bytes.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nSafely creates a <code>Key</code> from its raw format as returned by …\nA constructor which takes a str slice, parses it and …\nSee <code>Self::try_from_str</code>\nAn attribute used in a set of <code>Attributes</code>.\nA set of <code>Attribute</code> elements as defined in …\nA key used in a list of <code>Keywords</code>.\nA list of <code>Key</code>-<code>Value</code> pairs representing functional …\nA Subivision Id as defined in <code>Unicode Locale Identifier</code>.\nA subdivision suffix used in <code>SubdivisionId</code>.\nUnicode Extensions provide information about user …\nA value used in a list of <code>Keywords</code>.\nReturns a reference to a single <code>Subtag</code> if the <code>Value</code> …\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA macro allowing for compile-time construction of valid …\nA canonically ordered sequence of single standalone …\nEmpties the <code>Attributes</code> list.\nClears all Unicode extension keywords, leaving Unicode …\nClears all Unicode extension keywords and attributes, …\nReturns <code>true</code> if the list contains a <code>Value</code> for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafely creates a <code>Attribute</code> from its raw format as …\nUnsafely creates a <code>Key</code> from its raw format as returned by …\nUnsafely creates a <code>SubdivisionSuffix</code> from its raw format …\nReturns a reference to the <code>Value</code> corresponding to the <code>Key</code>.\nReturns a reference to a subtag at index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nDeconstructs into a raw format to be consumed by …\nDeconstructs into a raw format to be consumed by …\nDestructs into a single <code>Subtag</code> if the <code>Value</code> contains …\nConvert to <code>Subtag</code>\nReturns <code>true</code> if there are no keywords.\nReturns <code>true</code> if the Value has no subtags.\nReturns <code>true</code> if there list of keywords and attributes is …\nProduce an ordered iterator over key-value pairs\nA macro allowing for compile-time construction of valid <code>Key</code>…\nThe key-value pairs present in this locale extension, with …\nReturns a new empty set of attributes. Same as <code>default()</code>, …\nReturns a new empty list of key-value pairs. Same as …\nReturns a new <code>SubdivisionId</code>.\nReturns a new empty map of Unicode extensions. Same as …\nCreates an empty <code>Value</code>, which corresponds to a “true” …\nCreate a new list of key-value pairs having exactly one …\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nA region field of a Subdivision Id.\nRemoves and returns the subtag at position <code>index</code> within …\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nCompare this <code>Keywords</code> with BCP-47 bytes.\nCompare with BCP-47 bytes.\nA macro allowing for compile-time construction of valid …\nReturns the number of subtags in the <code>Value</code>.\nA subdivision suffix field of a Subdivision Id.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nSafely creates a <code>Attribute</code> from its raw format as returned …\nSafely creates a <code>Key</code> from its raw format as returned by …\nSafely creates a <code>SubdivisionSuffix</code> from its raw format as …\nA constructor which takes a str slice, parses it and …\nA constructor which takes a str slice, parses it and …\nA constructor which takes a str slice, parses it and …\nA constructor which takes a str slice, parses it and …\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nA macro allowing for compile-time construction of valid …\nThe structure storing locale subtags used in preferences.\nA low-level trait implemented on each preference exposed …\nConstructs a new <code>LocalePreferences</code> struct with the …\nA macro to facilitate generation of preferences struct.\nExtends the preferences with the values from another set …\nA set of extensions which correspond to preferences.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPreference of Language\nPreference of Region\nConvert to a DataLocale, with language-based fallback …\nConvert to a DataLocale, with region-based fallback …\nOptional constructor of the given preference. It takes the …\nRetrieve unicode extension key corresponding to a given …\nRetrieve unicode extension value corresponding to the …\nA set of unicode extensions which correspond to …\nErrors related to parsing of Preferences.\nA list of Preferences derived from Locale unicode …\nMacro used to generate a preference keyword as a struct.\nThe given keyword value is not a valid preference variant.\nError returned by parsers of unicode extensions as …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Unicode Currency Identifier defines a type of currency.\nA Unicode Number System Identifier defines a type of …\nA Region Override specifies an alternate region to use for …\nA Unicode Subdivision Identifier defines a regional …\nA Unicode Timezone Identifier defines a timezone.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA language subtag (examples: <code>&quot;en&quot;</code>, <code>&quot;csb&quot;</code>, <code>&quot;zh&quot;</code>, <code>&quot;und&quot;</code>, …\nA region subtag (examples: <code>&quot;US&quot;</code>, <code>&quot;CN&quot;</code>, <code>&quot;AR&quot;</code> etc.)\nA script subtag (examples: <code>&quot;Latn&quot;</code>, <code>&quot;Arab&quot;</code>, etc.)\nA generic subtag.\nThe unknown language “und”.\nA variant subtag (examples: <code>&quot;macos&quot;</code>, <code>&quot;posix&quot;</code>, <code>&quot;1996&quot;</code> etc.)\nA list of variants (examples: <code>[&quot;macos&quot;, &quot;posix&quot;]</code>, etc.)\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nEmpties the <code>Variants</code> list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafely creates a <code>Language</code> from its raw format as …\nUnsafely creates a <code>Region</code> from its raw format as returned …\nUnsafely creates a <code>Script</code> from its raw format as returned …\nUnsafely creates a <code>Variant</code> from its raw format as returned …\nUnsafely creates a <code>Subtag</code> from its raw format as returned …\nCreates a new <code>Variants</code> set from a single <code>Variant</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by …\nDeconstructs into a raw format to be consumed by …\nDeconstructs into a raw format to be consumed by …\nDeconstructs into a raw format to be consumed by …\nDeconstructs into a raw format to be consumed by …\nReturns true if the Region has an alphabetic code.\nWhether the list of variants is empty.\nWhether this <code>Language</code> equals <code>Language::UNKNOWN</code>.\nA macro allowing for compile-time construction of valid …\nReturns the length of <code>self</code>.\nReturns a new empty list of variants. Same as <code>default()</code>, …\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nA macro allowing for compile-time construction of valid …\nA macro allowing for compile-time construction of valid …\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nA macro allowing for compile-time construction of valid …\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nSafely creates a <code>Language</code> from its raw format as returned …\nSafely creates a <code>Region</code> from its raw format as returned by …\nSafely creates a <code>Script</code> from its raw format as returned by …\nSafely creates a <code>Variant</code> from its raw format as returned …\nSafely creates a <code>Subtag</code> from its raw format as returned by …\nA constructor which takes a str slice, parses it and …\nA constructor which takes a str slice, parses it and …\nA constructor which takes a str slice, parses it and …\nA constructor which takes a str slice, parses it and …\nA constructor which takes a str slice, parses it and …\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nA macro allowing for compile-time construction of valid …")