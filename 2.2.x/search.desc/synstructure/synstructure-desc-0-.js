searchState.loadedDescShard("synstructure", 0, "This crate provides helper types for matching against enum …\nChanges how bounds are added\nThe type of binding to use when generating a pattern.\nInformation about a specific binding. This contains both …\nAdd for fields and generics\nFields only\nGenerics only\nHelper trait describing values which may be returned by …\n<code>x</code>\n<code>mut x</code>\nNone\n<code>ref x</code>\n<code>ref mut x</code>\nA wrapper around a <code>syn::DeriveInput</code> which provides …\nThis type is similar to <code>syn</code>’s <code>Variant</code> type, however each …\nA wrapper around a <code>syn::DeriveInput</code>’s variant which …\nSpecify which bounds should be generated by …\nAdds an <code>impl&lt;&gt;</code> generic parameter. This can be used when …\nAdd trait bounds for a trait with the given path for each …\nSpecify additional where predicate bounds which should be …\nReturns a reference to the underlying <code>syn</code> AST node which …\nReturns a <code>VariantAst</code> object which contains references to …\nReturns a reference to the underlying <code>syn</code> AST node which …\nUpdates the <code>BindStyle</code> for each of the passed-in fields by …\nUpdates the <code>BindStyle</code> for each of the passed-in fields by …\nThe name which this <code>BindingInfo</code> will bind to.\nUpdates the binding name for each fo the passed-in fields …\nUpdates the binding name for each fo the passed-in fields …\nReturns a slice of the bindings in this Variant.\nReturns a mut slice of the bindings in this Variant.\nNOTE: This methods’ features are superceded by …\nGenerates the token stream required to construct the …\nThe <code>decl_attribute!</code> macro declares a custom attribute …\nThe <code>decl_derive!</code> macro declares a custom derive wrapper. …\nIterates all the bindings of this <code>Variant</code> object and uses …\nIterates all the bindings of this <code>Structure</code> object and …\nIterates all the variants of this <code>Structure</code> object and …\nRuns the passed-in function once for each bound field, …\nRuns the passed-in function once for each bound field, …\nRuns the passed-in function once for each variant, passing …\nFilter the bindings created by this <code>Variant</code> object. This …\nFilter the bindings created by this <code>Structure</code> object. This …\nFilter the variants matched by this <code>Structure</code> object. This …\nRuns the passed-in function once for each bound field, …\nRuns the passed-in function once for each bound field, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate an impl block for the given struct. This impl …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this result into a <code>Result</code> for further processing / …\nConvert this result into a <code>proc_macro::TokenStream</code>, ready …\nCreate a new <code>Structure</code> with the variants and fields from …\nTrue if any bindings were omitted due to a <code>filter</code> call.\nTrue if any variants were omitted due to a <code>filter_variants</code> …\nGenerates the pattern fragment for this field binding.\nGenerates the match-arm pattern which could be used to …\nReturns a list of the type parameters which are referenced …\nReturns a list of the type parameters which are referenced …\nReturns a list of the type parameters which are refrenced …\nRemove the binding at the given index.\nRemove the variant at the given index.\nThe type of binding which this <code>BindingInfo</code> will create.\nRun a test on a custom derive. This macro expands both the …\nCreate a new <code>Structure</code> with the variants and fields from …\nNOTE: This methods’ features are superceded by …\nThis method is a no-op, underscore consts are used by …\nDumps an unpretty version of a tokenstream. Takes any type …\nNOTE: This methods’ features are superceded by …\nNOTE: This methods’ features are superceded by …\nReturns a slice of the variants in this Structure.\nReturns a mut slice of the variants in this Structure.")