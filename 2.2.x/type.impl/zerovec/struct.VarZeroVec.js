(function() {
    var type_impls = Object.fromEntries([["zerovec",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#149-157\">Source</a><a href=\"#impl-Clone-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#150-156\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#159-166\">Source</a><a href=\"#impl-Debug-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'_, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#163-165\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-VarZeroVec%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#195-200\">Source</a><a href=\"#impl-Default-for-VarZeroVec%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'_, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#197-199\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","zerovec::vecs::VarZeroVec16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#202-207\">Source</a><a href=\"#impl-Deref-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'_, T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#203\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#204-206\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#289-309\">Source</a><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"zerovec/ule/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'_, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#294-297\">Source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"zerovec/ule/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#300-302\">Source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#305-308\">Source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"zerovec/ule/trait.EncodeAsVarULE.html#method.encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BA%5D%3E-for-VarZeroVec%3C'static,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#387-402\">Source</a><a href=\"#impl-From%3C%26%5BA%5D%3E-for-VarZeroVec%3C'static,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[A]</a>&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'static, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"zerovec/ule/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#394-401\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(elements: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[A]</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&[A]>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BA;+N%5D%3E-for-VarZeroVec%3C'static,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#405-415\">Source</a><a href=\"#impl-From%3C%26%5BA;+N%5D%3E-for-VarZeroVec%3C'static,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, T, F, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[A; N]</a>&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'static, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"zerovec/ule/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#412-414\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(elements: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[A; N]</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&[A; N]>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26VarZeroSlice%3CT,+F%3E%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#176-180\">Source</a><a href=\"#impl-From%3C%26VarZeroSlice%3CT,+F%3E%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#177-179\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: &amp;'a <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'a VarZeroSlice<T, F>>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Vec%3CA%3E%3E-for-VarZeroVec%3C'static,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#374-384\">Source</a><a href=\"#impl-From%3C%26Vec%3CA%3E%3E-for-VarZeroVec%3C'static,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'static, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"zerovec/ule/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#381-383\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(elements: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&Vec<A>>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVarZeroVecOwned%3CT,+F%3E%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#169-174\">Source</a><a href=\"#impl-From%3CVarZeroVecOwned%3CT,+F%3E%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"zerovec/vecs/struct.VarZeroVecOwned.html\" title=\"struct zerovec::vecs::VarZeroVecOwned\">VarZeroVecOwned</a>&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#171-173\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"zerovec/vecs/struct.VarZeroVecOwned.html\" title=\"struct zerovec::vecs::VarZeroVecOwned\">VarZeroVecOwned</a>&lt;T, F&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VarZeroVecOwned<T, F>>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MutableZeroVecLike%3C'a,+T%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#457-526\">Source</a><a href=\"#impl-MutableZeroVecLike%3C'a,+T%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, F&gt; <a class=\"trait\" href=\"zerovec/maps/trait.MutableZeroVecLike.html\" title=\"trait zerovec::maps::MutableZeroVecLike\">MutableZeroVecLike</a>&lt;'a, T&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.OwnedType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#463\">Source</a><a href=\"#associatedtype.OwnedType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#associatedtype.OwnedType\" class=\"associatedtype\">OwnedType</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The type returned by <code>Self::remove()</code> and <code>Self::replace()</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_insert\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#464-466\">Source</a><a href=\"#method.zvl_insert\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_insert\" class=\"fn\">zvl_insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>)</h4></section></summary><div class='docblock'>Insert an element at <code>index</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_remove\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#467-474\">Source</a><a href=\"#method.zvl_remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_remove\" class=\"fn\">zvl_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Remove the element at <code>index</code> (panicking if nonexistant)</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_replace\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#475-482\">Source</a><a href=\"#method.zvl_replace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_replace\" class=\"fn\">zvl_replace</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Replace the element at <code>index</code> with another one, returning the old element</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_push\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#483-486\">Source</a><a href=\"#method.zvl_push\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_push\" class=\"fn\">zvl_push</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>)</h4></section></summary><div class='docblock'>Push an element to the end of this vector</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_with_capacity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#487-493\">Source</a><a href=\"#method.zvl_with_capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_with_capacity\" class=\"fn\">zvl_with_capacity</a>(cap: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class='docblock'>Create a new, empty vector, with given capacity</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#494-496\">Source</a><a href=\"#method.zvl_clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_clear\" class=\"fn\">zvl_clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Remove all elements from the vector</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#497-499\">Source</a><a href=\"#method.zvl_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_reserve\" class=\"fn\">zvl_reserve</a>(&amp;mut self, addl: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Reserve space for <code>addl</code> additional elements</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.owned_as_t\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#501-503\">Source</a><a href=\"#method.owned_as_t\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.owned_as_t\" class=\"fn\">owned_as_t</a>(o: &amp;Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.MutableZeroVecLike.html#associatedtype.OwnedType\" title=\"type zerovec::maps::MutableZeroVecLike::OwnedType\">OwnedType</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Convert an owned value to a borrowed T</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_from_borrowed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#505-507\">Source</a><a href=\"#method.zvl_from_borrowed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_from_borrowed\" class=\"fn\">zvl_from_borrowed</a>(b: &amp;'a <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Construct from the borrowed version of the type <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_from_borrowed\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_as_borrowed_inner\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#508-514\">Source</a><a href=\"#method.zvl_as_borrowed_inner\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_as_borrowed_inner\" class=\"fn\">zvl_as_borrowed_inner</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt;</h4></section></summary><div class='docblock'>Extract the inner borrowed variant if possible. Returns <code>None</code> if the data is owned. <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_as_borrowed_inner\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_permute\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#517-525\">Source</a><a href=\"#method.zvl_permute\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_permute\" class=\"fn\">zvl_permute</a>(&amp;mut self, permutation: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>])</h4></section></summary><div class='docblock'>Applies the permutation such that <code>before.zvl_get(permutation[i]) == after.zvl_get(i)</code>. <a href=\"zerovec/maps/trait.MutableZeroVecLike.html#tymethod.zvl_permute\">Read more</a></div></details></div></details>","MutableZeroVecLike<'a, T>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#479-483\">Source</a><a href=\"#impl-Ord-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#480-482\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1012-1014\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1051-1053\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1077-1079\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BA%5D%3E-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#447-458\">Source</a><a href=\"#impl-PartialEq%3C%26%5BA%5D%3E-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[A]</a>&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'_, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#455-457\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[A]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[A]>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BA;+N%5D%3E-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#460-471\">Source</a><a href=\"#impl-PartialEq%3C%5BA;+N%5D%3E-for-VarZeroVec%3C'_,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A, F, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[A; N]</a>&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'_, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#468-470\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[A; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[A; N]>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVarZeroVec%3C'b,+T,+F%3E%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#417-436\">Source</a><a href=\"#impl-PartialEq%3CVarZeroVec%3C'b,+T,+F%3E%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b, T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'b, T, F&gt;&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#425-435\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'b, T, F&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<VarZeroVec<'b, T, F>>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#473-477\">Source</a><a href=\"#impl-PartialOrd-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#474-476\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1386\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1404\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1422\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1440\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#209-371\">Source</a><a href=\"#impl-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#221-223\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"zerovec/struct.VarZeroVec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty <code>VarZeroVec&lt;T&gt;</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>zerovec::VarZeroVec;\n\n<span class=\"kw\">let </span>vzv: VarZeroVec&lt;str&gt; = VarZeroVec::new();\n<span class=\"macro\">assert!</span>(vzv.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#242-246\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroVec.html#tymethod.parse_bytes\" class=\"fn\">parse_bytes</a>(slice: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"zerovec/ule/enum.UleError.html\" title=\"enum zerovec::ule::UleError\">UleError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parse a VarZeroVec from a slice of the appropriate format</p>\n<p>Slices of the right format can be obtained via <a href=\"zerovec/struct.VarZeroSlice.html#method.as_bytes\" title=\"method zerovec::VarZeroSlice::as_bytes\"><code>VarZeroSlice::as_bytes()</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"quux\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[<span class=\"number\">0</span>], <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[<span class=\"number\">1</span>], <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[<span class=\"number\">2</span>], <span class=\"string\">\"baz\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[<span class=\"number\">3</span>], <span class=\"string\">\"quux\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#253-258\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"zerovec/struct.VarZeroVec.html#tymethod.from_bytes_unchecked\" class=\"fn\">from_bytes_unchecked</a>(bytes: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Uses a <code>&amp;[u8]</code> buffer as a <code>VarZeroVec&lt;T&gt;</code> without any verification.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p><code>bytes</code> need to be an output from <a href=\"zerovec/struct.VarZeroSlice.html#method.as_bytes\" title=\"method zerovec::VarZeroSlice::as_bytes\"><code>VarZeroSlice::as_bytes()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#284-294\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroVec.html#tymethod.make_mut\" class=\"fn\">make_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"zerovec/vecs/struct.VarZeroVecOwned.html\" title=\"struct zerovec::vecs::VarZeroVecOwned\">VarZeroVecOwned</a>&lt;T, F&gt;</h4></section></summary><div class=\"docblock\"><p>Convert this into a mutable vector of the owned <code>T</code> type, cloning if necessary.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"quux\"</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">4</span>);\n<span class=\"kw\">let </span>mutvec = vec.make_mut();\nmutvec.push(<span class=\"string\">\"lorem ipsum\"</span>.into());\nmutvec[<span class=\"number\">2</span>] = <span class=\"string\">\"dolor sit\"</span>.into();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[<span class=\"number\">0</span>], <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[<span class=\"number\">1</span>], <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[<span class=\"number\">2</span>], <span class=\"string\">\"dolor sit\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[<span class=\"number\">3</span>], <span class=\"string\">\"quux\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[<span class=\"number\">4</span>], <span class=\"string\">\"lorem ipsum\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#311-317\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroVec.html#tymethod.into_owned\" class=\"fn\">into_owned</a>(self) -&gt; <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'static, T, F&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a borrowed ZeroVec to an owned ZeroVec. No-op if already owned.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"quux\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">4</span>);\n<span class=\"comment\">// has 'static lifetime\n</span><span class=\"kw\">let </span>owned = vec.into_owned();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#320-326\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroVec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h4></section></summary><div class=\"docblock\"><p>Obtain this <code>VarZeroVec</code> as a <a href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\"><code>VarZeroSlice</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#348-354\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroVec.html#tymethod.into_bytes\" class=\"fn\">into_bytes</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Takes the byte vector representing the encoded data of this VarZeroVec. If borrowed,\nthis function allocates a byte vector and copies the borrowed bytes into it.</p>\n<p>The bytes can be passed back to <a href=\"zerovec/struct.VarZeroVec.html#method.parse_bytes\" title=\"associated function zerovec::VarZeroVec::parse_bytes\"><code>Self::parse_bytes()</code></a>.</p>\n<p>To get a reference to the bytes without moving, see <a href=\"zerovec/struct.VarZeroSlice.html#method.as_bytes\" title=\"method zerovec::VarZeroSlice::as_bytes\"><code>VarZeroSlice::as_bytes()</code></a>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];\n<span class=\"kw\">let </span>bytes = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings).into_bytes();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>borrowed: VarZeroVec&lt;str&gt; =\n    VarZeroVec::parse_bytes(<span class=\"kw-2\">&amp;</span>bytes).unwrap();\n<span class=\"macro\">assert_eq!</span>(borrowed, <span class=\"kw-2\">&amp;*</span>strings);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#359-365\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroVec.html#tymethod.is_owned\" class=\"fn\">is_owned</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return whether the <a href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\"><code>VarZeroVec</code></a> is operating on owned or borrowed\ndata. <a href=\"zerovec/struct.VarZeroVec.html#method.into_owned\" title=\"method zerovec::VarZeroVec::into_owned\"><code>VarZeroVec::into_owned()</code></a> and <a href=\"zerovec/struct.VarZeroVec.html#method.make_mut\" title=\"method zerovec::VarZeroVec::make_mut\"><code>VarZeroVec::make_mut()</code></a> can\nbe used to force it into an owned type</p>\n</div></details></div></details>",0,"zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-VarZeroVec%3C'static,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/yoke_impls.rs.html#55-79\">Source</a><a href=\"#impl-Yokeable%3C'a%3E-for-VarZeroVec%3C'static,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: 'static + <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'a&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'static, T&gt;</h3><div class=\"docblock\"><p>This impl requires enabling the optional <code>yoke</code> Cargo feature of the <code>zerovec</code> crate</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/yoke_impls.rs.html#56\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T&gt;</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/yoke_impls.rs.html#58-60\">Source</a><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform\" class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a Self::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/yoke_impls.rs.html#62-64\">Source</a><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_owned\" class=\"fn\">transform_owned</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/yoke_impls.rs.html#66-71\">Source</a><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.make\" class=\"fn\">make</a>(from: Self::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a>) -&gt; Self</h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.make\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/yoke_impls.rs.html#73-78\">Source</a><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_mut\" class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut Self::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a>),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_mut\">Read more</a></div></details></div></details>","Yokeable<'a>","zerovec::vecs::VarZeroVec16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+VarZeroSlice%3CT,+F%3E%3E-for-VarZeroVec%3C'zf,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/zerofrom_impls.rs.html#44-52\">Source</a><a href=\"#impl-ZeroFrom%3C'zf,+VarZeroSlice%3CT,+F%3E%3E-for-VarZeroVec%3C'zf,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, T, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"zerofrom/zero_from/trait.ZeroFrom.html\" title=\"trait zerofrom::zero_from::ZeroFrom\">ZeroFrom</a>&lt;'zf, <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'zf, T, F&gt;<div class=\"where\">where\n    T: 'static + <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/zerofrom_impls.rs.html#49-51\">Source</a><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerofrom/zero_from/trait.ZeroFrom.html#tymethod.zero_from\" class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, VarZeroSlice<T, F>>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+VarZeroVec%3C'_,+T,+F%3E%3E-for-VarZeroVec%3C'zf,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/zerofrom_impls.rs.html#54-62\">Source</a><a href=\"#impl-ZeroFrom%3C'zf,+VarZeroVec%3C'_,+T,+F%3E%3E-for-VarZeroVec%3C'zf,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, T, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"zerofrom/zero_from/trait.ZeroFrom.html\" title=\"trait zerofrom::zero_from::ZeroFrom\">ZeroFrom</a>&lt;'zf, <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'_, T, F&gt;&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'zf, T, F&gt;<div class=\"where\">where\n    T: 'static + <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/zerofrom_impls.rs.html#59-61\">Source</a><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerofrom/zero_from/trait.ZeroFrom.html#tymethod.zero_from\" class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'_, T, F&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, VarZeroVec<'_, T, F>>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroVecLike%3CT%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#355-404\">Source</a><a href=\"#impl-ZeroVecLike%3CT%3E-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, F&gt; <a class=\"trait\" href=\"zerovec/maps/trait.ZeroVecLike.html\" title=\"trait zerovec::maps::ZeroVecLike\">ZeroVecLike</a>&lt;T&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.GetType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#361\">Source</a><a href=\"#associatedtype.GetType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" class=\"associatedtype\">GetType</a> = T</h4></section></summary><div class='docblock'>The type returned by <code>Self::get()</code></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.SliceVariant\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#362\">Source</a><a href=\"#associatedtype.SliceVariant\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.SliceVariant\" class=\"associatedtype\">SliceVariant</a> = <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h4></section></summary><div class='docblock'>A fully borrowed version of this</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_new_borrowed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#364-366\">Source</a><a href=\"#method.zvl_new_borrowed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_new_borrowed\" class=\"fn\">zvl_new_borrowed</a>() -&gt; &amp;'static Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.SliceVariant\" title=\"type zerovec::maps::ZeroVecLike::SliceVariant\">SliceVariant</a></h4></section></summary><div class='docblock'>Create a new, empty borrowed variant</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_binary_search\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#367-372\">Source</a><a href=\"#method.zvl_binary_search\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_binary_search\" class=\"fn\">zvl_binary_search</a>(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Search for a key in a sorted vector, returns <code>Ok(index)</code> if found,\nreturns <code>Err(insert_index)</code> if not found, where <code>insert_index</code> is the\nindex where it should be inserted to maintain sort order.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_binary_search_in_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#373-378\">Source</a><a href=\"#method.zvl_binary_search_in_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_binary_search_in_range\" class=\"fn\">zvl_binary_search_in_range</a>(\n    &amp;self,\n    k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Search for a key within a certain range in a sorted vector.\nReturns <code>None</code> if the range is out of bounds, and\n<code>Ok</code> or <code>Err</code> in the same way as <code>zvl_binary_search</code>.\nIndices are returned relative to the start of the range.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_binary_search_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#379-381\">Source</a><a href=\"#method.zvl_binary_search_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_binary_search_by\" class=\"fn\">zvl_binary_search_by</a>(\n    &amp;self,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Search for a key in a sorted vector by a predicate, returns <code>Ok(index)</code> if found,\nreturns <code>Err(insert_index)</code> if not found, where <code>insert_index</code> is the\nindex where it should be inserted to maintain sort order.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_binary_search_in_range_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#382-388\">Source</a><a href=\"#method.zvl_binary_search_in_range_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_binary_search_in_range_by\" class=\"fn\">zvl_binary_search_in_range_by</a>(\n    &amp;self,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><div class='docblock'>Search for a key within a certain range in a sorted vector by a predicate.\nReturns <code>None</code> if the range is out of bounds, and\n<code>Ok</code> or <code>Err</code> in the same way as <code>zvl_binary_search</code>.\nIndices are returned relative to the start of the range.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#389-391\">Source</a><a href=\"#method.zvl_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_get\" class=\"fn\">zvl_get</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class='docblock'>Get element at <code>index</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#392-394\">Source</a><a href=\"#method.zvl_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_len\" class=\"fn\">zvl_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The length of this vector</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_as_borrowed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#396-398\">Source</a><a href=\"#method.zvl_as_borrowed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_as_borrowed\" class=\"fn\">zvl_as_borrowed</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h4></section></summary><div class='docblock'>Construct a borrowed variant by borrowing from <code>&amp;self</code>. <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_as_borrowed\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_get_as_t\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#401-403\">Source</a><a href=\"#method.zvl_get_as_t\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_get_as_t\" class=\"fn\">zvl_get_as_t</a>&lt;R&gt;(g: &amp;Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" title=\"type zerovec::maps::ZeroVecLike::GetType\">GetType</a>, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Obtain a reference to T, passed to a closure <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_get_as_t\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_is_ascending\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#70-86\">Source</a><a href=\"#method.zvl_is_ascending\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#method.zvl_is_ascending\" class=\"fn\">zvl_is_ascending</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Check if this vector is in ascending order according to <code>T</code>s <code>Ord</code> impl</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_is_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#88-90\">Source</a><a href=\"#method.zvl_is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#method.zvl_is_empty\" class=\"fn\">zvl_is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check if this vector is empty</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.t_cmp_get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#105-110\">Source</a><a href=\"#method.t_cmp_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#method.t_cmp_get\" class=\"fn\">t_cmp_get</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, g: &amp;Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" title=\"type zerovec::maps::ZeroVecLike::GetType\">GetType</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Compare this type with a <code>Self::GetType</code>. This must produce the same result as\nif <code>g</code> were converted to <code>Self</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_cmp_get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#115-120\">Source</a><a href=\"#method.get_cmp_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#method.get_cmp_get\" class=\"fn\">get_cmp_get</a>(a: &amp;Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" title=\"type zerovec::maps::ZeroVecLike::GetType\">GetType</a>, b: &amp;Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" title=\"type zerovec::maps::ZeroVecLike::GetType\">GetType</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Compare two values of <code>Self::GetType</code>. This must produce the same result as\nif both <code>a</code> and <code>b</code> were converted to <code>Self</code></div></details></div></details>","ZeroVecLike<T>","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"],["<section id=\"impl-Eq-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/vec.rs.html#438-445\">Source</a><a href=\"#impl-Eq-for-VarZeroVec%3C'a,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section>","Eq","zerovec::vecs::VarZeroVec16","zerovec::vecs::VarZeroVec32"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[94244]}