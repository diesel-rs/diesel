(function() {
    var type_impls = Object.fromEntries([["zerovec",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVarZeroSlice%3CT,+F%3E%3E-for-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#520-524\">Source</a><a href=\"#impl-AsRef%3CVarZeroSlice%3CT,+F%3E%3E-for-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#521-523\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<VarZeroSlice<T, F>>","zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#511-518\">Source</a><a href=\"#impl-Debug-for-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#515-517\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3Cusize%3E-for-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#459-471\">Source</a><a href=\"#impl-Index%3Cusize%3E-for-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#460\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#461-470\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<usize>","zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#504-509\">Source</a><a href=\"#impl-Ord-for-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#506-508\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details>","Ord","zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#473-486\">Source</a><a href=\"#impl-PartialEq-for-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#481-485\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#497-502\">Source</a><a href=\"#impl-PartialOrd-for-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#499-501\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1386\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1404\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1422\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1440\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarULE-for-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#442-457\">Source</a><a href=\"#impl-VarULE-for-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'static, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.validate_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#443-447\">Source</a><a href=\"#method.validate_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.VarULE.html#tymethod.validate_bytes\" class=\"fn\">validate_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"zerovec/ule/enum.UleError.html\" title=\"enum zerovec::ule::UleError\">UleError</a>&gt;</h4></section></summary><div class='docblock'>Validates a byte slice, <code>&amp;[u8]</code>. <a href=\"zerovec/ule/trait.VarULE.html#tymethod.validate_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#449-452\">Source</a><a href=\"#method.from_bytes_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"zerovec/ule/trait.VarULE.html#tymethod.from_bytes_unchecked\" class=\"fn\">from_bytes_unchecked</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; &amp;Self</h4></section></summary><div class='docblock'>Takes a byte slice, <code>&amp;[u8]</code>, and return it as <code>&amp;Self</code> with the same lifetime, assuming\nthat this byte slice has previously been run through <a href=\"zerovec/ule/trait.VarULE.html#method.parse_bytes\"><code>Self::parse_bytes()</code></a> with\nsuccess. <a href=\"zerovec/ule/trait.VarULE.html#tymethod.from_bytes_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#454-456\">Source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.VarULE.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Given <code>&amp;Self</code>, returns a <code>&amp;[u8]</code> with the same lifetime. <a href=\"zerovec/ule/trait.VarULE.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/mod.rs.html#316-321\">Source</a><a href=\"#method.parse_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.VarULE.html#method.parse_bytes\" class=\"fn\">parse_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, <a class=\"enum\" href=\"zerovec/ule/enum.UleError.html\" title=\"enum zerovec::ule::UleError\">UleError</a>&gt;</h4></section></summary><div class='docblock'>Parses a byte slice, <code>&amp;[u8]</code>, and return it as <code>&amp;Self</code> with the same lifetime. <a href=\"zerovec/ule/trait.VarULE.html#method.parse_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_boxed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/mod.rs.html#361-374\">Source</a><a href=\"#method.to_boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.VarULE.html#method.to_boxed\" class=\"fn\">to_boxed</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Allocate on the heap as a <code>Box&lt;T&gt;</code></div></details></div></details>","VarULE","zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#106-272\">Source</a><a href=\"#impl-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>&gt; <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#108-111\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.new_empty\" class=\"fn\">new_empty</a>() -&gt; &amp;'static Self</h4></section></summary><div class=\"docblock\"><p>Construct a new empty VarZeroSlice</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#127-130\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.from_bytes_unchecked\" class=\"fn\">from_bytes_unchecked</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; &amp;Self</h4></section></summary><div class=\"docblock\"><p>Uses a <code>&amp;[u8]</code> buffer as a <code>VarZeroSlice&lt;T&gt;</code> without any verification.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p><code>bytes</code> need to be an output from <a href=\"zerovec/struct.VarZeroSlice.html#method.as_bytes\" title=\"method zerovec::VarZeroSlice::as_bytes\"><code>VarZeroSlice::as_bytes()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#144-146\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Get the number of elements in this slice</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"quux\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">4</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#160-162\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the slice contains no elements.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings: Vec&lt;String&gt; = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"macro\">assert!</span>(vec.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#180-182\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.iter\" class=\"fn\">iter</a>&lt;'b&gt;(&amp;'b self) -&gt; <a class=\"struct\" href=\"zerovec/vecs/struct.VarZeroSliceIter.html\" title=\"struct zerovec::vecs::VarZeroSliceIter\">VarZeroSliceIter</a>&lt;'b, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"VarZeroSliceIter&lt;&#39;b, T, F&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Obtain an iterator over this slice’s elements</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"quux\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter_results: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = vec.iter().collect();\n<span class=\"macro\">assert_eq!</span>(iter_results[<span class=\"number\">0</span>], <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(iter_results[<span class=\"number\">1</span>], <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(iter_results[<span class=\"number\">2</span>], <span class=\"string\">\"baz\"</span>);\n<span class=\"macro\">assert_eq!</span>(iter_results[<span class=\"number\">3</span>], <span class=\"string\">\"quux\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#201-203\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get one of this slice’s elements, returning <code>None</code> if the index is out of bounds</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"quux\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter_results: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = vec.iter().collect();\n<span class=\"macro\">assert_eq!</span>(vec.get(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n<span class=\"macro\">assert_eq!</span>(vec.get(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"bar\"</span>));\n<span class=\"macro\">assert_eq!</span>(vec.get(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"baz\"</span>));\n<span class=\"macro\">assert_eq!</span>(vec.get(<span class=\"number\">3</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"quux\"</span>));\n<span class=\"macro\">assert_eq!</span>(vec.get(<span class=\"number\">4</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#227-229\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(&amp;self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Get one of this slice’s elements</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p><code>index</code> must be in range</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"quux\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter_results: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = vec.iter().collect();\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(vec.get_unchecked(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n    <span class=\"macro\">assert_eq!</span>(vec.get_unchecked(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n    <span class=\"macro\">assert_eq!</span>(vec.get_unchecked(<span class=\"number\">2</span>), <span class=\"string\">\"baz\"</span>);\n    <span class=\"macro\">assert_eq!</span>(vec.get_unchecked(<span class=\"number\">3</span>), <span class=\"string\">\"quux\"</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#233-235\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.to_vec\" class=\"fn\">to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Obtain an owned <code>Vec&lt;Box&lt;T&gt;&gt;</code> out of this</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#254-256\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Get a reference to the entire encoded backing buffer of this slice</p>\n<p>The bytes can be passed back to <a href=\"zerovec/struct.VarZeroSlice.html#method.parse_bytes\" title=\"associated function zerovec::VarZeroSlice::parse_bytes\"><code>Self::parse_bytes()</code></a>.</p>\n<p>To take the bytes as a vector, see <a href=\"zerovec/struct.VarZeroVec.html#method.into_bytes\" title=\"method zerovec::VarZeroVec::into_bytes\"><code>VarZeroVec::into_bytes()</code></a>.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];\n<span class=\"kw\">let </span>vzv = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"macro\">assert_eq!</span>(vzv, VarZeroVec::parse_bytes(vzv.as_bytes()).unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_varzerovec\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#262-264\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.as_varzerovec\" class=\"fn\">as_varzerovec</a>&lt;'a&gt;(&amp;'a self) -&gt; <a class=\"struct\" href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\">VarZeroVec</a>&lt;'a, T, F&gt;</h4></section></summary><div class=\"docblock\"><p>Get this <a href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\"><code>VarZeroSlice</code></a> as a borrowed <a href=\"zerovec/struct.VarZeroVec.html\" title=\"struct zerovec::VarZeroVec\"><code>VarZeroVec</code></a></p>\n<p>If you wish to repeatedly call methods on this <a href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\"><code>VarZeroSlice</code></a>,\nit is more efficient to perform this conversion first</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#269-271\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.parse_bytes\" class=\"fn\">parse_bytes</a>&lt;'a&gt;(slice: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a Self, <a class=\"enum\" href=\"zerovec/ule/enum.UleError.html\" title=\"enum zerovec::ule::UleError\">UleError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parse a VarZeroSlice from a slice of the appropriate format</p>\n<p>Slices of the right format can be obtained via <a href=\"zerovec/struct.VarZeroSlice.html#method.as_bytes\" title=\"method zerovec::VarZeroSlice::as_bytes\"><code>VarZeroSlice::as_bytes()</code></a></p>\n</div></details></div></details>",0,"zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#274-342\">Source</a><a href=\"#impl-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#298-300\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.binary_search\" class=\"fn\">binary_search</a>(&amp;self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Binary searches a sorted <code>VarZeroVec&lt;T&gt;</code> for the given element. For more information, see\nthe standard library function <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.binary_search\"><code>binary_search</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"macro\">assert_eq!</span>(vec.binary_search(<span class=\"string\">\"f\"</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(vec.binary_search(<span class=\"string\">\"e\"</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search_in_range\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#335-341\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.binary_search_in_range\" class=\"fn\">binary_search_in_range</a>(\n    &amp;self,\n    x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Binary searches a <code>VarZeroVec&lt;T&gt;</code> for the given element within a certain sorted range.</p>\n<p>If the range is out of bounds, returns <code>None</code>. Otherwise, returns a <code>Result</code> according\nto the behavior of the standard library function <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.binary_search\"><code>binary_search</code></a>.</p>\n<p>The index is returned relative to the start of the range.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"m\"</span>, <span class=\"string\">\"n\"</span>, <span class=\"string\">\"q\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"comment\">// Same behavior as binary_search when the range covers the whole slice:\n</span><span class=\"macro\">assert_eq!</span>(vec.binary_search_in_range(<span class=\"string\">\"g\"</span>, <span class=\"number\">0</span>..<span class=\"number\">7</span>), <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">3</span>)));\n<span class=\"macro\">assert_eq!</span>(vec.binary_search_in_range(<span class=\"string\">\"h\"</span>, <span class=\"number\">0</span>..<span class=\"number\">7</span>), <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">4</span>)));\n\n<span class=\"comment\">// Will not look outside of the range:\n</span><span class=\"macro\">assert_eq!</span>(vec.binary_search_in_range(<span class=\"string\">\"g\"</span>, <span class=\"number\">0</span>..<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">1</span>)));\n<span class=\"macro\">assert_eq!</span>(vec.binary_search_in_range(<span class=\"string\">\"g\"</span>, <span class=\"number\">6</span>..<span class=\"number\">7</span>), <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>)));\n\n<span class=\"comment\">// Will return indices relative to the start of the range:\n</span><span class=\"macro\">assert_eq!</span>(vec.binary_search_in_range(<span class=\"string\">\"g\"</span>, <span class=\"number\">1</span>..<span class=\"number\">6</span>), <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>)));\n<span class=\"macro\">assert_eq!</span>(vec.binary_search_in_range(<span class=\"string\">\"h\"</span>, <span class=\"number\">1</span>..<span class=\"number\">6</span>), <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">3</span>)));\n\n<span class=\"comment\">// Will return `None` if the range is out of bounds:\n</span><span class=\"macro\">assert_eq!</span>(vec.binary_search_in_range(<span class=\"string\">\"x\"</span>, <span class=\"number\">100</span>..<span class=\"number\">200</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(vec.binary_search_in_range(<span class=\"string\">\"x\"</span>, <span class=\"number\">0</span>..<span class=\"number\">200</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#344-431\">Source</a><a href=\"#impl-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search_by\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#366-368\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.binary_search_by\" class=\"fn\">binary_search_by</a>(\n    &amp;self,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Binary searches a sorted <code>VarZeroVec&lt;T&gt;</code> for the given predicate. For more information, see\nthe standard library function <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.binary_search_by\"><code>binary_search_by</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"macro\">assert_eq!</span>(vec.binary_search_by(|probe| probe.cmp(<span class=\"string\">\"f\"</span>)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(vec.binary_search_by(|probe| probe.cmp(<span class=\"string\">\"e\"</span>)), <span class=\"prelude-val\">Err</span>(<span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search_in_range_by\" class=\"method\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#423-430\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zerovec/struct.VarZeroSlice.html#tymethod.binary_search_in_range_by\" class=\"fn\">binary_search_in_range_by</a>(\n    &amp;self,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Binary searches a <code>VarZeroVec&lt;T&gt;</code> for the given predicate within a certain sorted range.</p>\n<p>If the range is out of bounds, returns <code>None</code>. Otherwise, returns a <code>Result</code> according\nto the behavior of the standard library function <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.binary_search\"><code>binary_search</code></a>.</p>\n<p>The index is returned relative to the start of the range.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>strings = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"m\"</span>, <span class=\"string\">\"n\"</span>, <span class=\"string\">\"q\"</span>];\n<span class=\"kw\">let </span>vec = VarZeroVec::&lt;str&gt;::from(<span class=\"kw-2\">&amp;</span>strings);\n\n<span class=\"comment\">// Same behavior as binary_search when the range covers the whole slice:\n</span><span class=\"macro\">assert_eq!</span>(\n    vec.binary_search_in_range_by(|v| v.cmp(<span class=\"string\">\"g\"</span>), <span class=\"number\">0</span>..<span class=\"number\">7</span>),\n    <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">3</span>))\n);\n<span class=\"macro\">assert_eq!</span>(\n    vec.binary_search_in_range_by(|v| v.cmp(<span class=\"string\">\"h\"</span>), <span class=\"number\">0</span>..<span class=\"number\">7</span>),\n    <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">4</span>))\n);\n\n<span class=\"comment\">// Will not look outside of the range:\n</span><span class=\"macro\">assert_eq!</span>(\n    vec.binary_search_in_range_by(|v| v.cmp(<span class=\"string\">\"g\"</span>), <span class=\"number\">0</span>..<span class=\"number\">1</span>),\n    <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">1</span>))\n);\n<span class=\"macro\">assert_eq!</span>(\n    vec.binary_search_in_range_by(|v| v.cmp(<span class=\"string\">\"g\"</span>), <span class=\"number\">6</span>..<span class=\"number\">7</span>),\n    <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>))\n);\n\n<span class=\"comment\">// Will return indices relative to the start of the range:\n</span><span class=\"macro\">assert_eq!</span>(\n    vec.binary_search_in_range_by(|v| v.cmp(<span class=\"string\">\"g\"</span>), <span class=\"number\">1</span>..<span class=\"number\">6</span>),\n    <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>))\n);\n<span class=\"macro\">assert_eq!</span>(\n    vec.binary_search_in_range_by(|v| v.cmp(<span class=\"string\">\"h\"</span>), <span class=\"number\">1</span>..<span class=\"number\">6</span>),\n    <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">3</span>))\n);\n\n<span class=\"comment\">// Will return `None` if the range is out of bounds:\n</span><span class=\"macro\">assert_eq!</span>(\n    vec.binary_search_in_range_by(|v| v.cmp(<span class=\"string\">\"x\"</span>), <span class=\"number\">100</span>..<span class=\"number\">200</span>),\n    <span class=\"prelude-val\">None\n</span>);\n<span class=\"macro\">assert_eq!</span>(vec.binary_search_in_range_by(|v| v.cmp(<span class=\"string\">\"x\"</span>), <span class=\"number\">0</span>..<span class=\"number\">200</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroVecLike%3CT%3E-for-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#406-455\">Source</a><a href=\"#impl-ZeroVecLike%3CT%3E-for-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"zerovec/maps/trait.ZeroVecLike.html\" title=\"trait zerovec::maps::ZeroVecLike\">ZeroVecLike</a>&lt;T&gt; for <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.GetType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#412\">Source</a><a href=\"#associatedtype.GetType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" class=\"associatedtype\">GetType</a> = T</h4></section></summary><div class='docblock'>The type returned by <code>Self::get()</code></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.SliceVariant\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#413\">Source</a><a href=\"#associatedtype.SliceVariant\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.SliceVariant\" class=\"associatedtype\">SliceVariant</a> = <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h4></section></summary><div class='docblock'>A fully borrowed version of this</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_new_borrowed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#415-417\">Source</a><a href=\"#method.zvl_new_borrowed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_new_borrowed\" class=\"fn\">zvl_new_borrowed</a>() -&gt; &amp;'static Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.SliceVariant\" title=\"type zerovec::maps::ZeroVecLike::SliceVariant\">SliceVariant</a></h4></section></summary><div class='docblock'>Create a new, empty borrowed variant</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_binary_search\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#418-423\">Source</a><a href=\"#method.zvl_binary_search\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_binary_search\" class=\"fn\">zvl_binary_search</a>(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Search for a key in a sorted vector, returns <code>Ok(index)</code> if found,\nreturns <code>Err(insert_index)</code> if not found, where <code>insert_index</code> is the\nindex where it should be inserted to maintain sort order.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_binary_search_in_range\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#424-429\">Source</a><a href=\"#method.zvl_binary_search_in_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_binary_search_in_range\" class=\"fn\">zvl_binary_search_in_range</a>(\n    &amp;self,\n    k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Search for a key within a certain range in a sorted vector.\nReturns <code>None</code> if the range is out of bounds, and\n<code>Ok</code> or <code>Err</code> in the same way as <code>zvl_binary_search</code>.\nIndices are returned relative to the start of the range.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_binary_search_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#430-432\">Source</a><a href=\"#method.zvl_binary_search_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_binary_search_by\" class=\"fn\">zvl_binary_search_by</a>(\n    &amp;self,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Search for a key in a sorted vector by a predicate, returns <code>Ok(index)</code> if found,\nreturns <code>Err(insert_index)</code> if not found, where <code>insert_index</code> is the\nindex where it should be inserted to maintain sort order.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_binary_search_in_range_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#433-439\">Source</a><a href=\"#method.zvl_binary_search_in_range_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_binary_search_in_range_by\" class=\"fn\">zvl_binary_search_in_range_by</a>(\n    &amp;self,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><div class='docblock'>Search for a key within a certain range in a sorted vector by a predicate.\nReturns <code>None</code> if the range is out of bounds, and\n<code>Ok</code> or <code>Err</code> in the same way as <code>zvl_binary_search</code>.\nIndices are returned relative to the start of the range.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#440-442\">Source</a><a href=\"#method.zvl_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_get\" class=\"fn\">zvl_get</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class='docblock'>Get element at <code>index</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#443-445\">Source</a><a href=\"#method.zvl_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_len\" class=\"fn\">zvl_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The length of this vector</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_as_borrowed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#447-449\">Source</a><a href=\"#method.zvl_as_borrowed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_as_borrowed\" class=\"fn\">zvl_as_borrowed</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;</h4></section></summary><div class='docblock'>Construct a borrowed variant by borrowing from <code>&amp;self</code>. <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_as_borrowed\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_get_as_t\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#452-454\">Source</a><a href=\"#method.zvl_get_as_t\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_get_as_t\" class=\"fn\">zvl_get_as_t</a>&lt;R&gt;(g: &amp;Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" title=\"type zerovec::maps::ZeroVecLike::GetType\">GetType</a>, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Obtain a reference to T, passed to a closure <a href=\"zerovec/maps/trait.ZeroVecLike.html#tymethod.zvl_get_as_t\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_is_ascending\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#70-86\">Source</a><a href=\"#method.zvl_is_ascending\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#method.zvl_is_ascending\" class=\"fn\">zvl_is_ascending</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Check if this vector is in ascending order according to <code>T</code>s <code>Ord</code> impl</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zvl_is_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#88-90\">Source</a><a href=\"#method.zvl_is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#method.zvl_is_empty\" class=\"fn\">zvl_is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Check if this vector is empty</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.t_cmp_get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#105-110\">Source</a><a href=\"#method.t_cmp_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#method.t_cmp_get\" class=\"fn\">t_cmp_get</a>(t: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, g: &amp;Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" title=\"type zerovec::maps::ZeroVecLike::GetType\">GetType</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Compare this type with a <code>Self::GetType</code>. This must produce the same result as\nif <code>g</code> were converted to <code>Self</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_cmp_get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/map/vecs.rs.html#115-120\">Source</a><a href=\"#method.get_cmp_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/maps/trait.ZeroVecLike.html#method.get_cmp_get\" class=\"fn\">get_cmp_get</a>(a: &amp;Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" title=\"type zerovec::maps::ZeroVecLike::GetType\">GetType</a>, b: &amp;Self::<a class=\"associatedtype\" href=\"zerovec/maps/trait.ZeroVecLike.html#associatedtype.GetType\" title=\"type zerovec::maps::ZeroVecLike::GetType\">GetType</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class='docblock'>Compare two values of <code>Self::GetType</code>. This must produce the same result as\nif both <code>a</code> and <code>b</code> were converted to <code>Self</code></div></details></div></details>","ZeroVecLike<T>","zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"],["<section id=\"impl-Eq-for-VarZeroSlice%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/varzerovec/slice.rs.html#488-495\">Source</a><a href=\"#impl-Eq-for-VarZeroSlice%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"zerovec/struct.VarZeroSlice.html\" title=\"struct zerovec::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    F: <a class=\"trait\" href=\"zerovec/vecs/trait.VarZeroVecFormat.html\" title=\"trait zerovec::vecs::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section>","Eq","zerovec::vecs::VarZeroSlice16","zerovec::vecs::VarZeroSlice32"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[74242]}